[
  {
    "db_id": "california_schools",
    "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
    "input_sequence": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500? | schools : schools.cdscode , schools.phone , schools.school , schools.county , schools.district | satscores : satscores.numge1500 , satscores.sname , satscores.numtsttakr , satscores.cds , satscores.dname | frpm : frpm.cdscode , frpm.academic year , frpm.county code , frpm.district code , frpm.school code | frpm.cdscode = schools.cdscode | satscores.cds = schools.cdscode",
    "output_sequence": " | ",
    "tc_original": [
      "schools.cdscode",
      "schools.phone",
      "schools.school",
      "schools.county",
      "schools.district",
      "schools.*",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.cds",
      "satscores.dname",
      "satscores.*",
      "frpm.cdscode",
      "frpm.academic year",
      "frpm.county code",
      "frpm.district code",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "california_schools",
    "question": "Please list the codes of the schools with a total enrollment of over 500. Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`",
    "input_sequence": "Please list the codes of the schools with a total enrollment of over 500. Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)` | schools : schools.school , schools.cdscode , schools.gsserved ( 5-7 , K-12 ) , schools.gsoffered ( K-12 ) , schools.county | frpm : frpm.school code , frpm.enrollment (k-12) , frpm.enrollment (ages 5-17) , frpm.cdscode , frpm.free meal count (k-12) | satscores : satscores.cds , satscores.rtype , satscores.sname , satscores.dname , satscores.cname | frpm.cdscode = schools.cdscode | satscores.cds = schools.cdscode",
    "output_sequence": " | ",
    "tc_original": [
      "schools.school",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.county",
      "schools.*",
      "frpm.school code",
      "frpm.enrollment (k-12)",
      "frpm.enrollment (ages 5-17)",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.cds",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.cname",
      "satscores.*"
    ]
  },
  {
    "db_id": "california_schools",
    "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate. Excellence rate = NumGE1500 / NumTstTakr",
    "input_sequence": "Please list the phone numbers of the schools with the top 3 SAT excellence rate. Excellence rate = NumGE1500 / NumTstTakr | schools : schools.phone , schools.cdscode , schools.school , schools.county , schools.district | satscores : satscores.numge1500 , satscores.cds , satscores.enroll12 , satscores.rtype , satscores.sname | frpm : frpm.cdscode , frpm.academic year , frpm.county code , frpm.district code , frpm.school code | frpm.cdscode = schools.cdscode | satscores.cds = schools.cdscode",
    "output_sequence": " | ",
    "tc_original": [
      "schools.phone",
      "schools.cdscode",
      "schools.school",
      "schools.county",
      "schools.district",
      "schools.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.enroll12",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*",
      "frpm.cdscode",
      "frpm.academic year",
      "frpm.county code",
      "frpm.district code",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "california_schools",
    "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
    "input_sequence": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12? | frpm : frpm.county name ( Los Angeles ) , frpm.school code , frpm.free meal count (k-12) , frpm.district code , frpm.enrollment (k-12) | schools : schools.county ( Los Angeles ) , schools.city ( Los Angeles ) , schools.school , schools.cdscode , schools.gsoffered ( K-12 ) | satscores : satscores.cds , satscores.rtype , satscores.sname , satscores.dname , satscores.cname ( Los Angeles ) | frpm.cdscode = schools.cdscode | satscores.cds = schools.cdscode",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.district code",
      "frpm.enrollment (k-12)",
      "frpm.*",
      "schools.county",
      "schools.city",
      "schools.school",
      "schools.cdscode",
      "schools.gsoffered",
      "schools.*",
      "satscores.cds",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.cname",
      "satscores.*"
    ]
  },
  {
    "db_id": "california_schools",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores. Usually, administrators manage the school stuff.",
    "input_sequence": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores. Usually, administrators manage the school stuff. | satscores : satscores.avgscrwrite , satscores.sname , satscores.cds , satscores.avgscrread , satscores.enroll12 | schools : schools.admfname1 ( Ricci ) , schools.school , schools.admlname1 ( Ulrich ) , schools.cdscode , schools.admemail1 | frpm : frpm.enrollment (k-12) , frpm.enrollment (ages 5-17) , frpm.cdscode , frpm.academic year , frpm.county code | frpm.cdscode = schools.cdscode | satscores.cds = schools.cdscode",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.avgscrwrite",
      "satscores.sname",
      "satscores.cds",
      "satscores.avgscrread",
      "satscores.enroll12",
      "satscores.*",
      "schools.admfname1",
      "schools.school",
      "schools.admlname1",
      "schools.cdscode",
      "schools.admemail1",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.enrollment (ages 5-17)",
      "frpm.cdscode",
      "frpm.academic year",
      "frpm.county code",
      "frpm.*"
    ]
  },
  {
    "db_id": "california_schools",
    "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt? Ratio = count(schools in Colusa) / count(schools in Humboldt)",
    "input_sequence": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt? Ratio = count(schools in Colusa) / count(schools in Humboldt) | schools : schools.county ( Colusa , Humboldt ) , schools.mailstate , schools.state , schools.school , schools.mailcity ( Colusa ) | frpm : frpm.county name ( Colusa , Humboldt ) , frpm.cdscode , frpm.free meal count (k-12) , frpm.school code , frpm.school name | satscores : satscores.cds , satscores.rtype , satscores.sname , satscores.dname , satscores.cname ( Colusa , Humboldt ) | frpm.cdscode = schools.cdscode | satscores.cds = schools.cdscode",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.mailstate",
      "schools.state",
      "schools.school",
      "schools.mailcity",
      "schools.*",
      "frpm.county name",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.school name",
      "frpm.*",
      "satscores.cds",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.cname",
      "satscores.*"
    ]
  },
  {
    "db_id": "california_schools",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)` | schools : schools.county ( Los Angeles ) , schools.charter , schools.school , schools.cdscode , schools.district | frpm : frpm.percent (%) eligible free (k-12) , frpm.charter school (y/n) , frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) | satscores : satscores.cds , satscores.rtype , satscores.sname , satscores.dname , satscores.cname ( Los Angeles ) | frpm.cdscode = schools.cdscode | satscores.cds = schools.cdscode",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.school",
      "schools.cdscode",
      "schools.district",
      "schools.*",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.charter school (y/n)",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.*",
      "satscores.cds",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.cname",
      "satscores.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
    "input_sequence": "The transaction of 840 USD happened in 1998/10/14, when was this account opened? | trans : trans.date , trans.amount , trans.account_id , trans.k_symbol , trans.trans_id | account : account.date , account.account_id , account.frequency , account.district_id | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | card : card.type , card.issued , card.card_id , card.disp_id | loan.account_id = account.account_id | trans.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "trans.date",
      "trans.amount",
      "trans.account_id",
      "trans.k_symbol",
      "trans.trans_id",
      "trans.*",
      "account.date",
      "account.account_id",
      "account.frequency",
      "account.district_id",
      "account.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
    "input_sequence": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch. | loan : loan.date , loan.account_id , loan.loan_id , loan.amount , loan.duration | district : district.district_id , district.a2 , district.a3 , district.a4 , district.a5 | account : account.account_id , account.district_id , account.frequency , account.date | card : card.type , card.issued , card.card_id , card.disp_id | account.district_id = district.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.loan_id",
      "loan.amount",
      "loan.duration",
      "loan.*",
      "district.district_id",
      "district.a2",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many accounts were opened in Litomerice in 1996? A2 refers to district name; Litomerice is one of district names.",
    "input_sequence": "How many accounts were opened in Litomerice in 1996? A2 refers to district name; Litomerice is one of district names. | district : district.a2 ( Litomerice ) , district.district_id , district.a9 , district.a3 , district.a4 | account : account.district_id , account.date , account.account_id , account.frequency | card : card.type , card.issued , card.card_id , card.disp_id | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | account.district_id = district.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a9",
      "district.a3",
      "district.a4",
      "district.*",
      "account.district_id",
      "account.date",
      "account.account_id",
      "account.frequency",
      "account.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "What is the percentage of loan amount that has been fully paid with no issue. Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
    "input_sequence": "What is the percentage of loan amount that has been fully paid with no issue. Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100% | loan : loan.amount , loan.status , loan.date , loan.account_id , loan.payments | account : account.frequency , account.date , account.account_id , account.district_id | card : card.type , card.issued , card.card_id , card.disp_id | client : client.gender , client.client_id , client.birth_date , client.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.status",
      "loan.date",
      "loan.account_id",
      "loan.payments",
      "loan.*",
      "account.frequency",
      "account.date",
      "account.account_id",
      "account.district_id",
      "account.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "State the district and region for loan ID '4990'. A2, A3 contains the information about district and region respectively.",
    "input_sequence": "State the district and region for loan ID '4990'. A2, A3 contains the information about district and region respectively. | district : district.a3 , district.a2 , district.district_id , district.a4 , district.a5 | loan : loan.loan_id , loan.account_id , loan.date , loan.amount , loan.duration | account : account.frequency , account.date , account.account_id , account.district_id | card : card.type , card.issued , card.card_id , card.disp_id | account.district_id = district.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "district.a3",
      "district.a2",
      "district.district_id",
      "district.a4",
      "district.a5",
      "district.*",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.*",
      "account.frequency",
      "account.date",
      "account.account_id",
      "account.district_id",
      "account.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders. A2 refers to districts; Female refers to gender = 'F'",
    "input_sequence": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders. A2 refers to districts; Female refers to gender = 'F' | district : district.a9 , district.a2 , district.district_id , district.a3 , district.a4 | client : client.gender , client.client_id , client.district_id , client.birth_date | account : account.account_id , account.district_id , account.frequency , account.date | disp : disp.client_id , disp.account_id , disp.disp_id , disp.type | account.district_id = district.district_id | client.district_id = district.district_id | disp.client_id = client.client_id | disp.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "district.a9",
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.disp_id",
      "disp.type",
      "disp.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened? A16 stands for no. of committed crimes 1996",
    "input_sequence": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened? A16 stands for no. of committed crimes 1996 | account : account.district_id , account.account_id , account.frequency , account.date | district : district.a16 , district.district_id , district.a15 , district.a3 , district.a2 | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | card : card.type , card.issued , card.card_id , card.disp_id | account.district_id = district.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "district.a16",
      "district.district_id",
      "district.a15",
      "district.a3",
      "district.a2",
      "district.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many accounts have running contracts in Branch location 1? Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
    "input_sequence": "How many accounts have running contracts in Branch location 1? Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt | account : account.district_id , account.account_id , account.frequency , account.date | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | card : card.type , card.issued , card.card_id , card.disp_id | client : client.gender , client.client_id , client.birth_date , client.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
    "input_sequence": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995 | client : client.district_id , client.gender , client.client_id , client.birth_date | district : district.a15 , district.district_id , district.a16 , district.a3 , district.a2 | account : account.district_id , account.account_id , account.frequency , account.date | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id | account.district_id = district.district_id | client.district_id = district.district_id | disp.client_id = client.client_id | disp.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.district_id",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a15",
      "district.district_id",
      "district.a16",
      "district.a3",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many high-level credit cards have \"OWNER\" type of disposition? High-level credit cards refers to the cards with the gold type.",
    "input_sequence": "How many high-level credit cards have \"OWNER\" type of disposition? High-level credit cards refers to the cards with the gold type. | disp : disp.type ( OWNER ) , disp.disp_id , disp.client_id , disp.account_id | card : card.type ( gold ) , card.disp_id , card.card_id , card.issued | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | account : account.frequency , account.date , account.account_id , account.district_id | card.disp_id = disp.disp_id | disp.account_id = account.account_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.account_id",
      "disp.*",
      "card.type",
      "card.disp_id",
      "card.card_id",
      "card.issued",
      "card.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*",
      "account.frequency",
      "account.date",
      "account.account_id",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many accounts are there in the district of \"Pisek\"? A2 refers to district name",
    "input_sequence": "How many accounts are there in the district of \"Pisek\"? A2 refers to district name | district : district.a2 ( Pisek ) , district.a9 , district.district_id , district.a3 , district.a4 | account : account.district_id , account.account_id , account.frequency , account.date | card : card.type , card.issued , card.card_id , card.disp_id | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | account.district_id = district.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a9",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "Please list the accounts whose district is Tabor that are eligible for loans. District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
    "input_sequence": "Please list the accounts whose district is Tabor that are eligible for loans. District refers to column A2; when the account type = 'OWNER', it's eligible for loans | district : district.a2 ( Tabor ) , district.district_id , district.a3 , district.a4 , district.a5 | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status | disp : disp.type ( OWNER ) , disp.account_id , disp.disp_id , disp.client_id | account : account.account_id , account.frequency , account.date , account.district_id | account.district_id = district.district_id | disp.account_id = account.account_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "What is the district Id of the account that placed the order with the id 33333?",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | order : order.account_id , order.order_id , order.account_to , order.bank_to , order.amount | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 | account : account.account_id , account.frequency , account.date , account.district_id | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | account.district_id = district.district_id | loan.account_id = account.account_id | order.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "order.account_id",
      "order.order_id",
      "order.account_to",
      "order.bank_to",
      "order.amount",
      "order.*",
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "What is the region of the client with the id 3541 from? A3 refers to region",
    "input_sequence": "What is the region of the client with the id 3541 from? A3 refers to region | client : client.client_id , client.district_id , client.gender , client.birth_date | district : district.a3 , district.district_id , district.a2 , district.a4 , district.a5 | disp : disp.client_id , disp.disp_id , disp.account_id , disp.type | account : account.district_id , account.frequency , account.date , account.account_id | account.district_id = district.district_id | client.district_id = district.district_id | disp.client_id = client.client_id | disp.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.district_id",
      "client.gender",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.district_id",
      "district.a2",
      "district.a4",
      "district.a5",
      "district.*",
      "disp.client_id",
      "disp.disp_id",
      "disp.account_id",
      "disp.type",
      "disp.*",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.account_id",
      "account.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many of the accounts are from Jesenik district?",
    "input_sequence": "How many of the accounts are from Jesenik district? | district : district.a2 ( Jesenik ) , district.district_id , district.a3 , district.a4 , district.a5 | account : account.district_id , account.account_id , account.date , account.frequency | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | card : card.type , card.issued , card.card_id , card.disp_id | account.district_id = district.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
    "input_sequence": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11 | client : client.client_id , client.gender , client.district_id , client.birth_date | district : district.a11 , district.district_id , district.a2 , district.a9 , district.a3 | account : account.account_id , account.district_id , account.frequency , account.date | disp : disp.client_id , disp.account_id , disp.disp_id , disp.type | account.district_id = district.district_id | client.district_id = district.district_id | disp.client_id = client.client_id | disp.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "district.a11",
      "district.district_id",
      "district.a2",
      "district.a9",
      "district.a3",
      "district.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.disp_id",
      "disp.type",
      "disp.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction? Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "input_sequence": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction? Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction | disp : disp.account_id , disp.type ( OWNER ) , disp.disp_id , disp.client_id | trans : trans.account_id , trans.account , trans.k_symbol , trans.trans_id , trans.date | account : account.frequency ( POPLATEK PO OBRATU ) , account.account_id , account.date , account.district_id | card : card.type , card.issued , card.card_id , card.disp_id | card.disp_id = disp.disp_id | disp.account_id = account.account_id | trans.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "trans.account_id",
      "trans.account",
      "trans.k_symbol",
      "trans.trans_id",
      "trans.date",
      "trans.*",
      "account.frequency",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many accounts in Beroun were opened after 1996?",
    "input_sequence": "How many accounts in Beroun were opened after 1996? | account : account.date , account.district_id , account.account_id , account.frequency | district : district.a2 ( Beroun ) , district.district_id , district.a4 , district.a3 , district.a5 | loan : loan.date , loan.amount , loan.duration , loan.status , loan.loan_id | card : card.type , card.issued , card.card_id , card.disp_id | account.district_id = district.district_id | loan.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "account.date",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.*",
      "district.a2",
      "district.district_id",
      "district.a4",
      "district.a3",
      "district.a5",
      "district.*",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "financial",
    "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement. Frequency = 'POPLATEK TYDNE' referes to weekly statement",
    "input_sequence": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement. Frequency = 'POPLATEK TYDNE' referes to weekly statement | loan : loan.duration , loan.payments , loan.account_id , loan.loan_id , loan.date | account : account.frequency ( POPLATEK TYDNE ) , account.account_id , account.date , account.district_id | order : order.order_id , order.account_id , order.bank_to , order.account_to , order.amount | card : card.type , card.issued , card.card_id , card.disp_id | loan.account_id = account.account_id | order.account_id = account.account_id",
    "output_sequence": " | ",
    "tc_original": [
      "loan.duration",
      "loan.payments",
      "loan.account_id",
      "loan.loan_id",
      "loan.date",
      "loan.*",
      "account.frequency",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.*",
      "order.order_id",
      "order.account_id",
      "order.bank_to",
      "order.account_to",
      "order.amount",
      "order.*",
      "card.type",
      "card.issued",
      "card.card_id",
      "card.disp_id",
      "card.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What elements are in the TR004_8_9 bond atoms? TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9'; | atom : atom.element , atom.atom_id , atom.molecule_id | bond : bond.bond_id ( TR004_8_9 ) , bond.molecule_id , bond.bond_type | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 | molecule : molecule.label , molecule.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20? type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
    "input_sequence": "What type of bond is there between the atoms TR004_8 and TR004_20? type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around | bond : bond.bond_type , bond.bond_id , bond.molecule_id | connected : connected.atom_id ( TR004_20 , TR004_8 ) , connected.atom_id2 ( TR004_20 , TR004_8 ) , connected.bond_id | atom : atom.atom_id ( TR004_20 , TR004_8 ) , atom.element , atom.molecule_id | molecule : molecule.label , molecule.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What type of label is not on molecules with atoms with tin? tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "input_sequence": "What type of label is not on molecules with atoms with tin? tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic | molecule : molecule.molecule_id , molecule.label | atom : atom.element ( sn ) , atom.molecule_id , atom.atom_id | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | bond : bond.bond_id , bond.molecule_id , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. TR000 is the molecule id;",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. TR000 is the molecule id; | atom : atom.molecule_id ( TR000 ) , atom.element , atom.atom_id | molecule : molecule.molecule_id ( TR000 ) , molecule.label | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | bond : bond.bond_id , bond.molecule_id ( TR000 ) , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What are the bond IDs that have the same atom ID 2 of TR000_2? TR000_2 is the atom id; atom ID 2 refers to atom_id2",
    "input_sequence": "What are the bond IDs that have the same atom ID 2 of TR000_2? TR000_2 is the atom id; atom ID 2 refers to atom_id2 | connected : connected.bond_id , connected.atom_id2 ( TR000_2 ) , connected.atom_id ( TR000_2 ) | bond : bond.bond_id , bond.bond_type , bond.molecule_id | molecule : molecule.label , molecule.molecule_id | atom : atom.element , atom.atom_id ( TR000_2 ) , atom.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "connected.bond_id",
      "connected.atom_id2",
      "connected.atom_id",
      "connected.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id; | molecule : molecule.molecule_id , molecule.label | bond : bond.molecule_id , bond.bond_id , bond.bond_type | connected : connected.bond_id , connected.atom_id , connected.atom_id2 | atom : atom.atom_id , atom.molecule_id , atom.element | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What is the average number of bonds the atoms with the element iodine have? atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i' | atom : atom.element , atom.atom_id , atom.molecule_id | bond : bond.bond_id , bond.molecule_id , bond.bond_type | connected : connected.bond_id , connected.atom_id , connected.atom_id2 | molecule : molecule.label , molecule.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine. triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'",
    "input_sequence": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine. triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br' | atom : atom.atom_id , atom.molecule_id , atom.element | bond : bond.molecule_id , bond.bond_id , bond.bond_type | connected : connected.atom_id , connected.bond_id , connected.atom_id2 | molecule : molecule.molecule_id , molecule.label | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What are the labels for TR000, TR001 and TR002? TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "input_sequence": "What are the labels for TR000, TR001 and TR002? TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic | molecule : molecule.label , molecule.molecule_id ( TR000 , TR001 ) | atom : atom.element , atom.atom_id , atom.molecule_id ( TR000 , TR001 ) | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | bond : bond.bond_id , bond.molecule_id ( TR000 , TR001 ) , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030. label = '+' mean molecules are carcinogenic",
    "input_sequence": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030. label = '+' mean molecules are carcinogenic | molecule : molecule.molecule_id ( TR000 , TR030 ) , molecule.label | atom : atom.element , atom.atom_id , atom.molecule_id ( TR000 , TR030 ) | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | bond : bond.bond_id , bond.molecule_id ( TR000 , TR030 ) , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon. carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
    "input_sequence": "List down two molecule id of triple bond non carcinogenic molecules with element carbon. carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic | bond : bond.molecule_id , bond.bond_type , bond.bond_id | atom : atom.element , atom.molecule_id , atom.atom_id | molecule : molecule.molecule_id , molecule.label | connected : connected.bond_id , connected.atom_id , connected.atom_id2 | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Write down the atom IDs of the first and second atoms of triple bond type molecules. first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';",
    "input_sequence": "Write down the atom IDs of the first and second atoms of triple bond type molecules. first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#'; | bond : bond.bond_type , bond.molecule_id , bond.bond_id | connected : connected.atom_id2 , connected.bond_id , connected.atom_id | atom : atom.molecule_id , atom.atom_id , atom.element | molecule : molecule.molecule_id , molecule.label | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.atom_id",
      "connected.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What are the toxicology elements associated with bond ID TR000_1_2? TR000_1_2 is the bond id;",
    "input_sequence": "What are the toxicology elements associated with bond ID TR000_1_2? TR000_1_2 is the bond id; | atom : atom.element , atom.atom_id , atom.molecule_id | connected : connected.bond_id ( TR000_1_2 ) , connected.atom_id , connected.atom_id2 | bond : bond.bond_id ( TR000_1_2 ) , bond.molecule_id , bond.bond_type | molecule : molecule.label , molecule.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What is the label for bond ID TR001_10_11? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "input_sequence": "What is the label for bond ID TR001_10_11? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic | molecule : molecule.label , molecule.molecule_id | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type | connected : connected.atom_id , connected.atom_id2 , connected.bond_id ( TR001_10_11 ) | atom : atom.element , atom.atom_id , atom.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "How many atoms belong to the molecule labeled with carcinogenic compounds? label = '+' mean molecules are carcinogenic;",
    "input_sequence": "How many atoms belong to the molecule labeled with carcinogenic compounds? label = '+' mean molecules are carcinogenic; | atom : atom.molecule_id , atom.atom_id , atom.element | molecule : molecule.molecule_id , molecule.label | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | bond : bond.bond_id , bond.molecule_id , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What is the bond type of TR007_4_19? double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
    "input_sequence": "What is the bond type of TR007_4_19? double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id | molecule : molecule.label , molecule.molecule_id | connected : connected.atom_id , connected.atom_id2 , connected.bond_id ( TR007_4_19 ) | atom : atom.element , atom.atom_id , atom.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Name the elements that comprise the atoms of bond TR001_2_4. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium | atom : atom.atom_id , atom.element ( br , cl ) , atom.molecule_id | bond : bond.bond_id ( TR001_2_4 ) , bond.molecule_id , bond.bond_type | connected : connected.atom_id , connected.bond_id ( TR001_2_4 ) , connected.atom_id2 | molecule : molecule.label , molecule.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic? label = '+' mean molecules are carcinogenic;",
    "input_sequence": "Among the molecules which contain \"cl\" element, which of them are carcinogenic? label = '+' mean molecules are carcinogenic; | atom : atom.element ( cl ) , atom.molecule_id , atom.atom_id | molecule : molecule.molecule_id , molecule.label | bond : bond.bond_id , bond.molecule_id , bond.bond_type | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "How many elements are contained in bond_id TR001_3_4? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type | atom : atom.atom_id , atom.element ( br , cl ) , atom.molecule_id | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 | molecule : molecule.label , molecule.molecule_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What is the element of toxicology for the atom with the ID of TR000_1? atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "input_sequence": "What is the element of toxicology for the atom with the ID of TR000_1? atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium | atom : atom.atom_id ( TR000_1 ) , atom.element ( br , cl ) , atom.molecule_id | molecule : molecule.label , molecule.molecule_id | connected : connected.atom_id ( TR000_1 ) , connected.atom_id2 ( TR000_1 ) , connected.bond_id | bond : bond.bond_id , bond.molecule_id , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms? label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
    "input_sequence": "Which non-carcinogenic molecules consisted more than 5 atoms? label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5 | molecule : molecule.label , molecule.molecule_id | atom : atom.element , atom.atom_id , atom.molecule_id | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | bond : bond.bond_id , bond.molecule_id , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium | atom : atom.atom_id ( TR004_7 ) , atom.element ( br , cl ) , atom.molecule_id | molecule : molecule.molecule_id , molecule.label | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id | bond : bond.bond_id , bond.molecule_id , bond.bond_type | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "question": "List the atom ID of the carcinogenic molecule that contains oxygen? label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'",
    "input_sequence": "List the atom ID of the carcinogenic molecule that contains oxygen? label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o' | molecule : molecule.molecule_id , molecule.label | atom : atom.molecule_id , atom.atom_id , atom.element | bond : bond.bond_id , bond.molecule_id , bond.bond_type | connected : connected.atom_id , connected.atom_id2 , connected.bond_id | atom.molecule_id = molecule.molecule_id | bond.molecule_id = molecule.molecule_id | connected.bond_id = bond.bond_id | connected.atom_id2 = atom.atom_id | connected.atom_id = atom.atom_id",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity. movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity;",
    "input_sequence": "What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity. movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity; | movies : movies.movie_title , movies.movie_release_year , movies.movie_popularity , movies.director_name ( Steven Spielberg ) , movies.movie_id | lists : lists.user_id , lists.list_id , lists.list_title , lists.list_movie_number , lists.list_update_timestamp_utc | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | lists.user_id = lists_users.user_id | ratings_users.user_id = lists_users.user_id | lists_users.user_id = lists.user_id | lists_users.list_id = lists.list_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.movie_title",
      "movies.movie_release_year",
      "movies.movie_popularity",
      "movies.director_name",
      "movies.movie_id",
      "movies.*",
      "lists.user_id",
      "lists.list_id",
      "lists.list_title",
      "lists.list_movie_number",
      "lists.list_update_timestamp_utc",
      "lists.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes? URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39;",
    "input_sequence": "What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes? URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39; | ratings : ratings.critic_likes , ratings.critic , ratings.movie_id , ratings.user_id , ratings.rating_id | movies : movies.movie_id , movies.director_id , movies.director_url , movies.director_name , movies.movie_title | lists : lists.user_id , lists.list_id , lists.list_title ( Directors ) , lists.list_movie_number , lists.list_update_timestamp_utc | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | ratings.user_id = ratings_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "ratings.critic_likes",
      "ratings.critic",
      "ratings.movie_id",
      "ratings.user_id",
      "ratings.rating_id",
      "ratings.*",
      "movies.movie_id",
      "movies.director_id",
      "movies.director_url",
      "movies.director_name",
      "movies.movie_title",
      "movies.*",
      "lists.user_id",
      "lists.list_id",
      "lists.list_title",
      "lists.list_movie_number",
      "lists.list_update_timestamp_utc",
      "lists.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372? URL refer to rating_url; user 22030372 refer to user_id",
    "input_sequence": "What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372? URL refer to rating_url; user 22030372 refer to user_id | ratings : ratings.rating_score , ratings.movie_id , ratings.rating_url , ratings.user_id , ratings.rating_id | movies : movies.movie_id , movies.movie_title , movies.movie_url , movies.movie_popularity , movies.movie_release_year | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | ratings_users.user_id = lists_users.user_id | ratings.user_id = ratings_users.user_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "ratings.rating_score",
      "ratings.movie_id",
      "ratings.rating_url",
      "ratings.user_id",
      "ratings.rating_id",
      "ratings.*",
      "movies.movie_id",
      "movies.movie_title",
      "movies.movie_url",
      "movies.movie_popularity",
      "movies.movie_release_year",
      "movies.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "What is the URL to the rating on Mubi made by user 45579900 for the movie \"The Vertical Ray of the Sun\" that received 20 likes? URL refer to rating_url; 20 likes refer to critic_likes = '20'; user 45579900 refer to user_id",
    "input_sequence": "What is the URL to the rating on Mubi made by user 45579900 for the movie \"The Vertical Ray of the Sun\" that received 20 likes? URL refer to rating_url; 20 likes refer to critic_likes = '20'; user 45579900 refer to user_id | ratings : ratings.user_id , ratings.rating_url , ratings.critic_likes , ratings.movie_id , ratings.rating_id | movies : movies.movie_title , movies.movie_id , movies.movie_url , movies.movie_release_year , movies.movie_title_language | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | ratings_users.user_id = lists_users.user_id | ratings.user_id = ratings_users.user_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "ratings.user_id",
      "ratings.rating_url",
      "ratings.critic_likes",
      "ratings.movie_id",
      "ratings.rating_id",
      "ratings.*",
      "movies.movie_title",
      "movies.movie_id",
      "movies.movie_url",
      "movies.movie_release_year",
      "movies.movie_title_language",
      "movies.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "Where can I find the movie list \"Short and pretty damn sweet\"? Short and pretty damn sweet is list_title; location of the movie refers to list_url;",
    "input_sequence": "Where can I find the movie list \"Short and pretty damn sweet\"? Short and pretty damn sweet is list_title; location of the movie refers to list_url; | movies : movies.movie_title , movies.movie_url , movies.movie_id , movies.movie_title_language , movies.movie_popularity | lists : lists.list_title , lists.list_id , lists.list_url , lists.user_id , lists.list_movie_number | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | lists.user_id = lists_users.user_id | ratings_users.user_id = lists_users.user_id | lists_users.user_id = lists.user_id | lists_users.list_id = lists.list_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.movie_title",
      "movies.movie_url",
      "movies.movie_id",
      "movies.movie_title_language",
      "movies.movie_popularity",
      "movies.*",
      "lists.list_title",
      "lists.list_id",
      "lists.list_url",
      "lists.user_id",
      "lists.list_movie_number",
      "lists.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "Please list all the critics made by the user rating the movie \"A Way of Life\". A Way of Life refers to movie_title;",
    "input_sequence": "Please list all the critics made by the user rating the movie \"A Way of Life\". A Way of Life refers to movie_title; | ratings : ratings.critic , ratings.movie_id , ratings.user_id , ratings.rating_id , ratings.rating_url | movies : movies.movie_title ( A Way of Life ) , movies.movie_id , movies.movie_release_year , movies.movie_url , movies.movie_title_language | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists : lists.user_id , lists.list_id , lists.list_title , lists.list_movie_number , lists.list_update_timestamp_utc | ratings.user_id = ratings_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "ratings.critic",
      "ratings.movie_id",
      "ratings.user_id",
      "ratings.rating_id",
      "ratings.rating_url",
      "ratings.*",
      "movies.movie_title",
      "movies.movie_id",
      "movies.movie_release_year",
      "movies.movie_url",
      "movies.movie_title_language",
      "movies.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists.user_id",
      "lists.list_id",
      "lists.list_title",
      "lists.list_movie_number",
      "lists.list_update_timestamp_utc",
      "lists.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "Was user 39115684 a trialist when he or she rated the movie \"A Way of Life\"? A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;  the user was a trialist when he rated the movie refers to user_trialist = 1;",
    "input_sequence": "Was user 39115684 a trialist when he or she rated the movie \"A Way of Life\"? A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;  the user was a trialist when he rated the movie refers to user_trialist = 1; | movies : movies.movie_title ( A Way of Life ) , movies.movie_id , movies.movie_release_year , movies.movie_url , movies.movie_title_language | ratings_users : ratings_users.user_trialist , ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | ratings : ratings.movie_id , ratings.user_id , ratings.user_trialist , ratings.critic , ratings.rating_id | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | ratings_users.user_id = lists_users.user_id | ratings.user_id = ratings_users.user_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.movie_title",
      "movies.movie_id",
      "movies.movie_release_year",
      "movies.movie_url",
      "movies.movie_title_language",
      "movies.*",
      "ratings_users.user_trialist",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "ratings.movie_id",
      "ratings.user_id",
      "ratings.user_trialist",
      "ratings.critic",
      "ratings.rating_id",
      "ratings.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "Who was the director of the movie \"Tokyo Eyes\"？ Tokyo Eyes' is movie_title, director refers to director_name;",
    "input_sequence": "Who was the director of the movie \"Tokyo Eyes\"？ Tokyo Eyes' is movie_title, director refers to director_name; | movies : movies.director_name , movies.movie_title ( Tokyo Eyes , Tokyo! ) , movies.director_id , movies.movie_id , movies.movie_release_year | lists : lists.user_id , lists.list_id , lists.list_title ( Directors ) , lists.list_movie_number , lists.list_update_timestamp_utc | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | lists.user_id = lists_users.user_id | ratings_users.user_id = lists_users.user_id | lists_users.user_id = lists.user_id | lists_users.list_id = lists.list_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.director_name",
      "movies.movie_title",
      "movies.director_id",
      "movies.movie_id",
      "movies.movie_release_year",
      "movies.*",
      "lists.user_id",
      "lists.list_id",
      "lists.list_title",
      "lists.list_movie_number",
      "lists.list_update_timestamp_utc",
      "lists.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "Please provide the ID of the user with the most followers on the list. most followers refers to Max(list_followers);",
    "input_sequence": "Please provide the ID of the user with the most followers on the list. most followers refers to Max(list_followers); | lists : lists.list_followers , lists.user_id , lists.list_id , lists.list_title , lists.list_movie_number | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | movies : movies.movie_id , movies.movie_title , movies.movie_release_year , movies.movie_url , movies.movie_title_language | ratings : ratings.critic , ratings.movie_id , ratings.rating_id , ratings.rating_url , ratings.rating_score | lists.user_id = lists_users.user_id | lists_users.user_id = lists.user_id | lists_users.list_id = lists.list_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "lists.list_followers",
      "lists.user_id",
      "lists.list_id",
      "lists.list_title",
      "lists.list_movie_number",
      "lists.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*",
      "movies.movie_id",
      "movies.movie_title",
      "movies.movie_release_year",
      "movies.movie_url",
      "movies.movie_title_language",
      "movies.*",
      "ratings.critic",
      "ratings.movie_id",
      "ratings.rating_id",
      "ratings.rating_url",
      "ratings.rating_score",
      "ratings.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "Please list the names of the movies that user 94978 scored as 5. user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5;",
    "input_sequence": "Please list the names of the movies that user 94978 scored as 5. user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5; | movies : movies.movie_title , movies.movie_id , movies.movie_url , movies.movie_release_year , movies.movie_title_language | ratings : ratings.rating_score , ratings.movie_id , ratings.user_id , ratings.rating_id , ratings.critic | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | ratings_users.user_id = lists_users.user_id | ratings.user_id = ratings_users.user_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.movie_title",
      "movies.movie_id",
      "movies.movie_url",
      "movies.movie_release_year",
      "movies.movie_title_language",
      "movies.*",
      "ratings.rating_score",
      "ratings.movie_id",
      "ratings.user_id",
      "ratings.rating_id",
      "ratings.critic",
      "ratings.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "Please list the names of the films released in 2003 among the films scored by user 2941 . released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie;",
    "input_sequence": "Please list the names of the films released in 2003 among the films scored by user 2941 . released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie; | movies : movies.movie_release_year , movies.movie_id , movies.movie_title , movies.movie_url , movies.movie_title_language | ratings : ratings.movie_id , ratings.user_id , ratings.rating_score , ratings.critic , ratings.rating_id | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | ratings_users.user_id = lists_users.user_id | ratings.user_id = ratings_users.user_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.movie_release_year",
      "movies.movie_id",
      "movies.movie_title",
      "movies.movie_url",
      "movies.movie_title_language",
      "movies.*",
      "ratings.movie_id",
      "ratings.user_id",
      "ratings.rating_score",
      "ratings.critic",
      "ratings.rating_id",
      "ratings.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url. user 85981819 refers to user_id = 85981819;  first list created refers to Min (list_creation_date_utc);",
    "input_sequence": "What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url. user 85981819 refers to user_id = 85981819;  first list created refers to Min (list_creation_date_utc); | lists : lists.list_title , lists.list_creation_timestamp_utc , lists.user_id , lists.list_id , lists.list_update_timestamp_utc | lists_users : lists_users.list_creation_date_utc , lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.user_avatar_image_url | movies : movies.movie_id , movies.movie_title , movies.movie_release_year , movies.movie_url , movies.movie_title_language | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists.user_id = lists_users.user_id | ratings_users.user_id = lists_users.user_id | lists_users.user_id = lists.user_id | lists_users.list_id = lists.list_id",
    "output_sequence": " | ",
    "tc_original": [
      "lists.list_title",
      "lists.list_creation_timestamp_utc",
      "lists.user_id",
      "lists.list_id",
      "lists.list_update_timestamp_utc",
      "lists.*",
      "lists_users.list_creation_date_utc",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.user_avatar_image_url",
      "lists_users.*",
      "movies.movie_id",
      "movies.movie_title",
      "movies.movie_release_year",
      "movies.movie_url",
      "movies.movie_title_language",
      "movies.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "List all movies rated by user 39115684. State the title, rating date and rating score. user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc",
    "input_sequence": "List all movies rated by user 39115684. State the title, rating date and rating score. user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc | movies : movies.movie_title , movies.movie_id , movies.movie_release_year , movies.movie_url , movies.movie_title_language | ratings : ratings.rating_score , ratings.movie_id , ratings.user_id , ratings.rating_timestamp_utc , ratings.rating_id | ratings_users : ratings_users.rating_date_utc , ratings_users.user_id , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | ratings_users.user_id = lists_users.user_id | ratings.user_id = ratings_users.user_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.movie_title",
      "movies.movie_id",
      "movies.movie_release_year",
      "movies.movie_url",
      "movies.movie_title_language",
      "movies.*",
      "ratings.rating_score",
      "ratings.movie_id",
      "ratings.user_id",
      "ratings.rating_timestamp_utc",
      "ratings.rating_id",
      "ratings.*",
      "ratings_users.rating_date_utc",
      "ratings_users.user_id",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "movie_platform",
    "question": "What is the name of the movie that was rated recently by user 57756708? user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc)",
    "input_sequence": "What is the name of the movie that was rated recently by user 57756708? user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc) | movies : movies.movie_title , movies.movie_id , movies.movie_url , movies.movie_release_year , movies.movie_title_language | ratings : ratings.movie_id , ratings.rating_timestamp_utc , ratings.user_id , ratings.critic , ratings.rating_id | ratings_users : ratings_users.user_id , ratings_users.rating_date_utc , ratings_users.user_trialist , ratings_users.user_subscriber , ratings_users.user_avatar_image_url | lists_users : lists_users.user_id , lists_users.list_id , lists_users.list_update_date_utc , lists_users.list_creation_date_utc , lists_users.user_trialist | ratings_users.user_id = lists_users.user_id | ratings.user_id = ratings_users.user_id | ratings.user_id = lists_users.user_id | ratings.movie_id = movies.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movies.movie_title",
      "movies.movie_id",
      "movies.movie_url",
      "movies.movie_release_year",
      "movies.movie_title_language",
      "movies.*",
      "ratings.movie_id",
      "ratings.rating_timestamp_utc",
      "ratings.user_id",
      "ratings.critic",
      "ratings.rating_id",
      "ratings.*",
      "ratings_users.user_id",
      "ratings_users.rating_date_utc",
      "ratings_users.user_trialist",
      "ratings_users.user_subscriber",
      "ratings_users.user_avatar_image_url",
      "ratings_users.*",
      "lists_users.user_id",
      "lists_users.list_id",
      "lists_users.list_update_date_utc",
      "lists_users.list_creation_date_utc",
      "lists_users.user_trialist",
      "lists_users.*"
    ]
  },
  {
    "db_id": "book_publishing_company",
    "question": "Name all employees who were hired before year 1990. hired before year 1990 refers to YEAR(hire_date)<1990",
    "input_sequence": "Name all employees who were hired before year 1990. hired before year 1990 refers to YEAR(hire_date)<1990 | employee : employee.hire_date , employee.emp_id , employee.pub_id , employee.fname , employee.minit | authors : authors.phone , authors.address , authors.city , authors.state , authors.zip | publishers : publishers.city , publishers.state , publishers.country , publishers.pub_id , publishers.pub_name | pub_info : pub_info.logo , pub_info.pub_id , pub_info.pr_info | employee.pub_id = publishers.pub_id | pub_info.pub_id = publishers.pub_id",
    "output_sequence": " | ",
    "tc_original": [
      "employee.hire_date",
      "employee.emp_id",
      "employee.pub_id",
      "employee.fname",
      "employee.minit",
      "employee.*",
      "authors.phone",
      "authors.address",
      "authors.city",
      "authors.state",
      "authors.zip",
      "authors.*",
      "publishers.city",
      "publishers.state",
      "publishers.country",
      "publishers.pub_id",
      "publishers.pub_name",
      "publishers.*",
      "pub_info.logo",
      "pub_info.pub_id",
      "pub_info.pr_info",
      "pub_info.*"
    ]
  },
  {
    "db_id": "book_publishing_company",
    "question": "Among all employees, who have job level greater than 200. State the employee name and job description. job level greater than 200 refers to job_lvl>200; job description refers to job_desc",
    "input_sequence": "Among all employees, who have job level greater than 200. State the employee name and job description. job level greater than 200 refers to job_lvl>200; job description refers to job_desc | employee : employee.job_lvl , employee.fname , employee.job_id , employee.lname , employee.emp_id | jobs : jobs.job_desc , jobs.job_id , jobs.min_lvl , jobs.max_lvl | authors : authors.phone , authors.address , authors.city , authors.state , authors.zip | titles : titles.title , titles.type , titles.price , titles.advance , titles.royalty | employee.job_id = jobs.job_id",
    "output_sequence": " | ",
    "tc_original": [
      "employee.job_lvl",
      "employee.fname",
      "employee.job_id",
      "employee.lname",
      "employee.emp_id",
      "employee.*",
      "jobs.job_desc",
      "jobs.job_id",
      "jobs.min_lvl",
      "jobs.max_lvl",
      "jobs.*",
      "authors.phone",
      "authors.address",
      "authors.city",
      "authors.state",
      "authors.zip",
      "authors.*",
      "titles.title",
      "titles.type",
      "titles.price",
      "titles.advance",
      "titles.royalty",
      "titles.*"
    ]
  },
  {
    "db_id": "book_publishing_company",
    "question": "How many books on business have the bookstores in Massachusetts ordered? Massachusetts is a state; business books refers to type = 'business'",
    "input_sequence": "How many books on business have the bookstores in Massachusetts ordered? Massachusetts is a state; business books refers to type = 'business' | stores : stores.stor_id , stores.state , stores.city , stores.zip , stores.stor_name | titles : titles.type ( business ) , titles.title_id , titles.title , titles.pub_id , titles.price | sales : sales.stor_id , sales.title_id , sales.ord_num , sales.ord_date , sales.qty | roysched : roysched.royalty , roysched.title_id , roysched.lorange , roysched.hirange | roysched.title_id = titles.title_id | sales.title_id = titles.title_id | sales.stor_id = stores.stor_id",
    "output_sequence": " | ",
    "tc_original": [
      "stores.stor_id",
      "stores.state",
      "stores.city",
      "stores.zip",
      "stores.stor_name",
      "stores.*",
      "titles.type",
      "titles.title_id",
      "titles.title",
      "titles.pub_id",
      "titles.price",
      "titles.*",
      "sales.stor_id",
      "sales.title_id",
      "sales.ord_num",
      "sales.ord_date",
      "sales.qty",
      "sales.*",
      "roysched.royalty",
      "roysched.title_id",
      "roysched.lorange",
      "roysched.hirange",
      "roysched.*"
    ]
  },
  {
    "db_id": "book_publishing_company",
    "question": "How many levels are there left for Diego W Roel to reach if he/she could go to the max level for his/her position? max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl)",
    "input_sequence": "How many levels are there left for Diego W Roel to reach if he/she could go to the max level for his/her position? max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl) | employee : employee.lname ( Roel ) , employee.fname ( Diego ) , employee.job_lvl , employee.job_id , employee.emp_id | jobs : jobs.job_id , jobs.max_lvl , jobs.min_lvl , jobs.job_desc | authors : authors.phone , authors.address , authors.city , authors.state , authors.zip | titles : titles.title , titles.type , titles.price , titles.advance , titles.royalty | employee.job_id = jobs.job_id",
    "output_sequence": " | ",
    "tc_original": [
      "employee.lname",
      "employee.fname",
      "employee.job_lvl",
      "employee.job_id",
      "employee.emp_id",
      "employee.*",
      "jobs.job_id",
      "jobs.max_lvl",
      "jobs.min_lvl",
      "jobs.job_desc",
      "jobs.*",
      "authors.phone",
      "authors.address",
      "authors.city",
      "authors.state",
      "authors.zip",
      "authors.*",
      "titles.title",
      "titles.type",
      "titles.price",
      "titles.advance",
      "titles.royalty",
      "titles.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL? full names = first, middle, last; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; MICHAL refers to server = 'MICHAL';",
    "input_sequence": "What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL? full names = first, middle, last; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; MICHAL refers to server = 'MICHAL'; | client : client.client_id , client.first ( Michael ) , client.last ( Michael ) , client.middle ( Michael ) , client.sex | callcenterlogs : callcenterlogs.date received ( 2017-03-23 , 2017-03-27 ) , callcenterlogs.server ( MICHAL ) , callcenterlogs.rand client , callcenterlogs.complaint id , callcenterlogs.priority | events : events.product , events.issue , events.tags , events.complaint id , events.client_id | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.first",
      "client.last",
      "client.middle",
      "client.sex",
      "client.*",
      "callcenterlogs.date received",
      "callcenterlogs.server",
      "callcenterlogs.rand client",
      "callcenterlogs.complaint id",
      "callcenterlogs.priority",
      "callcenterlogs.*",
      "events.product",
      "events.issue",
      "events.tags",
      "events.complaint id",
      "events.client_id",
      "events.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "For how long did the complaint filed on 2017/3/27 by Rachel Hicks last? how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to \"Date received\" = '2017-03-27';",
    "input_sequence": "For how long did the complaint filed on 2017/3/27 by Rachel Hicks last? how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; | client : client.client_id , client.first ( Rachel ) , client.last ( Hicks , Long ) , client.middle ( Rachel ) , client.phone | callcenterlogs : callcenterlogs.ser_time , callcenterlogs.date received ( 2017-03-23 , 2017-03-27 ) , callcenterlogs.complaint id , callcenterlogs.rand client , callcenterlogs.call_id | events : events.client_id , events.complaint id , events.product , events.issue , events.tags | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.first",
      "client.last",
      "client.middle",
      "client.phone",
      "client.*",
      "callcenterlogs.ser_time",
      "callcenterlogs.date received",
      "callcenterlogs.complaint id",
      "callcenterlogs.rand client",
      "callcenterlogs.call_id",
      "callcenterlogs.*",
      "events.client_id",
      "events.complaint id",
      "events.product",
      "events.issue",
      "events.tags",
      "events.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What was the serve time for the complaint call from client \"C00007127\" on 2017/2/22? serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to \"Date received\" = '2017-02-22';",
    "input_sequence": "What was the serve time for the complaint call from client \"C00007127\" on 2017/2/22? serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to \"Date received\" = '2017-02-22'; | callcenterlogs : callcenterlogs.ser_time , callcenterlogs.date received ( 2017-02-22 , 2017-02-28 ) , callcenterlogs.rand client ( C00007127 ) , callcenterlogs.complaint id , callcenterlogs.call_id | client : client.sex , client.day , client.month , client.year , client.age | reviews : reviews.stars , reviews.reviews , reviews.product , reviews.date ( 2017-02-12 , 2017-02-24 ) , reviews.district_id | state : state.state , state.region , state.statecode | callcenterlogs.rand client = client.client_id",
    "output_sequence": " | ",
    "tc_original": [
      "callcenterlogs.ser_time",
      "callcenterlogs.date received",
      "callcenterlogs.rand client",
      "callcenterlogs.complaint id",
      "callcenterlogs.call_id",
      "callcenterlogs.*",
      "client.sex",
      "client.day",
      "client.month",
      "client.year",
      "client.age",
      "client.*",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.date",
      "reviews.district_id",
      "reviews.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What was the detailed issue did Mr Gunner Omer Fuller complain about? detailed issue refers to Sub-issue; Mr refers to sex = 'Male';",
    "input_sequence": "What was the detailed issue did Mr Gunner Omer Fuller complain about? detailed issue refers to Sub-issue; Mr refers to sex = 'Male'; | client : client.sex ( Male ) , client.first ( Gunner ) , client.client_id , client.last ( Fuller ) , client.middle ( Malek , Omer ) | events : events.client_id , events.sub-issue , events.complaint id , events.issue , events.product | callcenterlogs : callcenterlogs.complaint id , callcenterlogs.rand client , callcenterlogs.call_id , callcenterlogs.priority , callcenterlogs.type | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "client.sex",
      "client.first",
      "client.client_id",
      "client.last",
      "client.middle",
      "client.*",
      "events.client_id",
      "events.sub-issue",
      "events.complaint id",
      "events.issue",
      "events.product",
      "events.*",
      "callcenterlogs.complaint id",
      "callcenterlogs.rand client",
      "callcenterlogs.call_id",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "Which product received a review from Indianapolis on 2016/10/7? Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04';",
    "input_sequence": "Which product received a review from Indianapolis on 2016/10/7? Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04'; | reviews : reviews.district_id , reviews.date ( 2013-04-04 , 2013-04-20 ) , reviews.product , reviews.reviews , reviews.stars | district : district.city ( Indianapolis ) , district.district_id , district.state_abbrev , district.division | state : state.state , state.statecode , state.region | client : client.district_id , client.sex , client.day , client.month , client.year | client.district_id = district.district_id | district.state_abbrev = state.statecode | reviews.district_id = district.district_id",
    "output_sequence": " | ",
    "tc_original": [
      "reviews.district_id",
      "reviews.date",
      "reviews.product",
      "reviews.reviews",
      "reviews.stars",
      "reviews.*",
      "district.city",
      "district.district_id",
      "district.state_abbrev",
      "district.division",
      "district.*",
      "state.state",
      "state.statecode",
      "state.region",
      "state.*",
      "client.district_id",
      "client.sex",
      "client.day",
      "client.month",
      "client.year",
      "client.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What is the email id of clients whose calls were hung? email id refers to email; calls were hung refers to outcome = 'Hang';",
    "input_sequence": "What is the email id of clients whose calls were hung? email id refers to email; calls were hung refers to outcome = 'Hang'; | client : client.client_id , client.email , client.sex , client.day , client.month | callcenterlogs : callcenterlogs.outcome ( HANG ) , callcenterlogs.rand client , callcenterlogs.call_id , callcenterlogs.priority , callcenterlogs.type | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | state : state.state , state.region , state.statecode | callcenterlogs.rand client = client.client_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.email",
      "client.sex",
      "client.day",
      "client.month",
      "client.*",
      "callcenterlogs.outcome",
      "callcenterlogs.rand client",
      "callcenterlogs.call_id",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "How many male clients are from the state of Massachusetts? male refers to sex = 'Male';",
    "input_sequence": "How many male clients are from the state of Massachusetts? male refers to sex = 'Male'; | state : state.state ( Massachusetts ) , state.statecode , state.region | client : client.sex ( Male ) , client.state , client.client_id , client.middle ( Malek ) , client.day | district : district.city , district.division , district.district_id , district.state_abbrev | callcenterlogs : callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome , callcenterlogs.server , callcenterlogs.date received | callcenterlogs.rand client = client.client_id | client.district_id = district.district_id | district.state_abbrev = state.statecode",
    "output_sequence": " | ",
    "tc_original": [
      "state.state",
      "state.statecode",
      "state.region",
      "state.*",
      "client.sex",
      "client.state",
      "client.client_id",
      "client.middle",
      "client.day",
      "client.*",
      "district.city",
      "district.division",
      "district.district_id",
      "district.state_abbrev",
      "district.*",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What is the average age of Norwalk clients? average age = AVG(age); Norwalk refers to city = 'Norwalk';",
    "input_sequence": "What is the average age of Norwalk clients? average age = AVG(age); Norwalk refers to city = 'Norwalk'; | client : client.city ( Norwalk ) , client.age , client.district_id , client.client_id , client.sex | district : district.city ( Norwalk ) , district.district_id , district.state_abbrev , district.division | callcenterlogs : callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome , callcenterlogs.server , callcenterlogs.date received | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id | client.district_id = district.district_id | reviews.district_id = district.district_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.city",
      "client.age",
      "client.district_id",
      "client.client_id",
      "client.sex",
      "client.*",
      "district.city",
      "district.district_id",
      "district.state_abbrev",
      "district.division",
      "district.*",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What are the products that people who were born after 2005 complain about? year > 2005;",
    "input_sequence": "What are the products that people who were born after 2005 complain about? year > 2005; | client : client.year , client.client_id , client.age , client.phone , client.sex | events : events.product , events.client_id , events.sub-product , events.complaint id , events.issue | reviews : reviews.product , reviews.date , reviews.stars , reviews.reviews , reviews.district_id | callcenterlogs : callcenterlogs.complaint id , callcenterlogs.rand client , callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "client.year",
      "client.client_id",
      "client.age",
      "client.phone",
      "client.sex",
      "client.*",
      "events.product",
      "events.client_id",
      "events.sub-product",
      "events.complaint id",
      "events.issue",
      "events.*",
      "reviews.product",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.district_id",
      "reviews.*",
      "callcenterlogs.complaint id",
      "callcenterlogs.rand client",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What was the issue that the client with the longest server time faced? longest server time refers to MAX(ser_time);",
    "input_sequence": "What was the issue that the client with the longest server time faced? longest server time refers to MAX(ser_time); | callcenterlogs : callcenterlogs.ser_time , callcenterlogs.rand client , callcenterlogs.complaint id , callcenterlogs.priority , callcenterlogs.type | client : client.client_id , client.first ( Max ) , client.sex , client.day , client.month | events : events.client_id , events.complaint id , events.issue , events.product , events.sub-issue | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "callcenterlogs.ser_time",
      "callcenterlogs.rand client",
      "callcenterlogs.complaint id",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.*",
      "client.client_id",
      "client.first",
      "client.sex",
      "client.day",
      "client.month",
      "client.*",
      "events.client_id",
      "events.complaint id",
      "events.issue",
      "events.product",
      "events.sub-issue",
      "events.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "Please list any two clients with their full names who have been tagged as \"Older American\" by the company without seeking their permission. full names = first, middle, last; without seeking their permission refers to \"Consumer consent provided?\" in (null, 'N/A' or 'empty');",
    "input_sequence": "Please list any two clients with their full names who have been tagged as \"Older American\" by the company without seeking their permission. full names = first, middle, last; without seeking their permission refers to \"Consumer consent provided?\" in (null, 'N/A' or 'empty'); | client : client.client_id , client.age , client.first , client.middle , client.last | events : events.tags ( Older American ) , events.client_id , events.consumer consent provided? ( Consent provided , N/A ) , events.product , events.sub-product | callcenterlogs : callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome , callcenterlogs.server , callcenterlogs.date received | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.age",
      "client.first",
      "client.middle",
      "client.last",
      "client.*",
      "events.tags",
      "events.client_id",
      "events.consumer consent provided?",
      "events.product",
      "events.sub-product",
      "events.*",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "List down the email of client whose complaint is type \"PS\".",
    "input_sequence": "List down the email of client whose complaint is type \"PS\". | client : client.client_id , client.email , client.middle ( Tye ) , client.sex , client.day | callcenterlogs : callcenterlogs.type ( PS ) , callcenterlogs.rand client , callcenterlogs.complaint id , callcenterlogs.priority , callcenterlogs.outcome | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | state : state.state , state.region , state.statecode | callcenterlogs.rand client = client.client_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.email",
      "client.middle",
      "client.sex",
      "client.day",
      "client.*",
      "callcenterlogs.type",
      "callcenterlogs.rand client",
      "callcenterlogs.complaint id",
      "callcenterlogs.priority",
      "callcenterlogs.outcome",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What are the complaint id of client who were born in 1931? in 1931 refers to year = 1931",
    "input_sequence": "What are the complaint id of client who were born in 1931? in 1931 refers to year = 1931 | client : client.year , client.client_id , client.age , client.sex , client.day | events : events.client_id , events.complaint id , events.product , events.issue , events.tags | callcenterlogs : callcenterlogs.complaint id , callcenterlogs.rand client , callcenterlogs.call_id , callcenterlogs.priority , callcenterlogs.type | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "client.year",
      "client.client_id",
      "client.age",
      "client.sex",
      "client.day",
      "client.*",
      "events.client_id",
      "events.complaint id",
      "events.product",
      "events.issue",
      "events.tags",
      "events.*",
      "callcenterlogs.complaint id",
      "callcenterlogs.rand client",
      "callcenterlogs.call_id",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "Write down the call id of clients whose first name start with alphabet \"B\". first name start with alphabet \"B\" refers to first like 'B%'",
    "input_sequence": "Write down the call id of clients whose first name start with alphabet \"B\". first name start with alphabet \"B\" refers to first like 'B%' | client : client.client_id , client.first , client.sex , client.day , client.month | callcenterlogs : callcenterlogs.call_id , callcenterlogs.rand client , callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome | state : state.state , state.region , state.statecode | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs.rand client = client.client_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.client_id",
      "client.first",
      "client.sex",
      "client.day",
      "client.month",
      "client.*",
      "callcenterlogs.call_id",
      "callcenterlogs.rand client",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What is the average age of clients whose complaint type is \"TT\"? average age = avg(age where type = 'TT')",
    "input_sequence": "What is the average age of clients whose complaint type is \"TT\"? average age = avg(age where type = 'TT') | callcenterlogs : callcenterlogs.type ( TT ) , callcenterlogs.rand client , callcenterlogs.complaint id , callcenterlogs.priority , callcenterlogs.outcome | client : client.client_id , client.age , client.middle ( Tye ) , client.sex , client.day | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | state : state.state , state.region , state.statecode | callcenterlogs.rand client = client.client_id",
    "output_sequence": " | ",
    "tc_original": [
      "callcenterlogs.type",
      "callcenterlogs.rand client",
      "callcenterlogs.complaint id",
      "callcenterlogs.priority",
      "callcenterlogs.outcome",
      "callcenterlogs.*",
      "client.client_id",
      "client.age",
      "client.middle",
      "client.sex",
      "client.day",
      "client.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "Write the complaint ID, call ID, and final phone number of complaints through AVIDAN server from 1/1/2014 to 12/30/2014. final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30'",
    "input_sequence": "Write the complaint ID, call ID, and final phone number of complaints through AVIDAN server from 1/1/2014 to 12/30/2014. final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30' | callcenterlogs : callcenterlogs.phonefinal , callcenterlogs.complaint id , callcenterlogs.server ( AVIDAN ) , callcenterlogs.date received ( 2014-01-09 , 2014-12-30 ) , callcenterlogs.call_id | state : state.state , state.region , state.statecode | client : client.sex , client.day , client.month , client.year , client.age | reviews : reviews.stars , reviews.reviews , reviews.product , reviews.date ( 2014-01-02 , 2014-01-13 ) , reviews.district_id | callcenterlogs.rand client = client.client_id",
    "output_sequence": " | ",
    "tc_original": [
      "callcenterlogs.phonefinal",
      "callcenterlogs.complaint id",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.call_id",
      "callcenterlogs.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*",
      "client.sex",
      "client.day",
      "client.month",
      "client.year",
      "client.age",
      "client.*",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.date",
      "reviews.district_id",
      "reviews.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "Give me the full birthdate, email and phone number of the youngest client in Indianapolis . full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis'",
    "input_sequence": "Give me the full birthdate, email and phone number of the youngest client in Indianapolis . full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis' | client : client.age , client.city ( Indianapolis ) , client.email , client.year , client.phone | district : district.city ( Indianapolis ) , district.district_id , district.state_abbrev , district.division | callcenterlogs : callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome , callcenterlogs.server , callcenterlogs.date received | state : state.state , state.region , state.statecode | callcenterlogs.rand client = client.client_id | client.district_id = district.district_id | district.state_abbrev = state.statecode",
    "output_sequence": " | ",
    "tc_original": [
      "client.age",
      "client.city",
      "client.email",
      "client.year",
      "client.phone",
      "client.*",
      "district.city",
      "district.district_id",
      "district.state_abbrev",
      "district.division",
      "district.*",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What is the oldest age of male clients? oldest age refers to max(age); male refers to sex = 'Male'",
    "input_sequence": "What is the oldest age of male clients? oldest age refers to max(age); male refers to sex = 'Male' | client : client.sex ( Male ) , client.age , client.middle ( Malek ) , client.day , client.month | callcenterlogs : callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome , callcenterlogs.server , callcenterlogs.date received | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | state : state.state , state.region , state.statecode | callcenterlogs.rand client = client.client_id",
    "output_sequence": " | ",
    "tc_original": [
      "client.sex",
      "client.age",
      "client.middle",
      "client.day",
      "client.month",
      "client.*",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "What is the average age of clients in South Atlantic? in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age)",
    "input_sequence": "What is the average age of clients in South Atlantic? in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age) | district : district.division ( South Atlantic ) , district.district_id , district.state_abbrev , district.city | client : client.district_id , client.age , client.state , client.client_id , client.sex | state : state.state , state.region ( South ) , state.statecode | callcenterlogs : callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome , callcenterlogs.server , callcenterlogs.date received | callcenterlogs.rand client = client.client_id | client.district_id = district.district_id | district.state_abbrev = state.statecode",
    "output_sequence": " | ",
    "tc_original": [
      "district.division",
      "district.district_id",
      "district.state_abbrev",
      "district.city",
      "district.*",
      "client.district_id",
      "client.age",
      "client.state",
      "client.client_id",
      "client.sex",
      "client.*",
      "state.state",
      "state.region",
      "state.statecode",
      "state.*",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "Which state has the most cities? state refers to state_abbrev; most cities refers to max(count(city))",
    "input_sequence": "Which state has the most cities? state refers to state_abbrev; most cities refers to max(count(city)) | state : state.state , state.statecode , state.region | district : district.state_abbrev , district.city , district.district_id , district.division | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | callcenterlogs : callcenterlogs.priority , callcenterlogs.type , callcenterlogs.outcome , callcenterlogs.server , callcenterlogs.date received | district.state_abbrev = state.statecode | reviews.district_id = district.district_id",
    "output_sequence": " | ",
    "tc_original": [
      "state.state",
      "state.statecode",
      "state.region",
      "state.*",
      "district.state_abbrev",
      "district.city",
      "district.district_id",
      "district.division",
      "district.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.outcome",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.*"
    ]
  },
  {
    "db_id": "retail_complains",
    "question": "List the products involved in the complaints received on March 2017 via TOVA server. on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%'",
    "input_sequence": "List the products involved in the complaints received on March 2017 via TOVA server. on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%' | events : events.date received , events.product , events.complaint id , events.sub-product , events.consumer complaint narrative | callcenterlogs : callcenterlogs.server ( TOVA ) , callcenterlogs.date received , callcenterlogs.complaint id , callcenterlogs.priority , callcenterlogs.type | reviews : reviews.date , reviews.stars , reviews.reviews , reviews.product , reviews.district_id | client : client.sex , client.day , client.month , client.year , client.age | callcenterlogs.rand client = client.client_id | events.client_id = client.client_id | events.complaint id = callcenterlogs.complaint id",
    "output_sequence": " | ",
    "tc_original": [
      "events.date received",
      "events.product",
      "events.complaint id",
      "events.sub-product",
      "events.consumer complaint narrative",
      "events.*",
      "callcenterlogs.server",
      "callcenterlogs.date received",
      "callcenterlogs.complaint id",
      "callcenterlogs.priority",
      "callcenterlogs.type",
      "callcenterlogs.*",
      "reviews.date",
      "reviews.stars",
      "reviews.reviews",
      "reviews.product",
      "reviews.district_id",
      "reviews.*",
      "client.sex",
      "client.day",
      "client.month",
      "client.year",
      "client.age",
      "client.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Please list the names of the production company of the movie \"Four Rooms\". names of the production company refers to movie_company; movie \"Four Rooms\" refers to title = 'Four Rooms'",
    "input_sequence": "Please list the names of the production company of the movie \"Four Rooms\". names of the production company refers to movie_company; movie \"Four Rooms\" refers to title = 'Four Rooms' | movie : movie.title ( Four Rooms ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | production_company : production_company.company_name , production_company.company_id | movie_company : movie_company.company_id , movie_company.movie_id | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "production_company.company_name",
      "production_company.company_id",
      "production_company.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\". names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
    "input_sequence": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\". names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End' | movie : movie.title ( Pirates of the Caribbean: At World's End ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_crew : movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id , movie_crew.job | person : person.person_name , person.person_id | department : department.department_name ( Crew ) , department.department_id | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id | movie_crew.department_id = department.department_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.job",
      "movie_crew.*",
      "person.person_name",
      "person.person_id",
      "person.*",
      "department.department_name",
      "department.department_id",
      "department.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0? director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage",
    "input_sequence": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0? director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage | movie : movie.vote_average , movie.movie_id , movie.vote_count , movie.title , movie.budget | movie_crew : movie_crew.movie_id , movie_crew.person_id , movie_crew.job ( Director , Director of Photography ) , movie_crew.department_id | person : person.person_id , person.person_name ( Dariusz Wolski ) | language_role : language_role.role_id , language_role.language_role | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.vote_average",
      "movie.movie_id",
      "movie.vote_count",
      "movie.title",
      "movie.budget",
      "movie.*",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.job",
      "movie_crew.department_id",
      "movie_crew.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "language_role.role_id",
      "language_role.language_role",
      "language_role.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "For the movie \"Land of the Dead\", who is its director? \"Land of the Dead\" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director'",
    "input_sequence": "For the movie \"Land of the Dead\", who is its director? \"Land of the Dead\" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director' | movie : movie.title , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_crew : movie_crew.movie_id , movie_crew.job ( Director ) , movie_crew.person_id , movie_crew.department_id | person : person.person_name , person.person_id | gender : gender.gender , gender.gender_id | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_crew.movie_id",
      "movie_crew.job",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*",
      "person.person_name",
      "person.person_id",
      "person.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Provide the most used keyword in the movies. most used keyword refers to keyword_name where max(count(keyword_name))",
    "input_sequence": "Provide the most used keyword in the movies. most used keyword refers to keyword_name where max(count(keyword_name)) | keyword : keyword.keyword_name , keyword.keyword_id | movie_keywords : movie_keywords.keyword_id , movie_keywords.movie_id | movie : movie.movie_id , movie.title , movie.budget , movie.homepage , movie.overview | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*",
      "movie_keywords.keyword_id",
      "movie_keywords.movie_id",
      "movie_keywords.*",
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the production company of the movie \"Crazy Heart\"? movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name",
    "input_sequence": "What is the production company of the movie \"Crazy Heart\"? movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name | production_company : production_company.company_name , production_company.company_id | movie : movie.title , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_company : movie_company.company_id , movie_company.movie_id | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "production_company.company_name",
      "production_company.company_id",
      "production_company.*",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the title of the first crime movie ever released? first crime movie ever released refers to min(release_date) and genre_name = 'Crime'",
    "input_sequence": "What is the title of the first crime movie ever released? first crime movie ever released refers to min(release_date) and genre_name = 'Crime' | genre : genre.genre_name ( Crime ) , genre.genre_id | movie : movie.release_date , movie.title , movie.movie_id , movie.movie_status ( Released ) , movie.budget | movie_genres : movie_genres.genre_id , movie_genres.movie_id | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_genres.movie_id = movie.movie_id | movie_genres.genre_id = genre.genre_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "genre.genre_name",
      "genre.genre_id",
      "genre.*",
      "movie.release_date",
      "movie.title",
      "movie.movie_id",
      "movie.movie_status",
      "movie.budget",
      "movie.*",
      "movie_genres.genre_id",
      "movie_genres.movie_id",
      "movie_genres.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "List the person IDs of the second film editors in Movie No. 12. second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12",
    "input_sequence": "List the person IDs of the second film editors in Movie No. 12. second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12 | movie_crew : movie_crew.person_id , movie_crew.job ( Editor , Second Film Editor ) , movie_crew.movie_id , movie_crew.department_id | person : person.person_id , person.person_name | gender : gender.gender , gender.gender_id | movie : movie.title , movie.budget , movie.homepage , movie.overview , movie.popularity | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie_crew.person_id",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.department_id",
      "movie_crew.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.popularity",
      "movie.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Tally the movie ID and character name in the movie starring Jim Carrey.",
    "input_sequence": "Tally the movie ID and character name in the movie starring Jim Carrey. | movie_cast : movie_cast.character_name , movie_cast.movie_id , movie_cast.person_id , movie_cast.gender_id , movie_cast.cast_order | person : person.person_id , person.person_name ( Jim Carrey ) | movie : movie.movie_id , movie.title , movie.budget , movie.homepage , movie.overview | movie_crew : movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id , movie_crew.job ( Characters ) | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id | movie_cast.person_id = person.person_id | movie_cast.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie_cast.character_name",
      "movie_cast.movie_id",
      "movie_cast.person_id",
      "movie_cast.gender_id",
      "movie_cast.cast_order",
      "movie_cast.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.job",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Write me the titles of the movies starring Jim Carrey. Jim Carrey is the person_name;",
    "input_sequence": "Write me the titles of the movies starring Jim Carrey. Jim Carrey is the person_name; | movie : movie.title , movie.movie_id , movie.budget , movie.homepage , movie.overview | person : person.person_name ( Jim Carrey ) , person.person_id | movie_cast : movie_cast.person_id , movie_cast.movie_id , movie_cast.gender_id , movie_cast.character_name , movie_cast.cast_order | movie_crew : movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id , movie_crew.job ( Writer ) | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id | movie_cast.person_id = person.person_id | movie_cast.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "person.person_name",
      "person.person_id",
      "person.*",
      "movie_cast.person_id",
      "movie_cast.movie_id",
      "movie_cast.gender_id",
      "movie_cast.character_name",
      "movie_cast.cast_order",
      "movie_cast.*",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.job",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Write the titles of horror films with a vote average of more than 7. horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7",
    "input_sequence": "Write the titles of horror films with a vote average of more than 7. horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7 | movie : movie.vote_average , movie.title , movie.movie_id , movie.budget , movie.homepage | genre : genre.genre_name ( Horror ) , genre.genre_id | movie_genres : movie_genres.genre_id , movie_genres.movie_id | gender : gender.gender , gender.gender_id | movie_genres.movie_id = movie.movie_id | movie_genres.genre_id = genre.genre_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.vote_average",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "genre.genre_name",
      "genre.genre_id",
      "genre.*",
      "movie_genres.genre_id",
      "movie_genres.movie_id",
      "movie_genres.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "List the title of movies in Latin released between 1/01/1990 and 12/31/1995. movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'",
    "input_sequence": "List the title of movies in Latin released between 1/01/1990 and 12/31/1995. movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31' | movie : movie.movie_id , movie.title , movie.release_date ( 1995-12-13 ) , movie.budget , movie.homepage | movie_languages : movie_languages.movie_id , movie_languages.language_id , movie_languages.language_role_id | language : language.language_id , language.language_name ( Latin ) , language.language_code | movie_keywords : movie_keywords.movie_id , movie_keywords.keyword_id | movie_languages.movie_id = movie.movie_id | movie_languages.language_id = language.language_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.movie_id",
      "movie.title",
      "movie.release_date",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "movie_languages.movie_id",
      "movie_languages.language_id",
      "movie_languages.language_role_id",
      "movie_languages.*",
      "language.language_id",
      "language.language_name",
      "language.language_code",
      "language.*",
      "movie_keywords.movie_id",
      "movie_keywords.keyword_id",
      "movie_keywords.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the average revenue of American movies in 2006? American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)",
    "input_sequence": "What is the average revenue of American movies in 2006? American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue) | movie : movie.revenue , movie.release_date , movie.title , movie.budget , movie.homepage | country : country.country_name ( United States of America ) , country.country_id , country.country_iso_code | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | gender : gender.gender , gender.gender_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.revenue",
      "movie.release_date",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "country.country_name",
      "country.country_id",
      "country.country_iso_code",
      "country.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the percentage of romance films among films produced in India in 2015? romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage",
    "input_sequence": "What is the percentage of romance films among films produced in India in 2015? romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage | country : country.country_id , country.country_name ( India ) , country.country_iso_code | production_country : production_country.country_id , production_country.movie_id | genre : genre.genre_name ( Romance ) , genre.genre_id | movie_genres : movie_genres.genre_id , movie_genres.movie_id | movie_genres.genre_id = genre.genre_id | production_country.country_id = country.country_id",
    "output_sequence": " | ",
    "tc_original": [
      "country.country_id",
      "country.country_name",
      "country.country_iso_code",
      "country.*",
      "production_country.country_id",
      "production_country.movie_id",
      "production_country.*",
      "genre.genre_name",
      "genre.genre_id",
      "genre.*",
      "movie_genres.genre_id",
      "movie_genres.movie_id",
      "movie_genres.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "List all companies who worked in the movie 'Ultramarines: A Warhammer 40,000 Movie.' all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie'",
    "input_sequence": "List all companies who worked in the movie 'Ultramarines: A Warhammer 40,000 Movie.' all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie' | movie_company : movie_company.company_id , movie_company.movie_id | movie_crew : movie_crew.movie_id , movie_crew.person_id , movie_crew.job , movie_crew.department_id | movie : movie.movie_id , movie.title , movie.budget , movie.homepage , movie.overview | production_company : production_company.company_name , production_company.company_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.job",
      "movie_crew.department_id",
      "movie_crew.*",
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "production_company.company_name",
      "production_company.company_id",
      "production_company.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "List 10 movie titles that were produced in France. France refers to country_name = 'France'",
    "input_sequence": "List 10 movie titles that were produced in France. France refers to country_name = 'France' | country : country.country_id , country.country_name ( France ) , country.country_iso_code | production_country : production_country.country_id , production_country.movie_id | movie : movie.title , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_company : movie_company.company_id , movie_company.movie_id | production_country.movie_id = movie.movie_id | production_country.country_id = country.country_id",
    "output_sequence": " | ",
    "tc_original": [
      "country.country_id",
      "country.country_name",
      "country.country_iso_code",
      "country.*",
      "production_country.country_id",
      "production_country.movie_id",
      "production_country.*",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Who is the director for the movie 'Transformers?' the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers'",
    "input_sequence": "Who is the director for the movie 'Transformers?' the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers' | movie : movie.title ( Transformers ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_crew : movie_crew.movie_id , movie_crew.job ( Director ) , movie_crew.person_id , movie_crew.department_id | person : person.person_id , person.person_name | gender : gender.gender , gender.gender_id | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_crew.movie_id",
      "movie_crew.job",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "State the genre of the movie title with a runtime of only 14 minutes. genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14",
    "input_sequence": "State the genre of the movie title with a runtime of only 14 minutes. genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14 | movie_genres : movie_genres.movie_id , movie_genres.genre_id | movie : movie.runtime , movie.title , movie.movie_id , movie.budget , movie.homepage | genre : genre.genre_name , genre.genre_id | gender : gender.gender , gender.gender_id | movie_genres.movie_id = movie.movie_id | movie_genres.genre_id = genre.genre_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie_genres.movie_id",
      "movie_genres.genre_id",
      "movie_genres.*",
      "movie.runtime",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "genre.genre_name",
      "genre.genre_id",
      "genre.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "List down the movie titles that were produced in Canada. produced in Canada refers to country_name = 'Canada'",
    "input_sequence": "List down the movie titles that were produced in Canada. produced in Canada refers to country_name = 'Canada' | country : country.country_name ( Canada ) , country.country_id , country.country_iso_code | production_country : production_country.country_id , production_country.movie_id | movie : movie.title , movie.movie_id , movie.budget , movie.homepage , movie.overview | production_company : production_company.company_id , production_company.company_name | production_country.movie_id = movie.movie_id | production_country.country_id = country.country_id",
    "output_sequence": " | ",
    "tc_original": [
      "country.country_name",
      "country.country_id",
      "country.country_iso_code",
      "country.*",
      "production_country.country_id",
      "production_country.movie_id",
      "production_country.*",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "production_company.company_id",
      "production_company.company_name",
      "production_company.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Accumulate the budget of the movie titles with the keyword of \"video game\". keyword of \"video game\" refers to keyword_name = 'video game'",
    "input_sequence": "Accumulate the budget of the movie titles with the keyword of \"video game\". keyword of \"video game\" refers to keyword_name = 'video game' | keyword : keyword.keyword_name ( video game ) , keyword.keyword_id | movie : movie.budget , movie.title , movie.movie_id , movie.homepage , movie.overview | movie_keywords : movie_keywords.movie_id , movie_keywords.keyword_id | gender : gender.gender , gender.gender_id",
    "output_sequence": " | ",
    "tc_original": [
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*",
      "movie.budget",
      "movie.title",
      "movie.movie_id",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_keywords.movie_id",
      "movie_keywords.keyword_id",
      "movie_keywords.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the ID of the production company which produced the movie \"Gladiator\"? ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator'",
    "input_sequence": "What is the ID of the production company which produced the movie \"Gladiator\"? ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator' | movie : movie.title ( Gladiator ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_company : movie_company.company_id , movie_company.movie_id | production_company : production_company.company_id , production_company.company_name | keyword : keyword.keyword_name ( gladiator ) , keyword.keyword_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "production_company.company_id",
      "production_company.company_name",
      "production_company.*",
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "List down the movies produced by Lucasfilm. movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm'",
    "input_sequence": "List down the movies produced by Lucasfilm. movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm' | production_company : production_company.company_name ( Lucasfilm ) , production_company.company_id | movie : movie.title , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_company : movie_company.company_id , movie_company.movie_id | movie_crew : movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id , movie_crew.job ( Producer ) | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "production_company.company_name",
      "production_company.company_id",
      "production_company.*",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.job",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Among Warner Bros. Pictures' movies, which title made the highest revenue? Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue)",
    "input_sequence": "Among Warner Bros. Pictures' movies, which title made the highest revenue? Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue) | movie : movie.title , movie.revenue , movie.movie_id , movie.budget , movie.homepage | production_company : production_company.company_name ( Warner Bros. Pictures ) , production_company.company_id | movie_company : movie_company.company_id , movie_company.movie_id | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.revenue",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "production_company.company_name",
      "production_company.company_id",
      "production_company.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Tell the language of the movie \"C'era una volta il West\". language refers to language_name; movie \"C'era una volta il West\" refers to title = 'C''era una volta il West'",
    "input_sequence": "Tell the language of the movie \"C'era una volta il West\". language refers to language_name; movie \"C'era una volta il West\" refers to title = 'C''era una volta il West' | movie_languages : movie_languages.language_id , movie_languages.movie_id , movie_languages.language_role_id | movie : movie.title ( C'era una volta il West ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | language : language.language_name , language.language_id , language.language_code | gender : gender.gender , gender.gender_id | movie_languages.movie_id = movie.movie_id | movie_languages.language_id = language.language_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie_languages.language_id",
      "movie_languages.movie_id",
      "movie_languages.language_role_id",
      "movie_languages.*",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "language.language_name",
      "language.language_id",
      "language.language_code",
      "language.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Work out the difference in revenues made between the English and Latin movies. English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin')",
    "input_sequence": "Work out the difference in revenues made between the English and Latin movies. English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin') | movie : movie.revenue , movie.movie_id , movie.title , movie.budget , movie.homepage | language : language.language_name ( English , Latin ) , language.language_id , language.language_code | movie_languages : movie_languages.language_id , movie_languages.movie_id , movie_languages.language_role_id | gender : gender.gender , gender.gender_id | movie_languages.movie_id = movie.movie_id | movie_languages.language_id = language.language_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.revenue",
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "language.language_name",
      "language.language_id",
      "language.language_code",
      "language.*",
      "movie_languages.language_id",
      "movie_languages.movie_id",
      "movie_languages.language_role_id",
      "movie_languages.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the average revenue made by Latin movies? Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)",
    "input_sequence": "What is the average revenue made by Latin movies? Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue) | language : language.language_name ( Latin ) , language.language_id , language.language_code | movie : movie.revenue , movie.movie_id , movie.title , movie.budget , movie.homepage | movie_languages : movie_languages.language_id , movie_languages.movie_id , movie_languages.language_role_id | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_languages.movie_id = movie.movie_id | movie_languages.language_id = language.language_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "language.language_name",
      "language.language_id",
      "language.language_code",
      "language.*",
      "movie.revenue",
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "movie_languages.language_id",
      "movie_languages.movie_id",
      "movie_languages.language_role_id",
      "movie_languages.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "How many movies were produced by \"Eddie Murphy Productions\"? produced by \"Eddie Murphy Productions\" refers to company_name = 'Eddie Murphy Productions'",
    "input_sequence": "How many movies were produced by \"Eddie Murphy Productions\"? produced by \"Eddie Murphy Productions\" refers to company_name = 'Eddie Murphy Productions' | production_company : production_company.company_name ( Eddie Murphy Productions ) , production_company.company_id | movie_company : movie_company.company_id , movie_company.movie_id | person : person.person_name ( Eddie Murphy ) , person.person_id | movie : movie.movie_id , movie.title , movie.budget , movie.homepage , movie.overview",
    "output_sequence": " | ",
    "tc_original": [
      "production_company.company_name",
      "production_company.company_id",
      "production_company.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "person.person_name",
      "person.person_id",
      "person.*",
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "List all the actors who have played characters with \"captain\" in their names. List all the actors refers to person_name; characters with \"captain\" in their names refers to character_name LIKE '%captain%';",
    "input_sequence": "List all the actors who have played characters with \"captain\" in their names. List all the actors refers to person_name; characters with \"captain\" in their names refers to character_name LIKE '%captain%'; | movie_cast : movie_cast.person_id , movie_cast.character_name , movie_cast.movie_id , movie_cast.gender_id , movie_cast.cast_order | person : person.person_id , person.person_name | keyword : keyword.keyword_name ( captain ) , keyword.keyword_id | gender : gender.gender , gender.gender_id | movie_cast.person_id = person.person_id | movie_cast.gender_id = gender.gender_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie_cast.person_id",
      "movie_cast.character_name",
      "movie_cast.movie_id",
      "movie_cast.gender_id",
      "movie_cast.cast_order",
      "movie_cast.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the most common keyword among all the movies released in 2006? most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%'",
    "input_sequence": "What is the most common keyword among all the movies released in 2006? most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%' | movie : movie.release_date , movie.movie_id , movie.movie_status ( Released ) , movie.title , movie.budget | movie_keywords : movie_keywords.keyword_id , movie_keywords.movie_id | keyword : keyword.keyword_name , keyword.keyword_id | movie_company : movie_company.movie_id , movie_company.company_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.release_date",
      "movie.movie_id",
      "movie.movie_status",
      "movie.title",
      "movie.budget",
      "movie.*",
      "movie_keywords.keyword_id",
      "movie_keywords.movie_id",
      "movie_keywords.*",
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*",
      "movie_company.movie_id",
      "movie_company.company_id",
      "movie_company.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the third least common genre? least common genre refers to min(count(genre_name))",
    "input_sequence": "What is the third least common genre? least common genre refers to min(count(genre_name)) | genre : genre.genre_name , genre.genre_id | movie_genres : movie_genres.genre_id , movie_genres.movie_id | movie : movie.title , movie.budget , movie.homepage , movie.overview , movie.popularity | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_genres.movie_id = movie.movie_id | movie_genres.genre_id = genre.genre_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "genre.genre_name",
      "genre.genre_id",
      "genre.*",
      "movie_genres.genre_id",
      "movie_genres.movie_id",
      "movie_genres.*",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.popularity",
      "movie.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Provide the average revenue of all the French movies. French movies refers to country_name = 'France'; average revenue = AVG(revenue)",
    "input_sequence": "Provide the average revenue of all the French movies. French movies refers to country_name = 'France'; average revenue = AVG(revenue) | movie : movie.revenue , movie.movie_id , movie.title , movie.budget , movie.homepage | country : country.country_name ( France ) , country.country_id , country.country_iso_code | keyword : keyword.keyword_name ( france ) , keyword.keyword_id | language : language.language_id , language.language_code , language.language_name",
    "output_sequence": " | ",
    "tc_original": [
      "movie.revenue",
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.*",
      "country.country_name",
      "country.country_id",
      "country.country_iso_code",
      "country.*",
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*",
      "language.language_id",
      "language.language_code",
      "language.language_name",
      "language.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Which department has the most people? department refers to department_name; most people refers to max(count(department_id))",
    "input_sequence": "Which department has the most people? department refers to department_name; most people refers to max(count(department_id)) | department : department.department_name , department.department_id | person : person.person_id , person.person_name | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie : movie.title , movie.budget , movie.homepage , movie.overview , movie.popularity | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id | movie_crew.department_id = department.department_id",
    "output_sequence": " | ",
    "tc_original": [
      "department.department_name",
      "department.department_id",
      "department.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.popularity",
      "movie.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What is the original language of the \"Four Rooms\" movie? language refers to language_name; original language refers to language_role = 'Original'; \"Four Rooms\" refers to title = 'Four Rooms'",
    "input_sequence": "What is the original language of the \"Four Rooms\" movie? language refers to language_name; original language refers to language_role = 'Original'; \"Four Rooms\" refers to title = 'Four Rooms' | movie : movie.title ( Four Rooms ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_languages : movie_languages.language_id , movie_languages.movie_id , movie_languages.language_role_id | language : language.language_name , language.language_id , language.language_code | language_role : language_role.language_role ( Original ) , language_role.role_id | movie_languages.language_role_id = language_role.role_id | movie_languages.movie_id = movie.movie_id | movie_languages.language_id = language.language_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_languages.language_id",
      "movie_languages.movie_id",
      "movie_languages.language_role_id",
      "movie_languages.*",
      "language.language_name",
      "language.language_id",
      "language.language_code",
      "language.*",
      "language_role.language_role",
      "language_role.role_id",
      "language_role.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Who is the main actor in the \"Pirates of the Caribbean: At World's End\" movie? main actor refers to person_name where Min(cast_order); \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
    "input_sequence": "Who is the main actor in the \"Pirates of the Caribbean: At World's End\" movie? main actor refers to person_name where Min(cast_order); \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End' | movie : movie.title ( Pirates of the Caribbean: At World's End ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | movie_cast : movie_cast.movie_id , movie_cast.cast_order , movie_cast.person_id , movie_cast.gender_id , movie_cast.character_name | person : person.person_id , person.person_name | gender : gender.gender , gender.gender_id | movie_cast.person_id = person.person_id | movie_cast.movie_id = movie.movie_id | movie_cast.gender_id = gender.gender_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_cast.movie_id",
      "movie_cast.cast_order",
      "movie_cast.person_id",
      "movie_cast.gender_id",
      "movie_cast.character_name",
      "movie_cast.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "gender.gender",
      "gender.gender_id",
      "gender.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Provide the names and departments of the person who worked as a music editor in the \"Pirates of the Caribbean: At World's End\" movie. names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
    "input_sequence": "Provide the names and departments of the person who worked as a music editor in the \"Pirates of the Caribbean: At World's End\" movie. names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End' | movie : movie.movie_id , movie.title ( Pirates of the Caribbean: At World's End ) , movie.budget , movie.homepage , movie.overview | movie_crew : movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id , movie_crew.job ( Editor , Music Editor ) | person : person.person_id , person.person_name | department : department.department_name , department.department_id | movie_crew.person_id = person.person_id | movie_crew.movie_id = movie.movie_id | movie_crew.department_id = department.department_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.movie_id",
      "movie.title",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.job",
      "movie_crew.*",
      "person.person_id",
      "person.person_name",
      "person.*",
      "department.department_name",
      "department.department_id",
      "department.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Provide the production companies of the movie that has over 35% average running time per movie in 2016. production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35",
    "input_sequence": "Provide the production companies of the movie that has over 35% average running time per movie in 2016. production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35 | movie : movie.movie_id , movie.runtime , movie.release_date , movie.title , movie.budget | movie_company : movie_company.company_id , movie_company.movie_id | production_company : production_company.company_name , production_company.company_id | keyword : keyword.keyword_id , keyword.keyword_name ( running ) ",
    "output_sequence": " | ",
    "tc_original": [
      "movie.movie_id",
      "movie.runtime",
      "movie.release_date",
      "movie.title",
      "movie.budget",
      "movie.*",
      "movie_company.company_id",
      "movie_company.movie_id",
      "movie_company.*",
      "production_company.company_name",
      "production_company.company_id",
      "production_company.*",
      "keyword.keyword_id",
      "keyword.keyword_name",
      "keyword.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "Which genre does the movie Dancer in the Dark belong to? genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark'",
    "input_sequence": "Which genre does the movie Dancer in the Dark belong to? genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark' | movie_genres : movie_genres.genre_id , movie_genres.movie_id | movie : movie.title ( Dancer in the Dark ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | genre : genre.genre_name , genre.genre_id | keyword : keyword.keyword_name ( dancer ) , keyword.keyword_id | movie_genres.movie_id = movie.movie_id | movie_genres.genre_id = genre.genre_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie_genres.genre_id",
      "movie_genres.movie_id",
      "movie_genres.*",
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "genre.genre_name",
      "genre.genre_id",
      "genre.*",
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "How many adventure movies are there that were released in 2000? adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%'",
    "input_sequence": "How many adventure movies are there that were released in 2000? adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%' | movie : movie.release_date , movie.movie_id , movie.movie_status ( Released ) , movie.title , movie.budget | genre : genre.genre_name ( Adventure ) , genre.genre_id | movie_genres : movie_genres.genre_id , movie_genres.movie_id | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_genres.movie_id = movie.movie_id | movie_genres.genre_id = genre.genre_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.release_date",
      "movie.movie_id",
      "movie.movie_status",
      "movie.title",
      "movie.budget",
      "movie.*",
      "genre.genre_name",
      "genre.genre_id",
      "genre.*",
      "movie_genres.genre_id",
      "movie_genres.movie_id",
      "movie_genres.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "movies_4",
    "question": "What keyword can the user use to search for the movie Finding Nemo? What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'",
    "input_sequence": "What keyword can the user use to search for the movie Finding Nemo? What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo' | movie : movie.title ( Finding Nemo ) , movie.movie_id , movie.budget , movie.homepage , movie.overview | keyword : keyword.keyword_name , keyword.keyword_id | movie_keywords : movie_keywords.movie_id , movie_keywords.keyword_id | movie_crew : movie_crew.job , movie_crew.movie_id , movie_crew.person_id , movie_crew.department_id | movie_crew.movie_id = movie.movie_id",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movie_id",
      "movie.budget",
      "movie.homepage",
      "movie.overview",
      "movie.*",
      "keyword.keyword_name",
      "keyword.keyword_id",
      "keyword.*",
      "movie_keywords.movie_id",
      "movie_keywords.keyword_id",
      "movie_keywords.*",
      "movie_crew.job",
      "movie_crew.movie_id",
      "movie_crew.person_id",
      "movie_crew.department_id",
      "movie_crew.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "How many solution paths are there inside the 2nd most popular repository? more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);",
    "input_sequence": "How many solution paths are there inside the 2nd most popular repository? more watchers mean that this repository is more popular; most popular repository refers to max(Watchers); | repo : repo.watchers , repo.id , repo.url , repo.stars , repo.forks | solution : solution.repoid , solution.path , solution.id , solution.processedtime , solution.wascompiled | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( max , mean ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "repo.watchers",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.forks",
      "repo.*",
      "solution.repoid",
      "solution.path",
      "solution.id",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"? average processed time = avg(Solution.ProcessedTime);",
    "input_sequence": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"? average processed time = avg(Solution.ProcessedTime); | solution : solution.processedtime , solution.path , solution.repoid , solution.id , solution.wascompiled | repo : repo.id , repo.url , repo.stars , repo.forks , repo.processedtime | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( time ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "solution.processedtime",
      "solution.path",
      "solution.repoid",
      "solution.id",
      "solution.wascompiled",
      "solution.*",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.forks",
      "repo.processedtime",
      "repo.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"? needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository",
    "input_sequence": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"? needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository | solution : solution.repoid , solution.path , solution.wascompiled , solution.id , solution.processedtime | repo : repo.url ( https://github.com/jeffdik/tachy.git ) , repo.id , repo.stars , repo.forks , repo.watchers | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( url , user ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "solution.repoid",
      "solution.path",
      "solution.wascompiled",
      "solution.id",
      "solution.processedtime",
      "solution.*",
      "repo.url",
      "repo.id",
      "repo.stars",
      "repo.forks",
      "repo.watchers",
      "repo.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "What is the github address of the repository that contains files used by solution ID12? github address refers to Url;",
    "input_sequence": "What is the github address of the repository that contains files used by solution ID12? github address refers to Url; | repo : repo.url , repo.id , repo.stars , repo.forks , repo.watchers | solution : solution.repoid , solution.id , solution.path , solution.processedtime , solution.wascompiled | method : method.id , method.name , method.summary , method.solutionid , method.lang | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( address ) ",
    "output_sequence": " | ",
    "tc_original": [
      "repo.url",
      "repo.id",
      "repo.stars",
      "repo.forks",
      "repo.watchers",
      "repo.*",
      "solution.repoid",
      "solution.id",
      "solution.path",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.solutionid",
      "method.lang",
      "method.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd? average time = avg(ProcessedTime)；",
    "input_sequence": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd? average time = avg(ProcessedTime)； | solution : solution.processedtime , solution.repoid , solution.id , solution.path , solution.wascompiled | repo : repo.url ( https://github.com/jeffdik/tachy.git ) , repo.processedtime , repo.id , repo.stars , repo.forks | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( time , url ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "solution.processedtime",
      "solution.repoid",
      "solution.id",
      "solution.path",
      "solution.wascompiled",
      "solution.*",
      "repo.url",
      "repo.processedtime",
      "repo.id",
      "repo.stars",
      "repo.forks",
      "repo.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19? followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%",
    "input_sequence": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19? followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100% | solution : solution.repoid , solution.id , solution.path , solution.processedtime , solution.wascompiled | repo : repo.id , repo.forks , repo.url , repo.stars , repo.watchers | methodparameter : methodparameter.id , methodparameter.methodid , methodparameter.type , methodparameter.name ( percentage ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "solution.repoid",
      "solution.id",
      "solution.path",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "repo.id",
      "repo.forks",
      "repo.url",
      "repo.stars",
      "repo.watchers",
      "repo.*",
      "methodparameter.id",
      "methodparameter.methodid",
      "methodparameter.type",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "Give the number of watchers that the repository of the solution No. 338082 have. number of watchers refers to Watchers; solution number refers to Solution.Id;",
    "input_sequence": "Give the number of watchers that the repository of the solution No. 338082 have. number of watchers refers to Watchers; solution number refers to Solution.Id; | repo : repo.watchers , repo.id , repo.url , repo.stars , repo.forks | solution : solution.repoid , solution.id , solution.path , solution.processedtime , solution.wascompiled | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( number ) | method : method.id , method.name , method.summary , method.fullcomment , method.apicalls",
    "output_sequence": " | ",
    "tc_original": [
      "repo.watchers",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.forks",
      "repo.*",
      "solution.repoid",
      "solution.id",
      "solution.path",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.fullcomment",
      "method.apicalls",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain? repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;",
    "input_sequence": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain? repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0; | repo : repo.stars , repo.id , repo.url , repo.forks , repo.watchers | solution : solution.repoid , solution.wascompiled , solution.id , solution.path , solution.processedtime | methodparameter : methodparameter.id , methodparameter.type , methodparameter.name , methodparameter.methodid | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "repo.stars",
      "repo.id",
      "repo.url",
      "repo.forks",
      "repo.watchers",
      "repo.*",
      "solution.repoid",
      "solution.wascompiled",
      "solution.id",
      "solution.path",
      "solution.processedtime",
      "solution.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.name",
      "methodparameter.methodid",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"? solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';",
    "input_sequence": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"? solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git'; | solution : solution.id , solution.repoid , solution.path , solution.processedtime , solution.wascompiled | repo : repo.id , repo.url ( https://github.com/derickbailey/presentations-and-training.git ) , repo.stars , repo.forks , repo.watchers | method : method.solutionid , method.id , method.name , method.summary , method.lang | methodparameter : methodparameter.id , methodparameter.type , methodparameter.name , methodparameter.methodid",
    "output_sequence": " | ",
    "tc_original": [
      "solution.id",
      "solution.repoid",
      "solution.path",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.forks",
      "repo.watchers",
      "repo.*",
      "method.solutionid",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.name",
      "methodparameter.methodid",
      "methodparameter.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "What is the total processed time of all solutions from the repository with the most forks? total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));",
    "input_sequence": "What is the total processed time of all solutions from the repository with the most forks? total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks)); | solution : solution.processedtime , solution.repoid , solution.id , solution.path , solution.wascompiled | repo : repo.forks , repo.processedtime , repo.id , repo.url , repo.stars | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( count , max ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "solution.processedtime",
      "solution.repoid",
      "solution.id",
      "solution.path",
      "solution.wascompiled",
      "solution.*",
      "repo.forks",
      "repo.processedtime",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "What is the percentage of Forks to Stars of repository for solution \"104086\"? solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);",
    "input_sequence": "What is the percentage of Forks to Stars of repository for solution \"104086\"? solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100); | repo : repo.forks , repo.stars , repo.id , repo.url , repo.watchers | solution : solution.repoid , solution.id , solution.path , solution.processedtime , solution.wascompiled | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( percentage ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "repo.forks",
      "repo.stars",
      "repo.id",
      "repo.url",
      "repo.watchers",
      "repo.*",
      "solution.repoid",
      "solution.id",
      "solution.path",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "Please provide the solution id of the respository among the respository that receive 238 forks. solution id of the repository refers to solution.Id;",
    "input_sequence": "Please provide the solution id of the respository among the respository that receive 238 forks. solution id of the repository refers to solution.Id; | repo : repo.forks , repo.id , repo.url , repo.stars , repo.watchers | solution : solution.repoid , solution.id , solution.path , solution.processedtime , solution.wascompiled | methodparameter : methodparameter.id , methodparameter.type , methodparameter.name , methodparameter.methodid | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "repo.forks",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.watchers",
      "repo.*",
      "solution.repoid",
      "solution.id",
      "solution.path",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.name",
      "methodparameter.methodid",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "Please state the API calls for method number 10 and its intended course of action. method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;",
    "input_sequence": "Please state the API calls for method number 10 and its intended course of action. method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path; | method : method.apicalls , method.id , method.name , method.summary , method.lang | methodparameter : methodparameter.name ( action , method ) , methodparameter.id , methodparameter.methodid , methodparameter.type | repo : repo.id , repo.url , repo.stars , repo.forks , repo.watchers | solution : solution.id , solution.path , solution.repoid , solution.processedtime , solution.wascompiled",
    "output_sequence": " | ",
    "tc_original": [
      "method.apicalls",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.*",
      "methodparameter.name",
      "methodparameter.id",
      "methodparameter.methodid",
      "methodparameter.type",
      "methodparameter.*",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.forks",
      "repo.watchers",
      "repo.*",
      "solution.id",
      "solution.path",
      "solution.repoid",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*"
    ]
  },
  {
    "db_id": "codebase_comments",
    "question": "How many watchers does the path \"maff_se3ue7\\US7.sln\" have?",
    "input_sequence": "How many watchers does the path \"maff_se3ue7\\US7.sln\" have? | repo : repo.watchers , repo.id , repo.url , repo.stars , repo.forks | solution : solution.path ( maff_se3ue7\\US7.sln ) , solution.repoid , solution.id , solution.processedtime , solution.wascompiled | methodparameter : methodparameter.id , methodparameter.type , methodparameter.methodid , methodparameter.name ( path ) | method : method.id , method.name , method.summary , method.lang , method.fullcomment",
    "output_sequence": " | ",
    "tc_original": [
      "repo.watchers",
      "repo.id",
      "repo.url",
      "repo.stars",
      "repo.forks",
      "repo.*",
      "solution.path",
      "solution.repoid",
      "solution.id",
      "solution.processedtime",
      "solution.wascompiled",
      "solution.*",
      "methodparameter.id",
      "methodparameter.type",
      "methodparameter.methodid",
      "methodparameter.name",
      "methodparameter.*",
      "method.id",
      "method.name",
      "method.summary",
      "method.lang",
      "method.fullcomment",
      "method.*"
    ]
  },
  {
    "db_id": "trains",
    "question": "Please list the IDs of all the trains that run in the east direction and have less than 4 cars. less than 4 cars refers to carsNum < 4",
    "input_sequence": "Please list the IDs of all the trains that run in the east direction and have less than 4 cars. less than 4 cars refers to carsNum < 4 | trains : trains.direction ( east ) , trains.id | cars : cars.train_id , cars.id , cars.position , cars.shape , cars.len | cars.train_id = trains.id",
    "output_sequence": " | ",
    "tc_original": [
      "trains.direction",
      "trains.id",
      "trains.*",
      "cars.train_id",
      "cars.id",
      "cars.position",
      "cars.shape",
      "cars.len",
      "cars.*"
    ]
  },
  {
    "db_id": "trains",
    "question": "What is the average number of cars on trains that run in the east direction? calculation = DIVIDE(count(id), count(train_id))",
    "input_sequence": "What is the average number of cars on trains that run in the east direction? calculation = DIVIDE(count(id), count(train_id)) | trains : trains.direction ( east ) , trains.id | cars : cars.train_id , cars.id , cars.position , cars.shape , cars.len | cars.train_id = trains.id",
    "output_sequence": " | ",
    "tc_original": [
      "trains.direction",
      "trains.id",
      "trains.*",
      "cars.train_id",
      "cars.id",
      "cars.position",
      "cars.shape",
      "cars.len",
      "cars.*"
    ]
  },
  {
    "db_id": "trains",
    "question": "What are the ids of the train running east? east is a direction",
    "input_sequence": "What are the ids of the train running east? east is a direction | trains : trains.direction ( east ) , trains.id | cars : cars.id , cars.position , cars.shape , cars.len , cars.sides | cars.train_id = trains.id",
    "output_sequence": " | ",
    "tc_original": [
      "trains.direction",
      "trains.id",
      "trains.*",
      "cars.id",
      "cars.position",
      "cars.shape",
      "cars.len",
      "cars.sides",
      "cars.*"
    ]
  },
  {
    "db_id": "trains",
    "question": "Provide the directions for all the trains that have 2 or less cars. 2 or less cars refers to trailPosi < = 2",
    "input_sequence": "Provide the directions for all the trains that have 2 or less cars. 2 or less cars refers to trailPosi < = 2 | trains : trains.id , trains.direction | cars : cars.train_id , cars.position , cars.id , cars.shape , cars.len | cars.train_id = trains.id",
    "output_sequence": " | ",
    "tc_original": [
      "trains.id",
      "trains.direction",
      "trains.*",
      "cars.train_id",
      "cars.position",
      "cars.id",
      "cars.shape",
      "cars.len",
      "cars.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Which actor played the role of Joker in the movie Batman? role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman'",
    "input_sequence": "Which actor played the role of Joker in the movie Batman? role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman' | movie : movie.movieid , movie.title ( Batman ) , movie.budget , movie.gross , movie.genre | characters : characters.movieid , characters.actorid , characters.character name ( Batman , Joker ) , characters.pay , characters.creditorder | actor : actor.actorid , actor.name , actor.biography , actor.gender , actor.ethnicity | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "characters.movieid",
      "characters.actorid",
      "characters.character name",
      "characters.pay",
      "characters.creditorder",
      "characters.*",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Which movie is the character Dr. Archibald 'Moonlight' Graham from? movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham'",
    "input_sequence": "Which movie is the character Dr. Archibald 'Moonlight' Graham from? movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham' | movie : movie.movieid , movie.title , movie.budget , movie.gross , movie.genre | characters : characters.movieid , characters.character name ( Dr. Archibald 'Moonlight' Graham ) , characters.actorid , characters.pay , characters.creditorder | actor : actor.name , actor.biography , actor.gender , actor.ethnicity , actor.actorid | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "characters.movieid",
      "characters.character name",
      "characters.actorid",
      "characters.pay",
      "characters.creditorder",
      "characters.*",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.actorid",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July? played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July'",
    "input_sequence": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July? played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July' | characters : characters.character name , characters.movieid , characters.actorid , characters.pay , characters.creditorder | movie : movie.movieid , movie.title ( Born on the Fourth of July ) , movie.budget , movie.gross , movie.genre | actor : actor.actorid , actor.name ( Tom Cruise ) , actor.biography , actor.gender , actor.ethnicity | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "characters.character name",
      "characters.movieid",
      "characters.actorid",
      "characters.pay",
      "characters.creditorder",
      "characters.*",
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Please list the names of all the characters played by Tom Cruise. played by Tom Cruise refers to name = 'Tom Cruise'",
    "input_sequence": "Please list the names of all the characters played by Tom Cruise. played by Tom Cruise refers to name = 'Tom Cruise' | characters : characters.character name , characters.actorid , characters.pay , characters.movieid , characters.creditorder | actor : actor.name ( Tom Cruise ) , actor.actorid , actor.biography , actor.gender , actor.ethnicity | movie : movie.title , movie.budget , movie.gross , movie.genre , movie.runtime | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "characters.character name",
      "characters.actorid",
      "characters.pay",
      "characters.movieid",
      "characters.creditorder",
      "characters.*",
      "actor.name",
      "actor.actorid",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.runtime",
      "movie.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Among the actors who starred in the movie Batman, which one of them is the tallest? movie Batman refers to title = 'Batman'; tallest refers to max(height_inches)",
    "input_sequence": "Among the actors who starred in the movie Batman, which one of them is the tallest? movie Batman refers to title = 'Batman'; tallest refers to max(height_inches) | movie : movie.title ( Batman ) , movie.movieid , movie.budget , movie.gross , movie.genre | actor : actor.actorid , actor.height (inches) , actor.name , actor.biography , actor.gender | characters : characters.movieid , characters.actorid , characters.character name ( Batman ) , characters.pay , characters.creditorder | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movieid",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "actor.actorid",
      "actor.height (inches)",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.*",
      "characters.movieid",
      "characters.actorid",
      "characters.character name",
      "characters.pay",
      "characters.creditorder",
      "characters.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "What is the MPAA rating for the movie with the character named \"Peter Quill\" in it? MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted",
    "input_sequence": "What is the MPAA rating for the movie with the character named \"Peter Quill\" in it? MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted | characters : characters.character name ( Peter ) , characters.movieid , characters.actorid , characters.pay , characters.creditorder | movie : movie.movieid , movie.rating , movie.mpaa rating ( PG ) , movie.title , movie.budget | actor : actor.name , actor.biography , actor.gender , actor.ethnicity , actor.actorid | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "characters.character name",
      "characters.movieid",
      "characters.actorid",
      "characters.pay",
      "characters.creditorder",
      "characters.*",
      "movie.movieid",
      "movie.rating",
      "movie.mpaa rating",
      "movie.title",
      "movie.budget",
      "movie.*",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.actorid",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Who was the actor that played in the movie \"Batman\" with the longest screentime? movie \"Batman\" refers to Title = 'Batman'; longest screentime refers to max(screentime)",
    "input_sequence": "Who was the actor that played in the movie \"Batman\" with the longest screentime? movie \"Batman\" refers to Title = 'Batman'; longest screentime refers to max(screentime) | movie : movie.title ( Batman ) , movie.movieid , movie.budget , movie.gross , movie.genre | characters : characters.screentime , characters.movieid , characters.actorid , characters.character name ( Batman ) , characters.pay | actor : actor.actorid , actor.name , actor.biography , actor.gender , actor.ethnicity | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movieid",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "characters.screentime",
      "characters.movieid",
      "characters.actorid",
      "characters.character name",
      "characters.pay",
      "characters.*",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Who played the character named \"Chanice Kobolowski\"?",
    "input_sequence": "Who played the character named \"Chanice Kobolowski\"? | characters : characters.character name ( Chanice Kobolowski ) , characters.actorid , characters.pay , characters.movieid , characters.creditorder | actor : actor.actorid , actor.name , actor.biography , actor.gender , actor.ethnicity | movie : movie.title , movie.budget , movie.gross , movie.genre , movie.runtime | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "characters.character name",
      "characters.actorid",
      "characters.pay",
      "characters.movieid",
      "characters.creditorder",
      "characters.*",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.runtime",
      "movie.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "When is the birthday of the actor who played \"Sully\"? birthday refers to Date of Birth; \"Sully\" refers to Character Name = 'Sully'",
    "input_sequence": "When is the birthday of the actor who played \"Sully\"? birthday refers to Date of Birth; \"Sully\" refers to Character Name = 'Sully' | actor : actor.actorid , actor.date of birth , actor.name , actor.biography , actor.gender | characters : characters.character name , characters.actorid , characters.movieid , characters.pay , characters.creditorder | movie : movie.title , movie.budget , movie.gross , movie.genre , movie.runtime | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "actor.actorid",
      "actor.date of birth",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.*",
      "characters.character name",
      "characters.actorid",
      "characters.movieid",
      "characters.pay",
      "characters.creditorder",
      "characters.*",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.runtime",
      "movie.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Give the biography of the actor who played \"Michael Moscovitz\". \"Michael Moscovitz\" refers to Character Name = 'Michael Moscovitz'",
    "input_sequence": "Give the biography of the actor who played \"Michael Moscovitz\". \"Michael Moscovitz\" refers to Character Name = 'Michael Moscovitz' | actor : actor.actorid , actor.biography , actor.name , actor.gender , actor.ethnicity | characters : characters.character name , characters.actorid , characters.movieid , characters.pay , characters.creditorder | movie : movie.budget , movie.gross , movie.genre , movie.runtime , movie.rating | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "actor.actorid",
      "actor.biography",
      "actor.name",
      "actor.gender",
      "actor.ethnicity",
      "actor.*",
      "characters.character name",
      "characters.actorid",
      "characters.movieid",
      "characters.pay",
      "characters.creditorder",
      "characters.*",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.runtime",
      "movie.rating",
      "movie.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "How tall is the actor who played \"Lurch\"? tall refers to Height (Inches); \"Lurch\" refers to Character Name = 'Lurch'",
    "input_sequence": "How tall is the actor who played \"Lurch\"? tall refers to Height (Inches); \"Lurch\" refers to Character Name = 'Lurch' | actor : actor.height (inches) , actor.actorid , actor.name , actor.biography , actor.gender | characters : characters.actorid , characters.character name ( Lurch ) , characters.pay , characters.movieid , characters.creditorder | movie : movie.title , movie.budget , movie.gross , movie.genre , movie.runtime | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "actor.height (inches)",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.*",
      "characters.actorid",
      "characters.character name",
      "characters.pay",
      "characters.movieid",
      "characters.creditorder",
      "characters.*",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.runtime",
      "movie.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Show the No.3 character name in the credit list of the movie \"G.I. Joe: The Rise of Cobra\". No.3 character refers to creditOrder = '3'; movie \"G.I. Joe: The Rise of Cobra\" refers to Title = 'G.I. Joe: The Rise of Cobra'",
    "input_sequence": "Show the No.3 character name in the credit list of the movie \"G.I. Joe: The Rise of Cobra\". No.3 character refers to creditOrder = '3'; movie \"G.I. Joe: The Rise of Cobra\" refers to Title = 'G.I. Joe: The Rise of Cobra' | characters : characters.character name , characters.movieid , characters.creditorder , characters.actorid , characters.pay | movie : movie.movieid , movie.title ( G.I. Joe: The Rise of Cobra ) , movie.budget , movie.gross , movie.genre | actor : actor.name , actor.biography , actor.gender , actor.ethnicity , actor.actorid | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "characters.character name",
      "characters.movieid",
      "characters.creditorder",
      "characters.actorid",
      "characters.pay",
      "characters.*",
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.actorid",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Who played the No.2 character in the credit list of the movie \"American Hustle\"? No.2 character refers to creditOrder = '2'; movie \"American Hustle\" refers to Title = 'American Hustle'",
    "input_sequence": "Who played the No.2 character in the credit list of the movie \"American Hustle\"? No.2 character refers to creditOrder = '2'; movie \"American Hustle\" refers to Title = 'American Hustle' | movie : movie.title ( American Hustle ) , movie.movieid , movie.budget , movie.gross , movie.genre | characters : characters.movieid , characters.creditorder , characters.actorid , characters.character name , characters.pay | actor : actor.actorid , actor.name , actor.biography , actor.gender , actor.ethnicity | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.title",
      "movie.movieid",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "characters.movieid",
      "characters.creditorder",
      "characters.actorid",
      "characters.character name",
      "characters.pay",
      "characters.*",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Who played the No.1 character in the credit list of the movie which was released on \"2015/10/26\"? No.1 character refers to creditOrder = '1'; released on \"2015/10/26\" refers to Release Date = '2015-10-26'",
    "input_sequence": "Who played the No.1 character in the credit list of the movie which was released on \"2015/10/26\"? No.1 character refers to creditOrder = '1'; released on \"2015/10/26\" refers to Release Date = '2015-10-26' | movie : movie.release date ( 2015-10-26 ) , movie.movieid , movie.title , movie.budget , movie.gross | characters : characters.movieid , characters.actorid , characters.creditorder , characters.character name , characters.pay | actor : actor.actorid , actor.name , actor.biography , actor.gender , actor.ethnicity | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.release date",
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.*",
      "characters.movieid",
      "characters.actorid",
      "characters.creditorder",
      "characters.character name",
      "characters.pay",
      "characters.*",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "What is the percentage of the USA actors that showed up in the credit list of movie \"Mrs. Doubtfire\"? USA actors refers to Birth Country = 'USA'; movie \"Mrs. Doubtfire\" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100%",
    "input_sequence": "What is the percentage of the USA actors that showed up in the credit list of movie \"Mrs. Doubtfire\"? USA actors refers to Birth Country = 'USA'; movie \"Mrs. Doubtfire\" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100% | movie : movie.movieid , movie.title ( Mrs. Doubtfire ) , movie.budget , movie.gross , movie.genre | characters : characters.movieid , characters.actorid , characters.creditorder , characters.pay , characters.character name | actor : actor.birth country ( USA ) , actor.actorid , actor.birth city ( USA ) , actor.name , actor.biography | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "characters.movieid",
      "characters.actorid",
      "characters.creditorder",
      "characters.pay",
      "characters.character name",
      "characters.*",
      "actor.birth country",
      "actor.actorid",
      "actor.birth city",
      "actor.name",
      "actor.biography",
      "actor.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "In rated PG movies, how many of them released in June 1990? rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30'",
    "input_sequence": "In rated PG movies, how many of them released in June 1990? rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30' | movie : movie.release date ( 1990-06-01 , 1990-06-08 ) , movie.mpaa rating ( PG ) , movie.rating , movie.rating count , movie.title | actor : actor.name , actor.biography , actor.gender , actor.ethnicity , actor.actorid | characters : characters.pay , characters.movieid , characters.actorid , characters.character name , characters.creditorder | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.release date",
      "movie.mpaa rating",
      "movie.rating",
      "movie.rating count",
      "movie.title",
      "movie.*",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.actorid",
      "actor.*",
      "characters.pay",
      "characters.movieid",
      "characters.actorid",
      "characters.character name",
      "characters.creditorder",
      "characters.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "In romantic movies, how many of them starred by John Travolta? romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta'",
    "input_sequence": "In romantic movies, how many of them starred by John Travolta? romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta' | movie : movie.genre ( Romance ) , movie.movieid , movie.title , movie.budget , movie.gross | actor : actor.name ( John Travolta ) , actor.actorid , actor.biography , actor.gender , actor.ethnicity | characters : characters.movieid , characters.actorid , characters.character name ( John ) , characters.pay , characters.creditorder | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.genre",
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.*",
      "actor.name",
      "actor.actorid",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*",
      "characters.movieid",
      "characters.actorid",
      "characters.character name",
      "characters.pay",
      "characters.creditorder",
      "characters.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Count the male actors born in USA that starred in Ghost. male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost'",
    "input_sequence": "Count the male actors born in USA that starred in Ghost. male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost' | actor : actor.birth country ( USA ) , actor.actorid , actor.gender ( Male ) , actor.birth city ( USA ) , actor.name | movie : movie.movieid , movie.title ( Ghost ) , movie.budget , movie.gross , movie.genre | characters : characters.movieid , characters.actorid , characters.pay , characters.character name , characters.creditorder | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "actor.birth country",
      "actor.actorid",
      "actor.gender",
      "actor.birth city",
      "actor.name",
      "actor.*",
      "movie.movieid",
      "movie.title",
      "movie.budget",
      "movie.gross",
      "movie.genre",
      "movie.*",
      "characters.movieid",
      "characters.actorid",
      "characters.pay",
      "characters.character name",
      "characters.creditorder",
      "characters.*"
    ]
  },
  {
    "db_id": "movie",
    "question": "Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062. actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama'",
    "input_sequence": "Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062. actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama' | movie : movie.movieid , movie.gross , movie.genre ( Drama ) , movie.title , movie.budget | characters : characters.movieid , characters.actorid , characters.character name ( Don Altobello ) , characters.pay , characters.creditorder | actor : actor.actorid , actor.name , actor.biography , actor.gender , actor.ethnicity | characters.movieid = movie.movieid | characters.actorid = actor.actorid",
    "output_sequence": " | ",
    "tc_original": [
      "movie.movieid",
      "movie.gross",
      "movie.genre",
      "movie.title",
      "movie.budget",
      "movie.*",
      "characters.movieid",
      "characters.actorid",
      "characters.character name",
      "characters.pay",
      "characters.creditorder",
      "characters.*",
      "actor.actorid",
      "actor.name",
      "actor.biography",
      "actor.gender",
      "actor.ethnicity",
      "actor.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "How many tweets are seen by more than 1000 unique users? seen by more than 1000 unique users refers to Reach > 1000",
    "input_sequence": "How many tweets are seen by more than 1000 unique users? seen by more than 1000 unique users refers to Reach > 1000 | twitter : twitter.reach , twitter.tweetid , twitter.weekday , twitter.hour , twitter.day | location : location.country , location.state , location.city , location.locationid , location.statecode | user : user.gender , user.userid | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "twitter.reach",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.day",
      "twitter.*",
      "location.country",
      "location.state",
      "location.city",
      "location.locationid",
      "location.statecode",
      "location.*",
      "user.gender",
      "user.userid",
      "user.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "How many tweets in total were posted by a user in Argentina? \"Argentina\" is the Country",
    "input_sequence": "How many tweets in total were posted by a user in Argentina? \"Argentina\" is the Country | location : location.locationid , location.country ( Argentina ) , location.state , location.city , location.statecode | twitter : twitter.locationid , twitter.userid , twitter.tweetid , twitter.weekday , twitter.hour | user : user.userid , user.gender | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "location.locationid",
      "location.country",
      "location.state",
      "location.city",
      "location.statecode",
      "location.*",
      "twitter.locationid",
      "twitter.userid",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.*",
      "user.userid",
      "user.gender",
      "user.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users? seen by the most number of unique users refers to Max(Reach)",
    "input_sequence": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users? seen by the most number of unique users refers to Max(Reach) | twitter : twitter.reach , twitter.userid , twitter.tweetid , twitter.weekday , twitter.hour | user : user.userid , user.gender | location : location.country , location.state , location.city , location.locationid , location.statecode | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "twitter.reach",
      "twitter.userid",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.*",
      "user.userid",
      "user.gender",
      "user.*",
      "location.country",
      "location.state",
      "location.city",
      "location.locationid",
      "location.statecode",
      "location.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "Give the name of the city of the user who tweeted `One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`. \"One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\" is the text",
    "input_sequence": "Give the name of the city of the user who tweeted `One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`. \"One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\" is the text | location : location.locationid , location.city , location.country , location.state , location.statecode | twitter : twitter.locationid , twitter.userid , twitter.tweetid , twitter.text ( aws ) , twitter.weekday | user : user.userid , user.gender | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "location.locationid",
      "location.city",
      "location.country",
      "location.state",
      "location.statecode",
      "location.*",
      "twitter.locationid",
      "twitter.userid",
      "twitter.tweetid",
      "twitter.text",
      "twitter.weekday",
      "twitter.*",
      "user.userid",
      "user.gender",
      "user.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "Which state was the tweet `tw-685681052912873473` from? Give the state code. tw-685681052912873473' is the TweetID",
    "input_sequence": "Which state was the tweet `tw-685681052912873473` from? Give the state code. tw-685681052912873473' is the TweetID | location : location.locationid , location.statecode , location.state , location.country , location.city | twitter : twitter.locationid , twitter.tweetid , twitter.weekday , twitter.hour , twitter.day | user : user.gender , user.userid | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "location.locationid",
      "location.statecode",
      "location.state",
      "location.country",
      "location.city",
      "location.*",
      "twitter.locationid",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.day",
      "twitter.*",
      "user.gender",
      "user.userid",
      "user.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "How many unique users have seen tweet with text `Happy New Year to all those AWS instances of ours!`? \"Happy New Year to all those AWS instances of ours!\" is the text; seen unique users refers to Reach",
    "input_sequence": "How many unique users have seen tweet with text `Happy New Year to all those AWS instances of ours!`? \"Happy New Year to all those AWS instances of ours!\" is the text; seen unique users refers to Reach | twitter : twitter.text ( Happy New Year to all those AWS instances of ours! , aws ) , twitter.userid , twitter.tweetid , twitter.weekday , twitter.hour | user : user.gender , user.userid | location : location.country , location.state , location.city , location.locationid , location.statecode | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "twitter.text",
      "twitter.userid",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.*",
      "user.gender",
      "user.userid",
      "user.*",
      "location.country",
      "location.state",
      "location.city",
      "location.locationid",
      "location.statecode",
      "location.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "List down the text of tweets posted by unknown gender users. unknown gender user refers to Gender = 'Unknown'",
    "input_sequence": "List down the text of tweets posted by unknown gender users. unknown gender user refers to Gender = 'Unknown' | twitter : twitter.text , twitter.userid , twitter.tweetid , twitter.weekday , twitter.hour | user : user.gender ( Unknown ) , user.userid | location : location.country , location.state , location.city , location.locationid , location.statecode | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "twitter.text",
      "twitter.userid",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.*",
      "user.gender",
      "user.userid",
      "user.*",
      "location.country",
      "location.state",
      "location.city",
      "location.locationid",
      "location.statecode",
      "location.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "Calculate the total number of male tweet IDs. \"Male\" is the Gender",
    "input_sequence": "Calculate the total number of male tweet IDs. \"Male\" is the Gender | user : user.userid , user.gender ( Male ) | twitter : twitter.tweetid , twitter.userid , twitter.weekday , twitter.hour , twitter.day | location : location.country , location.state , location.city , location.locationid , location.statecode | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "user.userid",
      "user.gender",
      "user.*",
      "twitter.tweetid",
      "twitter.userid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.day",
      "twitter.*",
      "location.country",
      "location.state",
      "location.city",
      "location.locationid",
      "location.statecode",
      "location.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "Tweet with ID tw-682723090279841798 was posted from which country? \"tw-682723090279841798\" is the TweetID",
    "input_sequence": "Tweet with ID tw-682723090279841798 was posted from which country? \"tw-682723090279841798\" is the TweetID | location : location.locationid , location.country , location.state , location.city , location.statecode | twitter : twitter.locationid , twitter.tweetid ( tw-682723090279841798 ) , twitter.userid , twitter.weekday , twitter.hour | user : user.userid , user.gender | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "location.locationid",
      "location.country",
      "location.state",
      "location.city",
      "location.statecode",
      "location.*",
      "twitter.locationid",
      "twitter.tweetid",
      "twitter.userid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.*",
      "user.userid",
      "user.gender",
      "user.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "Tweets that were posted from Brazil are in what languague? \"Brazil\" is the Country; language refers to Lang",
    "input_sequence": "Tweets that were posted from Brazil are in what languague? \"Brazil\" is the Country; language refers to Lang | twitter : twitter.lang , twitter.locationid , twitter.tweetid , twitter.userid , twitter.weekday | location : location.locationid , location.country ( Brazil ) , location.state , location.city , location.statecode | user : user.gender , user.userid | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "twitter.lang",
      "twitter.locationid",
      "twitter.tweetid",
      "twitter.userid",
      "twitter.weekday",
      "twitter.*",
      "location.locationid",
      "location.country",
      "location.state",
      "location.city",
      "location.statecode",
      "location.*",
      "user.gender",
      "user.userid",
      "user.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "Please list the texts of all the tweets in French posted by male users. \"French\" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male'",
    "input_sequence": "Please list the texts of all the tweets in French posted by male users. \"French\" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male' | twitter : twitter.text , twitter.userid , twitter.lang , twitter.tweetid , twitter.weekday | user : user.gender ( Male ) , user.userid | location : location.country , location.state , location.city , location.locationid , location.statecode | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "twitter.text",
      "twitter.userid",
      "twitter.lang",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.*",
      "user.gender",
      "user.userid",
      "user.*",
      "location.country",
      "location.state",
      "location.city",
      "location.locationid",
      "location.statecode",
      "location.*"
    ]
  },
  {
    "db_id": "social_media",
    "question": "Please list all the cities from where tweets with neutral sentiments were posted. neutral sentiment refers to Sentiment = 0",
    "input_sequence": "Please list all the cities from where tweets with neutral sentiments were posted. neutral sentiment refers to Sentiment = 0 | location : location.locationid , location.city , location.country , location.state , location.statecode | twitter : twitter.locationid , twitter.sentiment , twitter.tweetid , twitter.weekday , twitter.hour | user : user.gender , user.userid | twitter.userid = user.userid | twitter.locationid = location.locationid",
    "output_sequence": " | ",
    "tc_original": [
      "location.locationid",
      "location.city",
      "location.country",
      "location.state",
      "location.statecode",
      "location.*",
      "twitter.locationid",
      "twitter.sentiment",
      "twitter.tweetid",
      "twitter.weekday",
      "twitter.hour",
      "twitter.*",
      "user.gender",
      "user.userid",
      "user.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "What is the average gpa of Ogdon Zywicki's research assistants? research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor's ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);",
    "input_sequence": "What is the average gpa of Ogdon Zywicki's research assistants? research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor's ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa); | prof : prof.last_name ( Zywicki ) , prof.first_name ( Ogdon ) , prof.prof_id , prof.gender , prof.email | student : student.gpa , student.student_id , student.email , student.intelligence , student.type | ra : ra.prof_id , ra.student_id , ra.capability , ra.salary | course : course.name , course.credit , course.diff , course.course_id | ra.student_id = student.student_id | ra.prof_id = prof.prof_id",
    "output_sequence": " | ",
    "tc_original": [
      "prof.last_name",
      "prof.first_name",
      "prof.prof_id",
      "prof.gender",
      "prof.email",
      "prof.*",
      "student.gpa",
      "student.student_id",
      "student.email",
      "student.intelligence",
      "student.type",
      "student.*",
      "ra.prof_id",
      "ra.student_id",
      "ra.capability",
      "ra.salary",
      "ra.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students? research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;",
    "input_sequence": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students? research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage; | prof : prof.prof_id , prof.last_name ( Zywicki ) , prof.first_name ( Ogdon ) , prof.gender , prof.email | student : student.type ( TPG ) , student.student_id , student.email , student.intelligence , student.f_name | ra : ra.prof_id , ra.student_id , ra.capability , ra.salary | course : course.name , course.credit , course.diff , course.course_id | ra.student_id = student.student_id | ra.prof_id = prof.prof_id",
    "output_sequence": " | ",
    "tc_original": [
      "prof.prof_id",
      "prof.last_name",
      "prof.first_name",
      "prof.gender",
      "prof.email",
      "prof.*",
      "student.type",
      "student.student_id",
      "student.email",
      "student.intelligence",
      "student.f_name",
      "student.*",
      "ra.prof_id",
      "ra.student_id",
      "ra.capability",
      "ra.salary",
      "ra.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "How many students have the highest intelligence among those taking a bachelor's degree? bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);",
    "input_sequence": "How many students have the highest intelligence among those taking a bachelor's degree? bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence); | student : student.type ( UG ) , student.intelligence , student.student_id , student.email , student.f_name | registration : registration.student_id , registration.course_id , registration.grade , registration.sat | course : course.name , course.credit , course.diff , course.course_id | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "student.type",
      "student.intelligence",
      "student.student_id",
      "student.email",
      "student.f_name",
      "student.*",
      "registration.student_id",
      "registration.course_id",
      "registration.grade",
      "registration.sat",
      "registration.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "What are the GPAs of the unpaid Research Assistants? Unpaid Research Assistants undertake their work without payment in which salary = 'free';",
    "input_sequence": "What are the GPAs of the unpaid Research Assistants? Unpaid Research Assistants undertake their work without payment in which salary = 'free'; | student : student.gpa , student.student_id , student.email , student.intelligence , student.type | ra : ra.salary ( free ) , ra.student_id , ra.capability , ra.prof_id | course : course.name , course.credit , course.diff , course.course_id | prof : prof.gender , prof.email , prof.popularity , prof.prof_id , prof.first_name | ra.student_id = student.student_id | ra.prof_id = prof.prof_id",
    "output_sequence": " | ",
    "tc_original": [
      "student.gpa",
      "student.student_id",
      "student.email",
      "student.intelligence",
      "student.type",
      "student.*",
      "ra.salary",
      "ra.student_id",
      "ra.capability",
      "ra.prof_id",
      "ra.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*",
      "prof.gender",
      "prof.email",
      "prof.popularity",
      "prof.prof_id",
      "prof.first_name",
      "prof.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "Among the easiest courses, what is the name of the course where most students got an A? diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;",
    "input_sequence": "Among the easiest courses, what is the name of the course where most students got an A? diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course; | course : course.course_id , course.name , course.diff , course.credit | registration : registration.course_id , registration.grade , registration.student_id , registration.sat | student : student.email , student.intelligence , student.type , student.student_id , student.f_name | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "course.course_id",
      "course.name",
      "course.diff",
      "course.credit",
      "course.*",
      "registration.course_id",
      "registration.grade",
      "registration.student_id",
      "registration.sat",
      "registration.*",
      "student.email",
      "student.intelligence",
      "student.type",
      "student.student_id",
      "student.f_name",
      "student.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "How many courses does the student with the highest GPA this semester take? student with the highest GPA refers to student_id where MAX(gpa);",
    "input_sequence": "How many courses does the student with the highest GPA this semester take? student with the highest GPA refers to student_id where MAX(gpa); | student : student.student_id , student.gpa , student.email , student.intelligence , student.type | registration : registration.student_id , registration.course_id , registration.grade , registration.sat | course : course.course_id , course.name , course.credit , course.diff | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "student.student_id",
      "student.gpa",
      "student.email",
      "student.intelligence",
      "student.type",
      "student.*",
      "registration.student_id",
      "registration.course_id",
      "registration.grade",
      "registration.sat",
      "registration.*",
      "course.course_id",
      "course.name",
      "course.credit",
      "course.diff",
      "course.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "What are the names of the courses that the students with the lowest intelligence are least satisfied with? lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;",
    "input_sequence": "What are the names of the courses that the students with the lowest intelligence are least satisfied with? lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1; | course : course.course_id , course.name , course.credit , course.diff | student : student.student_id , student.intelligence , student.email , student.type , student.f_name | registration : registration.course_id , registration.student_id , registration.sat , registration.grade | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "course.course_id",
      "course.name",
      "course.credit",
      "course.diff",
      "course.*",
      "student.student_id",
      "student.intelligence",
      "student.email",
      "student.type",
      "student.f_name",
      "student.*",
      "registration.course_id",
      "registration.student_id",
      "registration.sat",
      "registration.grade",
      "registration.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "Describe the names and credits of the least difficult courses. diff refers to difficulty; the least difficult courses refer to MIN(diff);",
    "input_sequence": "Describe the names and credits of the least difficult courses. diff refers to difficulty; the least difficult courses refer to MIN(diff); | course : course.credit , course.name , course.diff , course.course_id | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | prof : prof.gender , prof.email , prof.popularity , prof.prof_id , prof.first_name | student : student.email , student.intelligence , student.type , student.student_id , student.f_name | ra.student_id = student.student_id | ra.prof_id = prof.prof_id",
    "output_sequence": " | ",
    "tc_original": [
      "course.credit",
      "course.name",
      "course.diff",
      "course.course_id",
      "course.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*",
      "prof.gender",
      "prof.email",
      "prof.popularity",
      "prof.prof_id",
      "prof.first_name",
      "prof.*",
      "student.email",
      "student.intelligence",
      "student.type",
      "student.student_id",
      "student.f_name",
      "student.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "In students with a grade of B, how many of them have an intellegence level of 3?",
    "input_sequence": "In students with a grade of B, how many of them have an intellegence level of 3? | student : student.student_id , student.intelligence , student.email , student.type , student.f_name | registration : registration.student_id , registration.grade , registration.course_id , registration.sat | course : course.name , course.credit , course.diff , course.course_id | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "student.student_id",
      "student.intelligence",
      "student.email",
      "student.type",
      "student.f_name",
      "student.*",
      "registration.student_id",
      "registration.grade",
      "registration.course_id",
      "registration.sat",
      "registration.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "List the course's name where students acquired a grade of D.",
    "input_sequence": "List the course's name where students acquired a grade of D. | course : course.course_id , course.name , course.credit , course.diff | registration : registration.course_id , registration.grade , registration.student_id , registration.sat | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | student : student.email , student.intelligence , student.type , student.student_id , student.f_name | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "course.course_id",
      "course.name",
      "course.credit",
      "course.diff",
      "course.*",
      "registration.course_id",
      "registration.grade",
      "registration.student_id",
      "registration.sat",
      "registration.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*",
      "student.email",
      "student.intelligence",
      "student.type",
      "student.student_id",
      "student.f_name",
      "student.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "Among students with low salary, how many of them have a gpa of 3.5? low salary refers to salary = 'low';",
    "input_sequence": "Among students with low salary, how many of them have a gpa of 3.5? low salary refers to salary = 'low'; | student : student.student_id , student.gpa , student.intelligence , student.email , student.type | ra : ra.student_id , ra.salary ( low ) , ra.capability , ra.prof_id | course : course.name , course.credit , course.diff , course.course_id | prof : prof.gender , prof.email , prof.popularity , prof.prof_id , prof.first_name | ra.student_id = student.student_id | ra.prof_id = prof.prof_id",
    "output_sequence": " | ",
    "tc_original": [
      "student.student_id",
      "student.gpa",
      "student.intelligence",
      "student.email",
      "student.type",
      "student.*",
      "ra.student_id",
      "ra.salary",
      "ra.capability",
      "ra.prof_id",
      "ra.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*",
      "prof.gender",
      "prof.email",
      "prof.popularity",
      "prof.prof_id",
      "prof.first_name",
      "prof.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "Calculate the average satisfaction of the good students with their courses. average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';",
    "input_sequence": "Calculate the average satisfaction of the good students with their courses. average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B'; | registration : registration.grade , registration.student_id , registration.course_id , registration.sat | course : course.course_id , course.name , course.credit , course.diff | student : student.student_id , student.email , student.intelligence , student.type , student.f_name | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "registration.grade",
      "registration.student_id",
      "registration.course_id",
      "registration.sat",
      "registration.*",
      "course.course_id",
      "course.name",
      "course.credit",
      "course.diff",
      "course.*",
      "student.student_id",
      "student.email",
      "student.intelligence",
      "student.type",
      "student.f_name",
      "student.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "Give the full name and capability of students who failed in any courses. full name of students = f_name, l_name; failed refers to grade IS NULL;",
    "input_sequence": "Give the full name and capability of students who failed in any courses. full name of students = f_name, l_name; failed refers to grade IS NULL; | student : student.student_id , student.f_name , student.l_name , student.email , student.intelligence | ra : ra.student_id , ra.capability , ra.salary , ra.prof_id | registration : registration.student_id , registration.grade , registration.course_id , registration.sat | course : course.name , course.credit , course.diff , course.course_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "student.student_id",
      "student.f_name",
      "student.l_name",
      "student.email",
      "student.intelligence",
      "student.*",
      "ra.student_id",
      "ra.capability",
      "ra.salary",
      "ra.prof_id",
      "ra.*",
      "registration.student_id",
      "registration.grade",
      "registration.course_id",
      "registration.sat",
      "registration.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1. research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;",
    "input_sequence": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1. research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1; | course : course.course_id , course.name , course.credit , course.diff | student : student.type ( RPG ) , student.student_id , student.email , student.intelligence , student.f_name | registration : registration.course_id , registration.student_id , registration.sat , registration.grade | ra : ra.capability , ra.salary , ra.student_id , ra.prof_id | ra.student_id = student.student_id | registration.student_id = student.student_id | registration.course_id = course.course_id",
    "output_sequence": " | ",
    "tc_original": [
      "course.course_id",
      "course.name",
      "course.credit",
      "course.diff",
      "course.*",
      "student.type",
      "student.student_id",
      "student.email",
      "student.intelligence",
      "student.f_name",
      "student.*",
      "registration.course_id",
      "registration.student_id",
      "registration.sat",
      "registration.grade",
      "registration.*",
      "ra.capability",
      "ra.salary",
      "ra.student_id",
      "ra.prof_id",
      "ra.*"
    ]
  },
  {
    "db_id": "cs_semester",
    "question": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students? capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';",
    "input_sequence": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students? capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG'; | ra : ra.capability , ra.student_id , ra.salary , ra.prof_id | student : student.type ( RPG , UG ) , student.student_id , student.email , student.intelligence , student.f_name | course : course.name , course.credit , course.diff , course.course_id | prof : prof.gender , prof.email , prof.popularity , prof.prof_id , prof.first_name | ra.student_id = student.student_id | ra.prof_id = prof.prof_id",
    "output_sequence": " | ",
    "tc_original": [
      "ra.capability",
      "ra.student_id",
      "ra.salary",
      "ra.prof_id",
      "ra.*",
      "student.type",
      "student.student_id",
      "student.email",
      "student.intelligence",
      "student.f_name",
      "student.*",
      "course.name",
      "course.credit",
      "course.diff",
      "course.course_id",
      "course.*",
      "prof.gender",
      "prof.email",
      "prof.popularity",
      "prof.prof_id",
      "prof.first_name",
      "prof.*"
    ]
  },
  {
    "db_id": "computer_student",
    "question": "How many courses are there for basic or medium undergraduate courses? basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id",
    "input_sequence": "How many courses are there for basic or medium undergraduate courses? basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id | course : course.courselevel ( Level_300 ) , course.course_id | person : person.professor , person.student , person.p_id , person.hasposition , person.inphase | advisedby : advisedby.p_id , advisedby.p_id_dummy | taughtby : taughtby.course_id , taughtby.p_id | advisedby.p_id = person.p_id | advisedby.p_id_dummy = person.p_id | taughtby.course_id = course.course_id | taughtby.p_id = person.p_id",
    "output_sequence": " | ",
    "tc_original": [
      "course.courselevel",
      "course.course_id",
      "course.*",
      "person.professor",
      "person.student",
      "person.p_id",
      "person.hasposition",
      "person.inphase",
      "person.*",
      "advisedby.p_id",
      "advisedby.p_id_dummy",
      "advisedby.*",
      "taughtby.course_id",
      "taughtby.p_id",
      "taughtby.*"
    ]
  }
]