[
    {
        "question_id": 7,
        "db_id": "california_schools",
        "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
        "evidence": "",
        "SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "difficulty": "simple",
        "query": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "question_toks": [
            "What",
            "is",
            "the",
            "phone",
            "number",
            "of",
            "the",
            "school",
            "that",
            "has",
            "the",
            "highest",
            "number",
            "of",
            "test",
            "takers",
            "with",
            "an",
            "SAT",
            "score",
            "of",
            "over",
            "1500",
            "?"
        ],
        "tc_original": [
            "schools.cdscode",
            "schools.phone",
            "schools.school",
            "schools.county",
            "schools.district",
            "schools.*",
            "satscores.numge1500",
            "satscores.sname",
            "satscores.numtsttakr",
            "satscores.cds",
            "satscores.dname",
            "satscores.*",
            "frpm.cdscode",
            "frpm.academic year",
            "frpm.county code",
            "frpm.district code",
            "frpm.school code",
            "frpm.*"
        ],
        "gold_links": {
            "phone number": "COLUMN:[schools].[phone]",
            "school": "TABLE:[schools]",
            "test takers": "COLUMN:[satscores].[numtsttakr]",
            "SAT score": "COLUMN:[satscores].[numge1500]",
            "1500": "VALUE:[satscores].[numge1500]"
        }
    },
    {
        "question_id": 11,
        "db_id": "california_schools",
        "question": "Please list the codes of the schools with a total enrollment of over 500. Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`",
        "evidence": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`",
        "SQL": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
        "difficulty": "simple",
        "query": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "codes",
            "of",
            "the",
            "schools",
            "with",
            "a",
            "total",
            "enrollment",
            "of",
            "over",
            "500",
            ".",
            "Total",
            "enrollment",
            "can",
            "be",
            "represented",
            "by",
            "`Enrollment",
            "(K-12)`",
            "+",
            "`Enrollment",
            "(Ages",
            "5-17)`"
        ],
        "tc_original": [
            "schools.school",
            "schools.cdscode",
            "schools.gsserved",
            "schools.gsoffered",
            "schools.county",
            "schools.*",
            "frpm.school code",
            "frpm.enrollment (k-12)",
            "frpm.enrollment (ages 5-17)",
            "frpm.cdscode",
            "frpm.free meal count (k-12)",
            "frpm.*",
            "satscores.cds",
            "satscores.rtype",
            "satscores.sname",
            "satscores.dname",
            "satscores.cname",
            "satscores.*"
        ],
        "gold_links": {
            "codes": "COLUMN:[schools].[cdscode]",
            "schools": "TABLE:[schools]",
            "enrollment": "COLUMN:[frpm].[enrollment (k-12)]",
            "enrollment ages": "COLUMN:[frpm].[enrollment (ages 5-17)]",
            "enrollment k-12": "COLUMN:[frpm].[enrollment (k-12)]",
            "over 500": "VALUE:[frpm].[enrollment (k-12)]"
        }
    },
    {
        "question_id": 13,
        "db_id": "california_schools",
        "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate. Excellence rate = NumGE1500 / NumTstTakr",
        "evidence": "Excellence rate = NumGE1500 / NumTstTakr",
        "SQL": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "difficulty": "simple",
        "query": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "phone",
            "numbers",
            "of",
            "the",
            "schools",
            "with",
            "the",
            "top",
            "3",
            "SAT",
            "excellence",
            "rate",
            ".",
            "Excellence",
            "rate",
            "=",
            "NumGE1500",
            "/",
            "NumTstTakr"
        ],
        "tc_original": [
            "schools.phone",
            "schools.cdscode",
            "schools.school",
            "schools.county",
            "schools.district",
            "schools.*",
            "satscores.numge1500",
            "satscores.cds",
            "satscores.enroll12",
            "satscores.rtype",
            "satscores.sname",
            "satscores.*",
            "frpm.cdscode",
            "frpm.academic year",
            "frpm.county code",
            "frpm.district code",
            "frpm.school code",
            "frpm.*"
        ],
        "gold_links": {
            "phone numbers": "COLUMN:[schools].[phone]",
            "schools": "TABLE:[schools]",
            "SAT excellence rate": "COLUMN:[satscores].[numge1500]",
            "NumGE1500": "COLUMN:[satscores].[numge1500]",
            "NumTstTakr": "COLUMN:[satscores].[numtsttakr]"
        }
    },
    {
        "question_id": 21,
        "db_id": "california_schools",
        "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
        "evidence": "",
        "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700",
        "difficulty": "simple",
        "query": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700",
        "question_toks": [
            "In",
            "Los",
            "Angeles",
            "how",
            "many",
            "schools",
            "have",
            "more",
            "than",
            "500",
            "free",
            "meals",
            "but",
            "less",
            "than",
            "700",
            "free",
            "or",
            "reduced",
            "price",
            "meals",
            "for",
            "K-12",
            "?"
        ],
        "tc_original": [
            "frpm.county name",
            "frpm.school code",
            "frpm.free meal count (k-12)",
            "frpm.district code",
            "frpm.enrollment (k-12)",
            "frpm.*",
            "schools.county",
            "schools.city",
            "schools.school",
            "schools.cdscode",
            "schools.gsoffered",
            "schools.*",
            "satscores.cds",
            "satscores.rtype",
            "satscores.sname",
            "satscores.dname",
            "satscores.cname",
            "satscores.*"
        ],
        "gold_links": {
            "Los Angeles": "VALUE:[frpm].[county name]",
            "schools": "TABLE:[frpm]",
            "free meals": "COLUMN:[frpm].[free meal count (k-12)]",
            "500": "VALUE:[frpm].[free meal count (k-12)]",
            "reduced price meals": "COLUMN:[frpm].[frpm count (k-12)]",
            "700": "VALUE:[frpm].[frpm count (k-12)]",
            "K-12": "COLUMN:[frpm].[enrollment (k-12)]"
        }
    },
    {
        "question_id": 45,
        "db_id": "california_schools",
        "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores. Usually, administrators manage the school stuff.",
        "evidence": "Usually, administrators manage the school stuff.",
        "SQL": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "difficulty": "moderate",
        "query": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "writing",
            "score",
            "of",
            "each",
            "of",
            "the",
            "schools",
            "managed",
            "by",
            "Ricci",
            "Ulrich",
            "?",
            "List",
            "the",
            "schools",
            "and",
            "the",
            "corresponding",
            "average",
            "writing",
            "scores",
            ".",
            "Usually",
            ",",
            "administrators",
            "manage",
            "the",
            "school",
            "stuff",
            "."
        ],
        "tc_original": [
            "satscores.avgscrwrite",
            "satscores.sname",
            "satscores.cds",
            "satscores.avgscrread",
            "satscores.enroll12",
            "satscores.*",
            "schools.admfname1",
            "schools.school",
            "schools.admlname1",
            "schools.cdscode",
            "schools.admemail1",
            "schools.*",
            "frpm.enrollment (k-12)",
            "frpm.enrollment (ages 5-17)",
            "frpm.cdscode",
            "frpm.academic year",
            "frpm.county code",
            "frpm.*"
        ],
        "gold_links": {
            "average writing score": "COLUMN:[satscores].[avgscrwrite]",
            "schools": "TABLE:[schools]",
            "Ricci Ulrich": "COLUMN:[schools].[admfname1]",
            "writing score": "COLUMN:[satscores].[avgscrwrite]",
            "school": "COLUMN:[schools].[school]"
        }
    },
    {
        "question_id": 55,
        "db_id": "california_schools",
        "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt? Ratio = count(schools in Colusa) / count(schools in Humboldt)",
        "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
        "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "difficulty": "moderate",
        "query": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "evidence_added": true,
        "question_toks": [
            "Of",
            "the",
            "schools",
            "with",
            "a",
            "mailing",
            "state",
            "address",
            "in",
            "California",
            ",",
            "what",
            "is",
            "the",
            "ratio",
            "of",
            "the",
            "schools",
            "located",
            "in",
            "the",
            "county",
            "of",
            "Colusa",
            "against",
            "the",
            "school",
            "located",
            "in",
            "the",
            "county",
            "of",
            "Humboldt",
            "?",
            "Ratio",
            "=",
            "count(schools",
            "in",
            "Colusa)",
            "/",
            "count(schools",
            "in",
            "Humboldt)"
        ],
        "tc_original": [
            "schools.county",
            "schools.mailstate",
            "schools.state",
            "schools.school",
            "schools.mailcity",
            "schools.*",
            "frpm.county name",
            "frpm.cdscode",
            "frpm.free meal count (k-12)",
            "frpm.school code",
            "frpm.school name",
            "frpm.*",
            "satscores.cds",
            "satscores.rtype",
            "satscores.sname",
            "satscores.dname",
            "satscores.cname",
            "satscores.*"
        ],
        "gold_links": {
            "schools": "TABLE:[schools]",
            "mailing state": "COLUMN:[schools].[mailstate]",
            "California": "VALUE:[schools].[mailstate]",
            "county": "COLUMN:[schools].[county]",
            "Colusa": "VALUE:[schools].[county]",
            "Humboldt": "VALUE:[schools].[county]"
        }
    },
    {
        "question_id": 62,
        "db_id": "california_schools",
        "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
        "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
        "SQL": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
        "difficulty": "challenging",
        "query": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "non-chartered",
            "schools",
            "in",
            "the",
            "county",
            "of",
            "Los",
            "Angeles",
            "with",
            "a",
            "percent",
            "(%)",
            "of",
            "eligible",
            "free",
            "meals",
            "for",
            "grades",
            "1",
            "through",
            "12",
            "that",
            "is",
            "less",
            "than",
            "0.18%",
            "?",
            "non-chartered",
            "schools",
            "refer",
            "to",
            "schools",
            "whose",
            "Charter",
            "=",
            "0",
            ";",
            "K-12",
            "means",
            "grades",
            "1",
            "through",
            "12",
            ";",
            "percent",
            "of",
            "eligible",
            "free",
            "rate",
            "for",
            "K-12",
            "=",
            "`Free",
            "Meal",
            "Count",
            "(K-12)`",
            "*",
            "100",
            "/",
            "`Enrollment",
            "(K-12)`"
        ],
        "tc_original": [
            "schools.county",
            "schools.charter",
            "schools.school",
            "schools.cdscode",
            "schools.district",
            "schools.*",
            "frpm.percent (%) eligible free (k-12)",
            "frpm.charter school (y/n)",
            "frpm.county name",
            "frpm.free meal count (k-12)",
            "frpm.enrollment (k-12)",
            "frpm.*",
            "satscores.cds",
            "satscores.rtype",
            "satscores.sname",
            "satscores.dname",
            "satscores.cname",
            "satscores.*"
        ],
        "gold_links": {
            "non-chartered schools": "TABLE:[schools]",
            "charter": "COLUMN:[schools].[charter]",
            "charter = 0": "VALUE:[schools].[charter]",
            "county": "COLUMN:[schools].[county]",
            "Los Angeles": "VALUE:[schools].[county]",
            "percent": "COLUMN:[frpm].[percent (%) eligible free (k-12)]",
            "eligible free meals": "COLUMN:[frpm].[percent (%) eligible free (k-12)]",
            "grades": "COLUMN:[frpm].[free meal count (k-12)]",
            "grade 1": "COLUMN:[frpm].[free meal count (k-12)]",
            "grade 12": "COLUMN:[frpm].[free meal count (k-12)]",
            "0.18%": "VALUE:[frpm].[percent (%) eligible free (k-12)]",
            "free meal count": "COLUMN:[frpm].[free meal count (k-12)]",
            "enrollment": "COLUMN:[frpm].[enrollment (k-12)]"
        }
    },
    {
        "question_id": 104,
        "db_id": "financial",
        "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
        "evidence": "",
        "SQL": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "difficulty": "simple",
        "query": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "question_toks": [
            "The",
            "transaction",
            "of",
            "840",
            "USD",
            "happened",
            "in",
            "1998/10/14",
            ",",
            "when",
            "was",
            "this",
            "account",
            "opened",
            "?"
        ],
        "tc_original": [
            "trans.date",
            "trans.amount",
            "trans.account_id",
            "trans.k_symbol",
            "trans.trans_id",
            "trans.*",
            "account.date",
            "account.account_id",
            "account.frequency",
            "account.district_id",
            "account.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "transaction": "TABLE:[trans]",
            "840": "VALUE:[trans].[amount]",
            "USD": "COLUMN:[trans].[amount]",
            "1998/10/14": "VALUE:[trans].[date]",
            "account": "TABLE:[account]",
            "opened": "COLUMN:[account].[date]"
        }
    },
    {
        "question_id": 105,
        "db_id": "financial",
        "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
        "evidence": "",
        "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "difficulty": "simple",
        "query": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "question_toks": [
            "There",
            "was",
            "a",
            "loan",
            "approved",
            "in",
            "1994/8/25",
            ",",
            "where",
            "was",
            "that",
            "account",
            "opened",
            ",",
            "give",
            "the",
            "district",
            "Id",
            "of",
            "the",
            "branch",
            "."
        ],
        "tc_original": [
            "loan.date",
            "loan.account_id",
            "loan.loan_id",
            "loan.amount",
            "loan.duration",
            "loan.*",
            "district.district_id",
            "district.a2",
            "district.a3",
            "district.a4",
            "district.a5",
            "district.*",
            "account.account_id",
            "account.district_id",
            "account.frequency",
            "account.date",
            "account.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "loan": "TABLE:[loan]",
            "approved": "TABLE:[loan]",
            "1994/8/25": "VALUE:[loan].[date]",
            "account": "TABLE:[account]",
            "opened": "COLUMN:[account].[date]",
            "district Id": "COLUMN:[account].[district_id]",
            "branch": "COLUMN:[account].[district_id]"
        }
    },
    {
        "question_id": 111,
        "db_id": "financial",
        "question": "How many accounts were opened in Litomerice in 1996? A2 refers to district name; Litomerice is one of district names.",
        "evidence": "A2 refers to district name; Litomerice is one of district names.",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
        "difficulty": "simple",
        "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "accounts",
            "were",
            "opened",
            "in",
            "Litomerice",
            "in",
            "1996",
            "?",
            "A2",
            "refers",
            "to",
            "district",
            "name",
            ";",
            "Litomerice",
            "is",
            "one",
            "of",
            "district",
            "names",
            "."
        ],
        "tc_original": [
            "district.a2",
            "district.district_id",
            "district.a9",
            "district.a3",
            "district.a4",
            "district.*",
            "account.district_id",
            "account.date",
            "account.account_id",
            "account.frequency",
            "account.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*"
        ],
        "gold_links": {
            "accounts": "TABLE:[account]",
            "opened": "COLUMN:[account].[date]",
            "Litomerice": "VALUE:[district].[a2]",
            "district name": "COLUMN:[district].[a2]",
            "1996": "VALUE:[account].[date]"
        }
    },
    {
        "question_id": 117,
        "db_id": "financial",
        "question": "What is the percentage of loan amount that has been fully paid with no issue. Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
        "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
        "SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "difficulty": "moderate",
        "query": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "percentage",
            "of",
            "loan",
            "amount",
            "that",
            "has",
            "been",
            "fully",
            "paid",
            "with",
            "no",
            "issue",
            ".",
            "Loan",
            "paid",
            "with",
            "no",
            "issue",
            "means",
            "contract",
            "finished",
            ",",
            "no",
            "problems",
            ";",
            "status",
            "=",
            "'A'",
            "means",
            "contract",
            "finished",
            ",",
            "no",
            "problems",
            ";",
            "Percentage",
            "of",
            "accounts",
            "by",
            "condition",
            "=",
            "[(total(amount)",
            "&",
            "condition)",
            "/",
            "(total",
            "amount)]",
            "*",
            "100%"
        ],
        "tc_original": [
            "loan.amount",
            "loan.status",
            "loan.date",
            "loan.account_id",
            "loan.payments",
            "loan.*",
            "account.frequency",
            "account.date",
            "account.account_id",
            "account.district_id",
            "account.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*",
            "client.gender",
            "client.client_id",
            "client.birth_date",
            "client.district_id",
            "client.*"
        ],
        "gold_links": {
            "percentage": "COLUMN:[loan].[amount]",
            "loan amount": "COLUMN:[loan].[amount]",
            "fully paid": "COLUMN:[loan].[status]",
            "no issue": "COLUMN:[loan].[status]",
            "contract finished": "COLUMN:[loan].[status]",
            "status": "COLUMN:[loan].[status]",
            "A": "VALUE:[loan].[status]",
            "accounts": "TABLE:[loan]",
            "condition": "COLUMN:[loan].[status]"
        }
    },
    {
        "question_id": 122,
        "db_id": "financial",
        "question": "State the district and region for loan ID '4990'. A2, A3 contains the information about district and region respectively.",
        "evidence": "A2, A3 contains the information about district and region respectively.",
        "SQL": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "difficulty": "simple",
        "query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "evidence_added": true,
        "question_toks": [
            "State",
            "the",
            "district",
            "and",
            "region",
            "for",
            "loan",
            "ID",
            "'4990'",
            ".",
            "A2",
            ",",
            "A3",
            "contains",
            "the",
            "information",
            "about",
            "district",
            "and",
            "region",
            "respectively",
            "."
        ],
        "tc_original": [
            "district.a3",
            "district.a2",
            "district.district_id",
            "district.a4",
            "district.a5",
            "district.*",
            "loan.loan_id",
            "loan.account_id",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.*",
            "account.frequency",
            "account.date",
            "account.account_id",
            "account.district_id",
            "account.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "district": "COLUMN:[district].[a2]",
            "region": "COLUMN:[district].[a3]",
            "loan ID": "COLUMN:[loan].[loan_id]",
            "4990": "VALUE:[loan].[loan_id]",
            "A2": "COLUMN:[district].[a2]",
            "A3": "COLUMN:[district].[a3]"
        }
    },
    {
        "question_id": 128,
        "db_id": "financial",
        "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders. A2 refers to districts; Female refers to gender = 'F'",
        "evidence": "A2 refers to districts; Female refers to gender = 'F'",
        "SQL": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "difficulty": "moderate",
        "query": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "evidence_added": true,
        "question_toks": [
            "List",
            "the",
            "top",
            "nine",
            "districts",
            ",",
            "by",
            "descending",
            "order",
            ",",
            "from",
            "the",
            "highest",
            "to",
            "the",
            "lowest",
            ",",
            "the",
            "number",
            "of",
            "female",
            "account",
            "holders",
            ".",
            "A2",
            "refers",
            "to",
            "districts",
            ";",
            "Female",
            "refers",
            "to",
            "gender",
            "=",
            "'F'"
        ],
        "tc_original": [
            "district.a9",
            "district.a2",
            "district.district_id",
            "district.a3",
            "district.a4",
            "district.*",
            "client.gender",
            "client.client_id",
            "client.district_id",
            "client.birth_date",
            "client.*",
            "account.account_id",
            "account.district_id",
            "account.frequency",
            "account.date",
            "account.*",
            "disp.client_id",
            "disp.account_id",
            "disp.disp_id",
            "disp.type",
            "disp.*"
        ],
        "gold_links": {
            "districts": "TABLE:[district]",
            "A2": "COLUMN:[district].[a2]",
            "female": "COLUMN:[client].[gender]",
            "account holders": "COLUMN:[client].[client_id]",
            "top nine": "TABLE:[district]",
            "descending order": "COLUMN:[client].[client_id]",
            "highest": "COLUMN:[client].[client_id]",
            "lowest": "COLUMN:[client].[client_id]"
        }
    },
    {
        "question_id": 134,
        "db_id": "financial",
        "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened? A16 stands for no. of committed crimes 1996",
        "evidence": "A16 stands for no. of committed crimes 1996",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
        "difficulty": "simple",
        "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "In",
            "the",
            "branch",
            "where",
            "the",
            "largest",
            "number",
            "of",
            "crimes",
            "were",
            "committed",
            "in",
            "1996",
            ",",
            "how",
            "many",
            "accounts",
            "were",
            "opened",
            "?",
            "A16",
            "stands",
            "for",
            "no",
            ".",
            "of",
            "committed",
            "crimes",
            "1996"
        ],
        "tc_original": [
            "account.district_id",
            "account.account_id",
            "account.frequency",
            "account.date",
            "account.*",
            "district.a16",
            "district.district_id",
            "district.a15",
            "district.a3",
            "district.a2",
            "district.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "branch": "TABLE:[district]",
            "accounts": "TABLE:[account]",
            "number": "COLUMN:[district].[a16]",
            "crimes": "COLUMN:[district].[a16]",
            "committed": "COLUMN:[district].[a16]",
            "1996": "COLUMN:[district].[a16]",
            "account_id": "COLUMN:[account].[account_id]",
            "opened": "TABLE:[account]"
        }
    },
    {
        "question_id": 137,
        "db_id": "financial",
        "question": "How many accounts have running contracts in Branch location 1? Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "difficulty": "moderate",
        "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "accounts",
            "have",
            "running",
            "contracts",
            "in",
            "Branch",
            "location",
            "1",
            "?",
            "Status",
            "=",
            "'C'",
            "stands",
            "for",
            "running",
            "contract",
            ",",
            "OK",
            "so",
            "far",
            ";",
            "Status",
            "=",
            "'D'",
            "stands",
            "for",
            "running",
            "contract",
            ",",
            "client",
            "in",
            "debt"
        ],
        "tc_original": [
            "account.district_id",
            "account.account_id",
            "account.frequency",
            "account.date",
            "account.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*",
            "client.gender",
            "client.client_id",
            "client.birth_date",
            "client.district_id",
            "client.*"
        ],
        "gold_links": {
            "accounts": "TABLE:[account]",
            "account": "TABLE:[account]",
            "contracts": "TABLE:[loan]",
            "contract": "TABLE:[loan]",
            "branch location": "TABLE:[district]",
            "location 1": "VALUE:[district].[district_id]",
            "1": "VALUE:[district].[district_id]",
            "running": "COLUMN:[loan].[status]",
            "status": "COLUMN:[loan].[status]",
            "C": "VALUE:[loan].[status]",
            "D": "VALUE:[loan].[status]",
            "client": "TABLE:[client]",
            "debt": "COLUMN:[loan].[status]"
        }
    },
    {
        "question_id": 138,
        "db_id": "financial",
        "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
        "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "difficulty": "moderate",
        "query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "evidence_added": true,
        "question_toks": [
            "In",
            "the",
            "branch",
            "where",
            "the",
            "second-highest",
            "number",
            "of",
            "crimes",
            "were",
            "committed",
            "in",
            "1995",
            "occurred",
            ",",
            "how",
            "many",
            "male",
            "clients",
            "are",
            "there",
            "?",
            "Male",
            "refers",
            "to",
            "gender",
            "=",
            "'M'",
            ";",
            "A15",
            "stands",
            "for",
            "no",
            ".",
            "of",
            "commited",
            "crimes",
            "1995"
        ],
        "tc_original": [
            "client.district_id",
            "client.gender",
            "client.client_id",
            "client.birth_date",
            "client.*",
            "district.a15",
            "district.district_id",
            "district.a16",
            "district.a3",
            "district.a2",
            "district.*",
            "account.district_id",
            "account.account_id",
            "account.frequency",
            "account.date",
            "account.*",
            "disp.client_id",
            "disp.account_id",
            "disp.type",
            "disp.disp_id",
            "disp.*"
        ],
        "gold_links": {
            "branch": "TABLE:[district]",
            "crimes": "COLUMN:[district].[a15]",
            "1995": "COLUMN:[district].[a15]",
            "male": "COLUMN:[client].[gender]",
            "gender": "COLUMN:[client].[gender]",
            "number": "COLUMN:[client].[client_id]",
            "clients": "TABLE:[client]",
            "A15": "COLUMN:[district].[a15]"
        }
    },
    {
        "question_id": 139,
        "db_id": "financial",
        "question": "How many high-level credit cards have \"OWNER\" type of disposition? High-level credit cards refers to the cards with the gold type.",
        "evidence": "High-level credit cards refers to the cards with the gold type.",
        "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "difficulty": "simple",
        "query": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "high-level",
            "credit",
            "cards",
            "have",
            "\"OWNER\"",
            "type",
            "of",
            "disposition",
            "?",
            "High-level",
            "credit",
            "cards",
            "refers",
            "to",
            "the",
            "cards",
            "with",
            "the",
            "gold",
            "type",
            "."
        ],
        "tc_original": [
            "disp.type",
            "disp.disp_id",
            "disp.client_id",
            "disp.account_id",
            "disp.*",
            "card.type",
            "card.disp_id",
            "card.card_id",
            "card.issued",
            "card.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*",
            "account.frequency",
            "account.date",
            "account.account_id",
            "account.district_id",
            "account.*"
        ],
        "gold_links": {
            "credit cards": "TABLE:[card]",
            "card": "TABLE:[card]",
            "gold": "VALUE:[card].[type]",
            "OWNER": "VALUE:[disp].[type]",
            "disposition": "COLUMN:[disp].[type]",
            "type": "COLUMN:[card].[type]",
            "owner": "VALUE:[disp].[type]"
        }
    },
    {
        "question_id": 140,
        "db_id": "financial",
        "question": "How many accounts are there in the district of \"Pisek\"? A2 refers to district name",
        "evidence": "A2 refers to district name",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "difficulty": "simple",
        "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "accounts",
            "are",
            "there",
            "in",
            "the",
            "district",
            "of",
            "\"Pisek\"",
            "?",
            "A2",
            "refers",
            "to",
            "district",
            "name"
        ],
        "tc_original": [
            "district.a2",
            "district.a9",
            "district.district_id",
            "district.a3",
            "district.a4",
            "district.*",
            "account.district_id",
            "account.account_id",
            "account.frequency",
            "account.date",
            "account.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*"
        ],
        "gold_links": {
            "accounts": "TABLE:[account]",
            "district": "TABLE:[district]",
            "Pisek": "VALUE:[district].[a2]",
            "A2": "COLUMN:[district].[a2]",
            "district name": "COLUMN:[district].[a2]"
        }
    },
    {
        "question_id": 148,
        "db_id": "financial",
        "question": "Please list the accounts whose district is Tabor that are eligible for loans. District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
        "evidence": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
        "SQL": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
        "difficulty": "moderate",
        "query": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "accounts",
            "whose",
            "district",
            "is",
            "Tabor",
            "that",
            "are",
            "eligible",
            "for",
            "loans",
            ".",
            "District",
            "refers",
            "to",
            "column",
            "A2",
            ";",
            "when",
            "the",
            "account",
            "type",
            "=",
            "'OWNER'",
            ",",
            "it's",
            "eligible",
            "for",
            "loans"
        ],
        "tc_original": [
            "district.a2",
            "district.district_id",
            "district.a3",
            "district.a4",
            "district.a5",
            "district.*",
            "loan.account_id",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.*",
            "disp.type",
            "disp.account_id",
            "disp.disp_id",
            "disp.client_id",
            "disp.*",
            "account.account_id",
            "account.frequency",
            "account.date",
            "account.district_id",
            "account.*"
        ],
        "gold_links": {
            "accounts": "TABLE:[account]",
            "district": "TABLE:[district]",
            "Tabor": "VALUE:[district].[a2]",
            "A2": "COLUMN:[district].[a2]",
            "account type": "COLUMN:[disp].[type]",
            "OWNER": "VALUE:[disp].[type]",
            "loans": "TABLE:[loan]"
        }
    },
    {
        "question_id": 158,
        "db_id": "financial",
        "question": "What is the district Id of the account that placed the order with the id 33333?",
        "evidence": "",
        "SQL": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
        "difficulty": "simple",
        "query": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
        "question_toks": [
            "What",
            "is",
            "the",
            "district",
            "Id",
            "of",
            "the",
            "account",
            "that",
            "placed",
            "the",
            "order",
            "with",
            "the",
            "id",
            "33333",
            "?"
        ],
        "tc_original": [
            "order.account_id",
            "order.order_id",
            "order.account_to",
            "order.bank_to",
            "order.amount",
            "order.*",
            "district.a2",
            "district.district_id",
            "district.a3",
            "district.a4",
            "district.a5",
            "district.*",
            "account.account_id",
            "account.frequency",
            "account.date",
            "account.district_id",
            "account.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*"
        ],
        "gold_links": {
            "district id": "COLUMN:[account].[district_id]",
            "account": "TABLE:[account]",
            "order": "TABLE:[order]",
            "id": "COLUMN:[order].[order_id]",
            "33333": "VALUE:[order].[order_id]"
        }
    },
    {
        "question_id": 162,
        "db_id": "financial",
        "question": "What is the region of the client with the id 3541 from? A3 refers to region",
        "evidence": "A3 refers to region",
        "SQL": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
        "difficulty": "simple",
        "query": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "region",
            "of",
            "the",
            "client",
            "with",
            "the",
            "id",
            "3541",
            "from",
            "?",
            "A3",
            "refers",
            "to",
            "region"
        ],
        "tc_original": [
            "client.client_id",
            "client.district_id",
            "client.gender",
            "client.birth_date",
            "client.*",
            "district.a3",
            "district.district_id",
            "district.a2",
            "district.a4",
            "district.a5",
            "district.*",
            "disp.client_id",
            "disp.disp_id",
            "disp.account_id",
            "disp.type",
            "disp.*",
            "account.district_id",
            "account.frequency",
            "account.date",
            "account.account_id",
            "account.*"
        ],
        "gold_links": {
            "region": "COLUMN:[district].[a3]",
            "client": "TABLE:[client]",
            "id": "COLUMN:[client].[client_id]",
            "3541": "VALUE:[client].[client_id]",
            "A3": "COLUMN:[district].[a3]"
        }
    },
    {
        "question_id": 166,
        "db_id": "financial",
        "question": "How many of the accounts are from Jesenik district?",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
        "difficulty": "simple",
        "query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
        "question_toks": [
            "How",
            "many",
            "of",
            "the",
            "accounts",
            "are",
            "from",
            "Jesenik",
            "district",
            "?"
        ],
        "tc_original": [
            "district.a2",
            "district.district_id",
            "district.a3",
            "district.a4",
            "district.a5",
            "district.*",
            "account.district_id",
            "account.account_id",
            "account.date",
            "account.frequency",
            "account.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "accounts": "TABLE:[account]",
            "Jesenik": "VALUE:[district].[a2]",
            "district": "TABLE:[district]"
        }
    },
    {
        "question_id": 168,
        "db_id": "financial",
        "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "difficulty": "moderate",
        "query": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "evidence_added": true,
        "question_toks": [
            "What",
            "percentage",
            "of",
            "clients",
            "who",
            "opened",
            "their",
            "accounts",
            "in",
            "the",
            "district",
            "with",
            "an",
            "average",
            "salary",
            "of",
            "over",
            "10000",
            "are",
            "women",
            "?",
            "Female",
            "refers",
            "to",
            "gender",
            "=",
            "'F'",
            ";",
            "Woman",
            "and",
            "female",
            "are",
            "closed",
            ";",
            "Average",
            "salary",
            "can",
            "be",
            "found",
            "in",
            "A11"
        ],
        "tc_original": [
            "client.client_id",
            "client.gender",
            "client.district_id",
            "client.birth_date",
            "client.*",
            "district.a11",
            "district.district_id",
            "district.a2",
            "district.a9",
            "district.a3",
            "district.*",
            "account.account_id",
            "account.district_id",
            "account.frequency",
            "account.date",
            "account.*",
            "disp.client_id",
            "disp.account_id",
            "disp.disp_id",
            "disp.type",
            "disp.*"
        ],
        "gold_links": {
            "percentage": "COLUMN:[client].[client_id]",
            "clients": "TABLE:[client]",
            "opened accounts": "TABLE:[account]",
            "district": "TABLE:[district]",
            "average salary": "COLUMN:[district].[a11]",
            "over 10000": "VALUE:[district].[a11]",
            "women": "COLUMN:[client].[gender]",
            "female": "COLUMN:[client].[gender]",
            "gender": "COLUMN:[client].[gender]"
        }
    },
    {
        "question_id": 175,
        "db_id": "financial",
        "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction? Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "evidence": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate",
        "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "accounts",
            "have",
            "an",
            "owner",
            "disposition",
            "and",
            "request",
            "for",
            "a",
            "statement",
            "to",
            "be",
            "generated",
            "upon",
            "a",
            "transaction",
            "?",
            "Frequency",
            "=",
            "'POPLATEK",
            "PO",
            "OBRATU'",
            "stands",
            "for",
            "issuance",
            "after",
            "transaction"
        ],
        "tc_original": [
            "disp.account_id",
            "disp.type",
            "disp.disp_id",
            "disp.client_id",
            "disp.*",
            "trans.account_id",
            "trans.account",
            "trans.k_symbol",
            "trans.trans_id",
            "trans.date",
            "trans.*",
            "account.frequency",
            "account.account_id",
            "account.date",
            "account.district_id",
            "account.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "accounts": "TABLE:[account]",
            "owner": "VALUE:[disp].[type]",
            "owner disposition": "VALUE:[disp].[type]",
            "statement": "COLUMN:[account].[frequency]",
            "frequency": "COLUMN:[account].[frequency]",
            "POPLATEK PO OBRATU": "VALUE:[account].[frequency]",
            "transaction": "COLUMN:[account].[frequency]"
        }
    },
    {
        "question_id": 183,
        "db_id": "financial",
        "question": "How many accounts in Beroun were opened after 1996?",
        "evidence": "",
        "SQL": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
        "difficulty": "simple",
        "query": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
        "question_toks": [
            "How",
            "many",
            "accounts",
            "in",
            "Beroun",
            "were",
            "opened",
            "after",
            "1996",
            "?"
        ],
        "tc_original": [
            "account.date",
            "account.district_id",
            "account.account_id",
            "account.frequency",
            "account.*",
            "district.a2",
            "district.district_id",
            "district.a4",
            "district.a3",
            "district.a5",
            "district.*",
            "loan.date",
            "loan.amount",
            "loan.duration",
            "loan.status",
            "loan.loan_id",
            "loan.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "accounts": "TABLE:[account]",
            "Beroun": "VALUE:[district].[a2]",
            "opened": "COLUMN:[account].[date]",
            "after 1996": "COLUMN:[account].[date]",
            "1996": "VALUE:[account].[date]"
        }
    },
    {
        "question_id": 191,
        "db_id": "financial",
        "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement. Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple",
        "query": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "loan",
            "accounts",
            "are",
            "for",
            "pre-payment",
            "of",
            "duration",
            "of",
            "24",
            "months",
            "with",
            "weekly",
            "issuance",
            "of",
            "statement",
            ".",
            "Frequency",
            "=",
            "'POPLATEK",
            "TYDNE'",
            "referes",
            "to",
            "weekly",
            "statement"
        ],
        "tc_original": [
            "loan.duration",
            "loan.payments",
            "loan.account_id",
            "loan.loan_id",
            "loan.date",
            "loan.*",
            "account.frequency",
            "account.account_id",
            "account.date",
            "account.district_id",
            "account.*",
            "order.order_id",
            "order.account_id",
            "order.bank_to",
            "order.account_to",
            "order.amount",
            "order.*",
            "card.type",
            "card.issued",
            "card.card_id",
            "card.disp_id",
            "card.*"
        ],
        "gold_links": {
            "loan accounts": "TABLE:[loan]",
            "pre-payment": "TABLE:[loan]",
            "duration": "COLUMN:[loan].[duration]",
            "24 months": "VALUE:[loan].[duration]",
            "24": "VALUE:[loan].[duration]",
            "weekly": "VALUE:[account].[frequency]",
            "issuance": "COLUMN:[account].[frequency]",
            "statement": "COLUMN:[account].[frequency]",
            "POPLATEK TYDNE": "VALUE:[account].[frequency]"
        }
    },
    {
        "question_id": 206,
        "db_id": "toxicology",
        "question": "What elements are in the TR004_8_9 bond atoms? TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
        "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "difficulty": "challenging",
        "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "elements",
            "are",
            "in",
            "the",
            "TR004_8_9",
            "bond",
            "atoms",
            "?",
            "TR004_8_9",
            "bond",
            "atoms",
            "refers",
            "to",
            "bond_id",
            "=",
            "'TR004_8_9'",
            ";"
        ],
        "tc_original": [
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "connected.bond_id",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*"
        ],
        "gold_links": {
            "elements": "COLUMN:[atom].[element]",
            "TR004_8_9": "VALUE:[bond].[bond_id]",
            "bond atoms": "TABLE:[connected]"
        }
    },
    {
        "question_id": 213,
        "db_id": "toxicology",
        "question": "What type of bond is there between the atoms TR004_8 and TR004_20? type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
        "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
        "SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
        "difficulty": "moderate",
        "query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "type",
            "of",
            "bond",
            "is",
            "there",
            "between",
            "the",
            "atoms",
            "TR004_8",
            "and",
            "TR004_20",
            "?",
            "type",
            "of",
            "bond",
            "refers",
            "to",
            "bond_type",
            ";",
            "between",
            "the",
            "atoms",
            "TR004_8",
            "and",
            "TR004_20",
            "refers",
            "to",
            "atom_id",
            "=",
            "'TR004_8'",
            "AND",
            "atom_id2",
            "=",
            "'TR004_20'",
            "OR",
            "another",
            "way",
            "around"
        ],
        "tc_original": [
            "bond.bond_type",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "atom.atom_id",
            "atom.element",
            "atom.molecule_id",
            "atom.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*"
        ],
        "gold_links": {
            "type": "COLUMN:[bond].[bond_type]",
            "bond": "TABLE:[bond]",
            "bond type": "COLUMN:[bond].[bond_type]",
            "atoms": "TABLE:[atom]",
            "TR004_8": "VALUE:[connected].[atom_id]",
            "TR004_20": "VALUE:[connected].[atom_id2]"
        }
    },
    {
        "question_id": 214,
        "db_id": "toxicology",
        "question": "What type of label is not on molecules with atoms with tin? tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "difficulty": "simple",
        "query": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "type",
            "of",
            "label",
            "is",
            "not",
            "on",
            "molecules",
            "with",
            "atoms",
            "with",
            "tin",
            "?",
            "tin",
            "refers",
            "to",
            "element",
            "!",
            "=",
            "'sn'",
            ";",
            "label",
            "=",
            "'+'",
            "mean",
            "molecules",
            "are",
            "carcinogenic",
            ";",
            "label",
            "=",
            "'-'",
            "means",
            "molecules",
            "are",
            "non-carcinogenic"
        ],
        "tc_original": [
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "atom.element",
            "atom.molecule_id",
            "atom.atom_id",
            "atom.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "label": "COLUMN:[molecule].[label]",
            "type": "COLUMN:[molecule].[label]",
            "molecules": "TABLE:[molecule]",
            "atoms": "TABLE:[atom]",
            "tin": "VALUE:[atom].[element]"
        }
    },
    {
        "question_id": 220,
        "db_id": "toxicology",
        "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. TR000 is the molecule id;",
        "evidence": "TR000 is the molecule id;",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "difficulty": "challenging",
        "query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "top",
            "three",
            "elements",
            "of",
            "the",
            "toxicology",
            "of",
            "the",
            "molecule",
            "TR000",
            "in",
            "alphabetical",
            "order",
            ".",
            "TR000",
            "is",
            "the",
            "molecule",
            "id",
            ";"
        ],
        "tc_original": [
            "atom.molecule_id",
            "atom.element",
            "atom.atom_id",
            "atom.*",
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "elements": "COLUMN:[atom].[element]",
            "toxicology": "TABLE:[atom]",
            "molecule": "COLUMN:[atom].[molecule_id]",
            "TR000": "VALUE:[atom].[molecule_id]"
        }
    },
    {
        "question_id": 224,
        "db_id": "toxicology",
        "question": "What are the bond IDs that have the same atom ID 2 of TR000_2? TR000_2 is the atom id; atom ID 2 refers to atom_id2",
        "evidence": "TR000_2 is the atom id; atom ID 2 refers to atom_id2",
        "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "difficulty": "simple",
        "query": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "bond",
            "IDs",
            "that",
            "have",
            "the",
            "same",
            "atom",
            "ID",
            "2",
            "of",
            "TR000_2",
            "?",
            "TR000_2",
            "is",
            "the",
            "atom",
            "id",
            ";",
            "atom",
            "ID",
            "2",
            "refers",
            "to",
            "atom_id2"
        ],
        "tc_original": [
            "connected.bond_id",
            "connected.atom_id2",
            "connected.atom_id",
            "connected.*",
            "bond.bond_id",
            "bond.bond_type",
            "bond.molecule_id",
            "bond.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*",
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*"
        ],
        "gold_links": {
            "bond IDs": "COLUMN:[bond].[bond_id]",
            "atom ID 2": "COLUMN:[connected].[atom_id2]",
            "TR000_2": "VALUE:[connected].[atom_id2]"
        }
    },
    {
        "question_id": 232,
        "db_id": "toxicology",
        "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
        "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "difficulty": "moderate",
        "query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "top",
            "three",
            "molecules",
            "that",
            "have",
            "single",
            "bonds",
            "between",
            "two",
            "atoms",
            "and",
            "are",
            "not",
            "carcinogenic",
            "in",
            "alphabetical",
            "order",
            ".",
            "label",
            "=",
            "'-'",
            "means",
            "molecules",
            "are",
            "not",
            "carcinogenic",
            ";",
            "single",
            "type",
            "bond",
            "refers",
            "to",
            "bond_type",
            "=",
            "'-'",
            ";",
            "list",
            "top",
            "three",
            "molecules",
            "refers",
            "to",
            "return",
            "molecule_id",
            "and",
            "order",
            "by",
            "molecule_id",
            ";"
        ],
        "tc_original": [
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "bond.molecule_id",
            "bond.bond_id",
            "bond.bond_type",
            "bond.*",
            "connected.bond_id",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.*",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.element",
            "atom.*"
        ],
        "gold_links": {
            "molecules": "TABLE:[molecule]",
            "single bonds": "COLUMN:[bond].[bond_type]",
            "single": "COLUMN:[bond].[bond_type]",
            "bond_type": "COLUMN:[bond].[bond_type]",
            "label": "COLUMN:[molecule].[label]",
            "not carcinogenic": "COLUMN:[molecule].[label]",
            "molecule_id": "COLUMN:[molecule].[molecule_id]",
            "alphabetical order": "COLUMN:[molecule].[molecule_id]",
            "top three": "COLUMN:[molecule].[molecule_id]"
        }
    },
    {
        "question_id": 245,
        "db_id": "toxicology",
        "question": "What is the average number of bonds the atoms with the element iodine have? atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
        "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
        "SQL": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "difficulty": "moderate",
        "query": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "number",
            "of",
            "bonds",
            "the",
            "atoms",
            "with",
            "the",
            "element",
            "iodine",
            "have",
            "?",
            "atoms",
            "with",
            "the",
            "element",
            "iodine",
            "refers",
            "to",
            "element",
            "=",
            "'i'",
            ";",
            "average",
            "=",
            "DIVIDE(COUND(bond_id)",
            ",",
            "COUNT(atom_id))",
            "where",
            "element",
            "=",
            "'i'"
        ],
        "tc_original": [
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "connected.bond_id",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*"
        ],
        "gold_links": {
            "average": "COLUMN:[bond].[bond_id]",
            "number": "COLUMN:[bond].[bond_id]",
            "bonds": "COLUMN:[bond].[bond_id]",
            "atoms": "TABLE:[atom]",
            "element": "COLUMN:[atom].[element]",
            "iodine": "VALUE:[atom].[element]"
        }
    },
    {
        "question_id": 260,
        "db_id": "toxicology",
        "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine. triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'",
        "evidence": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'",
        "SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
        "difficulty": "moderate",
        "query": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
        "evidence_added": true,
        "question_toks": [
            "Calculate",
            "the",
            "total",
            "atoms",
            "with",
            "triple-bond",
            "molecules",
            "containing",
            "the",
            "element",
            "phosphorus",
            "or",
            "bromine",
            ".",
            "triple",
            "bond",
            "refers",
            "to",
            "bond_type",
            "=",
            "'#'",
            ";",
            "phosphorus",
            "refers",
            "to",
            "element",
            "=",
            "'p'",
            ";",
            "bromine",
            "refers",
            "to",
            "element",
            "=",
            "'br'"
        ],
        "tc_original": [
            "atom.atom_id",
            "atom.molecule_id",
            "atom.element",
            "atom.*",
            "bond.molecule_id",
            "bond.bond_id",
            "bond.bond_type",
            "bond.*",
            "connected.atom_id",
            "connected.bond_id",
            "connected.atom_id2",
            "connected.*",
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*"
        ],
        "gold_links": {
            "total atoms": "COLUMN:[atom].[atom_id]",
            "triple-bond": "COLUMN:[bond].[bond_type]",
            "triple bond": "COLUMN:[bond].[bond_type]",
            "#": "VALUE:[bond].[bond_type]",
            "molecules": "TABLE:[molecule]",
            "phosphorus": "VALUE:[atom].[element]",
            "bromine": "VALUE:[atom].[element]",
            "element": "COLUMN:[atom].[element]"
        }
    },
    {
        "question_id": 264,
        "db_id": "toxicology",
        "question": "What are the labels for TR000, TR001 and TR002? TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
        "difficulty": "simple",
        "query": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "labels",
            "for",
            "TR000",
            ",",
            "TR001",
            "and",
            "TR002",
            "?",
            "TR000",
            ",",
            "TR001",
            "and",
            "TR002",
            "are",
            "molecule",
            "id",
            ";",
            "label",
            "=",
            "'+'",
            "mean",
            "molecules",
            "are",
            "carcinogenic",
            ";",
            "label",
            "=",
            "'-'",
            "means",
            "molecules",
            "are",
            "non-carcinogenic"
        ],
        "tc_original": [
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*",
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "labels": "COLUMN:[molecule].[label]",
            "TR000": "VALUE:[molecule].[molecule_id]",
            "TR001": "VALUE:[molecule].[molecule_id]",
            "TR002": "VALUE:[molecule].[molecule_id]",
            "molecule id": "COLUMN:[molecule].[molecule_id]"
        }
    },
    {
        "question_id": 266,
        "db_id": "toxicology",
        "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030. label = '+' mean molecules are carcinogenic",
        "evidence": "label = '+' mean molecules are carcinogenic",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'",
        "difficulty": "simple",
        "query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'",
        "evidence_added": true,
        "question_toks": [
            "Calculate",
            "the",
            "total",
            "carcinogenic",
            "molecules",
            "for",
            "molecule",
            "id",
            "from",
            "TR000",
            "to",
            "TR030",
            ".",
            "label",
            "=",
            "'+'",
            "mean",
            "molecules",
            "are",
            "carcinogenic"
        ],
        "tc_original": [
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "total": "COLUMN:[molecule].[molecule_id]",
            "carcinogenic": "COLUMN:[molecule].[label]",
            "molecules": "TABLE:[molecule]",
            "molecule id": "COLUMN:[molecule].[molecule_id]",
            "TR000": "VALUE:[molecule].[molecule_id]",
            "TR030": "VALUE:[molecule].[molecule_id]",
            "+": "VALUE:[molecule].[label]"
        }
    },
    {
        "question_id": 272,
        "db_id": "toxicology",
        "question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon. carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
        "evidence": "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'",
        "difficulty": "moderate",
        "query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "down",
            "two",
            "molecule",
            "id",
            "of",
            "triple",
            "bond",
            "non",
            "carcinogenic",
            "molecules",
            "with",
            "element",
            "carbon",
            ".",
            "carbon",
            "refers",
            "to",
            "element",
            "=",
            "'c'",
            ";",
            "triple",
            "bond",
            "refers",
            "to",
            "bond_type",
            "=",
            "'#'",
            ";",
            "label",
            "=",
            "'-'",
            "means",
            "molecules",
            "are",
            "non-carcinogenic"
        ],
        "tc_original": [
            "bond.molecule_id",
            "bond.bond_type",
            "bond.bond_id",
            "bond.*",
            "atom.element",
            "atom.molecule_id",
            "atom.atom_id",
            "atom.*",
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "connected.bond_id",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.*"
        ],
        "gold_links": {
            "molecule id": "COLUMN:[molecule].[molecule_id]",
            "triple bond": "COLUMN:[bond].[bond_type]",
            "non carcinogenic": "COLUMN:[molecule].[label]",
            "element carbon": "COLUMN:[atom].[element]",
            "carbon": "VALUE:[atom].[element]",
            "bond": "TABLE:[bond]",
            "element": "COLUMN:[atom].[element]"
        }
    },
    {
        "question_id": 276,
        "db_id": "toxicology",
        "question": "Write down the atom IDs of the first and second atoms of triple bond type molecules. first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';",
        "evidence": "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "difficulty": "simple",
        "query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "evidence_added": true,
        "question_toks": [
            "Write",
            "down",
            "the",
            "atom",
            "IDs",
            "of",
            "the",
            "first",
            "and",
            "second",
            "atoms",
            "of",
            "triple",
            "bond",
            "type",
            "molecules",
            ".",
            "first",
            "atom",
            "refers",
            "to",
            "atom_id",
            ";",
            "second",
            "atom",
            "refers",
            "to",
            "atom_id2",
            ";",
            "triple",
            "bond",
            "refers",
            "to",
            "bond_type",
            "=",
            "'#'",
            ";"
        ],
        "tc_original": [
            "bond.bond_type",
            "bond.molecule_id",
            "bond.bond_id",
            "bond.*",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.atom_id",
            "connected.*",
            "atom.molecule_id",
            "atom.atom_id",
            "atom.element",
            "atom.*",
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*"
        ],
        "gold_links": {
            "atom": "TABLE:[atom]",
            "atom IDs": "COLUMN:[connected].[atom_id]",
            "first atom": "COLUMN:[connected].[atom_id]",
            "second atom": "COLUMN:[connected].[atom_id2]",
            "triple bond": "VALUE:[bond].[bond_type]",
            "bond type": "COLUMN:[bond].[bond_type]",
            "molecules": "TABLE:[molecule]"
        }
    },
    {
        "question_id": 277,
        "db_id": "toxicology",
        "question": "What are the toxicology elements associated with bond ID TR000_1_2? TR000_1_2 is the bond id;",
        "evidence": "TR000_1_2 is the bond id;",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'",
        "difficulty": "challenging",
        "query": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "toxicology",
            "elements",
            "associated",
            "with",
            "bond",
            "ID",
            "TR000_1_2",
            "?",
            "TR000_1_2",
            "is",
            "the",
            "bond",
            "id",
            ";"
        ],
        "tc_original": [
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*",
            "connected.bond_id",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*"
        ],
        "gold_links": {
            "toxicology elements": "COLUMN:[atom].[element]",
            "elements": "COLUMN:[atom].[element]",
            "bond ID": "COLUMN:[connected].[bond_id]",
            "TR000_1_2": "VALUE:[connected].[bond_id]"
        }
    },
    {
        "question_id": 279,
        "db_id": "toxicology",
        "question": "What is the label for bond ID TR001_10_11? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
        "difficulty": "simple",
        "query": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "label",
            "for",
            "bond",
            "ID",
            "TR001_10_11",
            "?",
            "label",
            "=",
            "'+'",
            "mean",
            "molecules",
            "are",
            "carcinogenic",
            ";",
            "label",
            "=",
            "'-'",
            "means",
            "molecules",
            "are",
            "non-carcinogenic"
        ],
        "tc_original": [
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*"
        ],
        "gold_links": {
            "label": "COLUMN:[molecule].[label]",
            "bond id": "COLUMN:[bond].[bond_id]",
            "TR001_10_11": "VALUE:[bond].[bond_id]",
            "molecules": "TABLE:[molecule]"
        }
    },
    {
        "question_id": 293,
        "db_id": "toxicology",
        "question": "How many atoms belong to the molecule labeled with carcinogenic compounds? label = '+' mean molecules are carcinogenic;",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "simple",
        "query": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "atoms",
            "belong",
            "to",
            "the",
            "molecule",
            "labeled",
            "with",
            "carcinogenic",
            "compounds",
            "?",
            "label",
            "=",
            "'+'",
            "mean",
            "molecules",
            "are",
            "carcinogenic",
            ";"
        ],
        "tc_original": [
            "atom.molecule_id",
            "atom.atom_id",
            "atom.element",
            "atom.*",
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "atoms": "TABLE:[atom]",
            "molecule": "TABLE:[molecule]",
            "label": "COLUMN:[molecule].[label]",
            "carcinogenic": "COLUMN:[molecule].[label]",
            "+": "VALUE:[molecule].[label]"
        }
    },
    {
        "question_id": 301,
        "db_id": "toxicology",
        "question": "What is the bond type of TR007_4_19? double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
        "difficulty": "simple",
        "query": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "bond",
            "type",
            "of",
            "TR007_4_19",
            "?",
            "double",
            "bond",
            "refers",
            "to",
            "bond_type",
            "=",
            "'",
            "=",
            "'",
            ";",
            "single",
            "bond",
            "refers",
            "to",
            "bond_type",
            "=",
            "'-'",
            ";",
            "triple",
            "bond",
            "refers",
            "to",
            "bond_type",
            "=",
            "'#'",
            ";"
        ],
        "tc_original": [
            "bond.bond_type",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*"
        ],
        "gold_links": {
            "bond type": "COLUMN:[bond].[bond_type]",
            "TR007_4_19": "VALUE:[bond].[bond_id]"
        }
    },
    {
        "question_id": 302,
        "db_id": "toxicology",
        "question": "Name the elements that comprise the atoms of bond TR001_2_4. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
        "difficulty": "challenging",
        "query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
        "evidence_added": true,
        "question_toks": [
            "Name",
            "the",
            "elements",
            "that",
            "comprise",
            "the",
            "atoms",
            "of",
            "bond",
            "TR001_2_4",
            ".",
            "element",
            "=",
            "'cl'",
            "means",
            "Chlorine",
            ";",
            "element",
            "=",
            "'c'",
            "means",
            "Carbon",
            ";",
            "element",
            "=",
            "'h'",
            "means",
            "Hydrogen",
            ";",
            "element",
            "=",
            "'o'",
            "means",
            "Oxygen",
            ",",
            "element",
            "=",
            "'s'",
            "means",
            "Sulfur",
            ";",
            "element",
            "=",
            "'n'",
            "means",
            "Nitrogen",
            ",",
            "element",
            "=",
            "'p'",
            "means",
            "Phosphorus",
            ",",
            "element",
            "=",
            "'na'",
            "means",
            "Sodium",
            ",",
            "element",
            "=",
            "'br'",
            "means",
            "Bromine",
            ",",
            "element",
            "=",
            "'f'",
            "means",
            "Fluorine",
            ";",
            "element",
            "=",
            "'i'",
            "means",
            "Iodine",
            ";",
            "element",
            "=",
            "'sn'",
            "means",
            "Tin",
            ";",
            "element",
            "=",
            "'pb'",
            "means",
            "Lead",
            ";",
            "element",
            "=",
            "'te'",
            "means",
            "Tellurium",
            ";",
            "element",
            "=",
            "'ca'",
            "means",
            "Calcium"
        ],
        "tc_original": [
            "atom.atom_id",
            "atom.element",
            "atom.molecule_id",
            "atom.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "connected.atom_id",
            "connected.bond_id",
            "connected.atom_id2",
            "connected.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*"
        ],
        "gold_links": {
            "elements": "COLUMN:[atom].[element]",
            "atoms": "TABLE:[atom]",
            "bond": "TABLE:[bond]",
            "TR001_2_4": "VALUE:[connected].[bond_id]",
            "element": "COLUMN:[atom].[element]",
            "chlorine": "VALUE:[atom].[element]",
            "carbon": "VALUE:[atom].[element]",
            "hydrogen": "VALUE:[atom].[element]",
            "oxygen": "VALUE:[atom].[element]",
            "sulfur": "VALUE:[atom].[element]",
            "nitrogen": "VALUE:[atom].[element]",
            "phosphorus": "VALUE:[atom].[element]",
            "sodium": "VALUE:[atom].[element]",
            "bromine": "VALUE:[atom].[element]",
            "fluorine": "VALUE:[atom].[element]",
            "iodine": "VALUE:[atom].[element]",
            "tin": "VALUE:[atom].[element]",
            "lead": "VALUE:[atom].[element]",
            "tellurium": "VALUE:[atom].[element]",
            "calcium": "VALUE:[atom].[element]"
        }
    },
    {
        "question_id": 315,
        "db_id": "toxicology",
        "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic? label = '+' mean molecules are carcinogenic;",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "difficulty": "simple",
        "query": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "the",
            "molecules",
            "which",
            "contain",
            "\"cl\"",
            "element",
            ",",
            "which",
            "of",
            "them",
            "are",
            "carcinogenic",
            "?",
            "label",
            "=",
            "'+'",
            "mean",
            "molecules",
            "are",
            "carcinogenic",
            ";"
        ],
        "tc_original": [
            "atom.element",
            "atom.molecule_id",
            "atom.atom_id",
            "atom.*",
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*"
        ],
        "gold_links": {
            "molecules": "TABLE:[molecule]",
            "cl": "VALUE:[atom].[element]",
            "element": "COLUMN:[atom].[element]",
            "carcinogenic": "VALUE:[molecule].[label]",
            "label": "COLUMN:[molecule].[label]"
        }
    },
    {
        "question_id": 319,
        "db_id": "toxicology",
        "question": "How many elements are contained in bond_id TR001_3_4? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'",
        "difficulty": "challenging",
        "query": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "elements",
            "are",
            "contained",
            "in",
            "bond_id",
            "TR001_3_4",
            "?",
            "element",
            "=",
            "'cl'",
            "means",
            "Chlorine",
            ";",
            "element",
            "=",
            "'c'",
            "means",
            "Carbon",
            ";",
            "element",
            "=",
            "'h'",
            "means",
            "Hydrogen",
            ";",
            "element",
            "=",
            "'o'",
            "means",
            "Oxygen",
            ",",
            "element",
            "=",
            "'s'",
            "means",
            "Sulfur",
            ";",
            "element",
            "=",
            "'n'",
            "means",
            "Nitrogen",
            ",",
            "element",
            "=",
            "'p'",
            "means",
            "Phosphorus",
            ",",
            "element",
            "=",
            "'na'",
            "means",
            "Sodium",
            ",",
            "element",
            "=",
            "'br'",
            "means",
            "Bromine",
            ",",
            "element",
            "=",
            "'f'",
            "means",
            "Fluorine",
            ";",
            "element",
            "=",
            "'i'",
            "means",
            "Iodine",
            ";",
            "element",
            "=",
            "'sn'",
            "means",
            "Tin",
            ";",
            "element",
            "=",
            "'pb'",
            "means",
            "Lead",
            ";",
            "element",
            "=",
            "'te'",
            "means",
            "Tellurium",
            ";",
            "element",
            "=",
            "'ca'",
            "means",
            "Calcium"
        ],
        "tc_original": [
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "atom.atom_id",
            "atom.element",
            "atom.molecule_id",
            "atom.*",
            "connected.bond_id",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*"
        ],
        "gold_links": {
            "elements": "COLUMN:[atom].[element]",
            "bond_id": "COLUMN:[connected].[bond_id]",
            "TR001_3_4": "VALUE:[connected].[bond_id]",
            "Chlorine": "VALUE:[atom].[element]",
            "cl": "VALUE:[atom].[element]",
            "Carbon": "VALUE:[atom].[element]",
            "c": "VALUE:[atom].[element]",
            "Hydrogen": "VALUE:[atom].[element]",
            "h": "VALUE:[atom].[element]",
            "Oxygen": "VALUE:[atom].[element]",
            "o": "VALUE:[atom].[element]",
            "Sulfur": "VALUE:[atom].[element]",
            "s": "VALUE:[atom].[element]",
            "Nitrogen": "VALUE:[atom].[element]",
            "n": "VALUE:[atom].[element]",
            "Phosphorus": "VALUE:[atom].[element]",
            "p": "VALUE:[atom].[element]",
            "Sodium": "VALUE:[atom].[element]",
            "na": "VALUE:[atom].[element]",
            "Bromine": "VALUE:[atom].[element]",
            "br": "VALUE:[atom].[element]",
            "Fluorine": "VALUE:[atom].[element]",
            "f": "VALUE:[atom].[element]",
            "Iodine": "VALUE:[atom].[element]",
            "i": "VALUE:[atom].[element]",
            "Tin": "VALUE:[atom].[element]",
            "sn": "VALUE:[atom].[element]",
            "Lead": "VALUE:[atom].[element]",
            "pb": "VALUE:[atom].[element]",
            "Tellurium": "VALUE:[atom].[element]",
            "te": "VALUE:[atom].[element]",
            "Calcium": "VALUE:[atom].[element]",
            "ca": "VALUE:[atom].[element]"
        }
    },
    {
        "question_id": 322,
        "db_id": "toxicology",
        "question": "What is the element of toxicology for the atom with the ID of TR000_1? atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence": "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
        "difficulty": "challenging",
        "query": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "element",
            "of",
            "toxicology",
            "for",
            "the",
            "atom",
            "with",
            "the",
            "ID",
            "of",
            "TR000_1",
            "?",
            "atom",
            "with",
            "ID",
            "refers",
            "to",
            "atom_id",
            ";",
            "element",
            "=",
            "'cl'",
            "means",
            "Chlorine",
            ";",
            "element",
            "=",
            "'c'",
            "means",
            "Carbon",
            ";",
            "element",
            "=",
            "'h'",
            "means",
            "Hydrogen",
            ";",
            "element",
            "=",
            "'o'",
            "means",
            "Oxygen",
            ",",
            "element",
            "=",
            "'s'",
            "means",
            "Sulfur",
            ";",
            "element",
            "=",
            "'n'",
            "means",
            "Nitrogen",
            ",",
            "element",
            "=",
            "'p'",
            "means",
            "Phosphorus",
            ",",
            "element",
            "=",
            "'na'",
            "means",
            "Sodium",
            ",",
            "element",
            "=",
            "'br'",
            "means",
            "Bromine",
            ",",
            "element",
            "=",
            "'f'",
            "means",
            "Fluorine",
            ";",
            "element",
            "=",
            "'i'",
            "means",
            "Iodine",
            ";",
            "element",
            "=",
            "'sn'",
            "means",
            "Tin",
            ";",
            "element",
            "=",
            "'pb'",
            "means",
            "Lead",
            ";",
            "element",
            "=",
            "'te'",
            "means",
            "Tellurium",
            ";",
            "element",
            "=",
            "'ca'",
            "means",
            "Calcium"
        ],
        "tc_original": [
            "atom.atom_id",
            "atom.element",
            "atom.molecule_id",
            "atom.*",
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "element": "COLUMN:[atom].[element]",
            "toxicology": "COLUMN:[atom].[element]",
            "atom": "TABLE:[atom]",
            "ID": "COLUMN:[atom].[atom_id]",
            "TR000_1": "VALUE:[atom].[atom_id]"
        }
    },
    {
        "question_id": 327,
        "db_id": "toxicology",
        "question": "Which non-carcinogenic molecules consisted more than 5 atoms? label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
        "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
        "SQL": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
        "difficulty": "moderate",
        "query": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "non-carcinogenic",
            "molecules",
            "consisted",
            "more",
            "than",
            "5",
            "atoms",
            "?",
            "label",
            "=",
            "'-'",
            "means",
            "molecules",
            "are",
            "non-carcinogenic",
            ";",
            "molecules",
            "consisted",
            "more",
            "than",
            "5",
            "atoms",
            "refers",
            "to",
            "COUNT(molecule_id)",
            ">",
            "5"
        ],
        "tc_original": [
            "molecule.label",
            "molecule.molecule_id",
            "molecule.*",
            "atom.element",
            "atom.atom_id",
            "atom.molecule_id",
            "atom.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "non-carcinogenic": "COLUMN:[molecule].[label]",
            "molecules": "TABLE:[molecule]",
            "label": "COLUMN:[molecule].[label]",
            "-": "VALUE:[molecule].[label]",
            "atoms": "TABLE:[atom]",
            "molecule_id": "COLUMN:[molecule].[molecule_id]",
            "atom_id": "COLUMN:[atom].[atom_id]",
            "5": "VALUE:[atom].[atom_id]"
        }
    },
    {
        "question_id": 334,
        "db_id": "toxicology",
        "question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "evidence": "label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
        "difficulty": "challenging",
        "query": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "element",
            "with",
            "the",
            "atom",
            "ID",
            "of",
            "TR004_7",
            "in",
            "molecule",
            "that",
            "is",
            "not",
            "carcinogenic",
            "?",
            "label",
            "=",
            "'-'",
            "means",
            "molecules",
            "are",
            "non-carcinogenic",
            ";",
            "element",
            "=",
            "'cl'",
            "means",
            "Chlorine",
            ";",
            "element",
            "=",
            "'c'",
            "means",
            "Carbon",
            ";",
            "element",
            "=",
            "'h'",
            "means",
            "Hydrogen",
            ";",
            "element",
            "=",
            "'o'",
            "means",
            "Oxygen",
            ",",
            "element",
            "=",
            "'s'",
            "means",
            "Sulfur",
            ";",
            "element",
            "=",
            "'n'",
            "means",
            "Nitrogen",
            ",",
            "element",
            "=",
            "'p'",
            "means",
            "Phosphorus",
            ",",
            "element",
            "=",
            "'na'",
            "means",
            "Sodium",
            ",",
            "element",
            "=",
            "'br'",
            "means",
            "Bromine",
            ",",
            "element",
            "=",
            "'f'",
            "means",
            "Fluorine",
            ";",
            "element",
            "=",
            "'i'",
            "means",
            "Iodine",
            ";",
            "element",
            "=",
            "'sn'",
            "means",
            "Tin",
            ";",
            "element",
            "=",
            "'pb'",
            "means",
            "Lead",
            ";",
            "element",
            "=",
            "'te'",
            "means",
            "Tellurium",
            ";",
            "element",
            "=",
            "'ca'",
            "means",
            "Calcium"
        ],
        "tc_original": [
            "atom.atom_id",
            "atom.element",
            "atom.molecule_id",
            "atom.*",
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*"
        ],
        "gold_links": {
            "element": "COLUMN:[atom].[element]",
            "atom ID": "COLUMN:[atom].[atom_id]",
            "TR004_7": "VALUE:[atom].[atom_id]",
            "molecule": "TABLE:[molecule]",
            "carcinogenic": "COLUMN:[molecule].[label]",
            "-": "VALUE:[molecule].[label]"
        }
    },
    {
        "question_id": 339,
        "db_id": "toxicology",
        "question": "List the atom ID of the carcinogenic molecule that contains oxygen? label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'",
        "evidence": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'",
        "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "difficulty": "simple",
        "query": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "the",
            "atom",
            "ID",
            "of",
            "the",
            "carcinogenic",
            "molecule",
            "that",
            "contains",
            "oxygen",
            "?",
            "label",
            "=",
            "'+'",
            "mean",
            "molecules",
            "are",
            "carcinogenic",
            ";",
            "oxygen",
            "refers",
            "to",
            "element",
            "=",
            "'o'"
        ],
        "tc_original": [
            "molecule.molecule_id",
            "molecule.label",
            "molecule.*",
            "atom.molecule_id",
            "atom.atom_id",
            "atom.element",
            "atom.*",
            "bond.bond_id",
            "bond.molecule_id",
            "bond.bond_type",
            "bond.*",
            "connected.atom_id",
            "connected.atom_id2",
            "connected.bond_id",
            "connected.*"
        ],
        "gold_links": {
            "atom ID": "COLUMN:[atom].[atom_id]",
            "carcinogenic": "COLUMN:[molecule].[label]",
            "molecule": "TABLE:[molecule]",
            "oxygen": "VALUE:[atom].[element]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity. movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity;",
        "evidence": "movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity;",
        "SQL": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'",
        "query": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "movie",
            "popularity",
            "of",
            "the",
            "movies",
            "released",
            "in",
            "2021",
            "that",
            "were",
            "directed",
            "by",
            "Steven",
            "Spielberg",
            "?",
            "List",
            "the",
            "names",
            "of",
            "the",
            "movies",
            "and",
            "their",
            "corresponding",
            "popularity",
            ".",
            "movie",
            "released",
            "in",
            "2021",
            "refers",
            "to",
            "movie_release_year",
            "=",
            "2021",
            ";",
            "popularity",
            "refers",
            "to",
            "movie_popularity",
            ";"
        ],
        "tc_original": [
            "movies.movie_title",
            "movies.movie_release_year",
            "movies.movie_popularity",
            "movies.director_name",
            "movies.movie_id",
            "movies.*",
            "lists.user_id",
            "lists.list_id",
            "lists.list_title",
            "lists.list_movie_number",
            "lists.list_update_timestamp_utc",
            "lists.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "movie popularity": "COLUMN:[movies].[movie_popularity]",
            "movies": "TABLE:[movies]",
            "released": "COLUMN:[movies].[movie_release_year]",
            "2021": "VALUE:[movies].[movie_release_year]",
            "directed": "COLUMN:[movies].[director_name]",
            "Steven Spielberg": "VALUE:[movies].[director_name]",
            "names": "COLUMN:[movies].[movie_title]",
            "popularity": "COLUMN:[movies].[movie_popularity]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes? URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39;",
        "evidence": "URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39;",
        "SQL": "SELECT T2.director_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39",
        "query": "SELECT T2.director_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "URL",
            "to",
            "the",
            "movie",
            "director",
            "page",
            "on",
            "Mubi",
            "of",
            "the",
            "director",
            "whose",
            "movie",
            "was",
            "critic",
            "by",
            "user",
            "2452551",
            "and",
            "was",
            "given",
            "39",
            "likes",
            "?",
            "URL",
            "to",
            "the",
            "movie",
            "director",
            "page",
            "on",
            "Mubi",
            "refers",
            "to",
            "director_url",
            ";",
            "likes",
            "refers",
            "to",
            "critic_likes",
            ";",
            "critic_likes",
            "=",
            "39",
            ";"
        ],
        "tc_original": [
            "ratings.critic_likes",
            "ratings.critic",
            "ratings.movie_id",
            "ratings.user_id",
            "ratings.rating_id",
            "ratings.*",
            "movies.movie_id",
            "movies.director_id",
            "movies.director_url",
            "movies.director_name",
            "movies.movie_title",
            "movies.*",
            "lists.user_id",
            "lists.list_id",
            "lists.list_title",
            "lists.list_movie_number",
            "lists.list_update_timestamp_utc",
            "lists.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*"
        ],
        "gold_links": {
            "URL": "COLUMN:[movies].[director_url]",
            "movie director page": "COLUMN:[movies].[director_url]",
            "Mubi": "COLUMN:[movies].[director_url]",
            "director": "COLUMN:[movies].[director_url]",
            "critic": "COLUMN:[ratings].[critic]",
            "user": "COLUMN:[ratings].[user_id]",
            "2452551": "VALUE:[ratings].[user_id]",
            "likes": "COLUMN:[ratings].[critic_likes]",
            "39": "VALUE:[ratings].[critic_likes]",
            "movie": "COLUMN:[ratings].[movie_id]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372? URL refer to rating_url; user 22030372 refer to user_id",
        "evidence": "URL refer to rating_url; user 22030372 refer to user_id",
        "SQL": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 22030372 AND T2.rating_score = 5 AND T1.movie_title = 'Riff-Raff'",
        "query": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 22030372 AND T2.rating_score = 5 AND T1.movie_title = 'Riff-Raff'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "URL",
            "to",
            "the",
            "rating",
            "on",
            "Mubi",
            "of",
            "the",
            "Riff-Raff",
            "movie",
            "that",
            "was",
            "given",
            "the",
            "highest",
            "rating",
            "score",
            "by",
            "user",
            "22030372",
            "?",
            "URL",
            "refer",
            "to",
            "rating_url",
            ";",
            "user",
            "22030372",
            "refer",
            "to",
            "user_id"
        ],
        "tc_original": [
            "ratings.rating_score",
            "ratings.movie_id",
            "ratings.rating_url",
            "ratings.user_id",
            "ratings.rating_id",
            "ratings.*",
            "movies.movie_id",
            "movies.movie_title",
            "movies.movie_url",
            "movies.movie_popularity",
            "movies.movie_release_year",
            "movies.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "URL": "COLUMN:[ratings].[rating_url]",
            "rating": "COLUMN:[ratings].[rating_score]",
            "Mubi": "COLUMN:[ratings].[rating_url]",
            "Riff-Raff": "COLUMN:[movies].[movie_title]",
            "highest score": "COLUMN:[ratings].[rating_score]",
            "user 22030372": "COLUMN:[ratings].[user_id]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "What is the URL to the rating on Mubi made by user 45579900 for the movie \"The Vertical Ray of the Sun\" that received 20 likes? URL refer to rating_url; 20 likes refer to critic_likes = \u201920\u2019; user 45579900 refer to user_id",
        "evidence": "URL refer to rating_url; 20 likes refer to critic_likes = \u201920\u2019; user 45579900 refer to user_id",
        "SQL": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 45579900 AND T1.movie_title = 'The Vertical Ray of the Sun' AND T2.critic_likes = 20",
        "query": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 45579900 AND T1.movie_title = 'The Vertical Ray of the Sun' AND T2.critic_likes = 20",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "URL",
            "to",
            "the",
            "rating",
            "on",
            "Mubi",
            "made",
            "by",
            "user",
            "45579900",
            "for",
            "the",
            "movie",
            "\"The",
            "Vertical",
            "Ray",
            "of",
            "the",
            "Sun\"",
            "that",
            "received",
            "20",
            "likes",
            "?",
            "URL",
            "refer",
            "to",
            "rating_url",
            ";",
            "20",
            "likes",
            "refer",
            "to",
            "critic_likes",
            "=",
            "\u201920\u2019",
            ";",
            "user",
            "45579900",
            "refer",
            "to",
            "user_id"
        ],
        "tc_original": [
            "ratings.user_id",
            "ratings.rating_url",
            "ratings.critic_likes",
            "ratings.movie_id",
            "ratings.rating_id",
            "ratings.*",
            "movies.movie_title",
            "movies.movie_id",
            "movies.movie_url",
            "movies.movie_release_year",
            "movies.movie_title_language",
            "movies.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "URL": "COLUMN:[ratings].[rating_url]",
            "rating": "TABLE:[ratings]",
            "Mubi": "TABLE:[ratings]",
            "user 45579900": "VALUE:[ratings].[user_id]",
            "45579900": "VALUE:[ratings].[user_id]",
            "movie": "TABLE:[movies]",
            "The Vertical Ray of the Sun": "VALUE:[movies].[movie_title]",
            "20 likes": "VALUE:[ratings].[critic_likes]",
            "20": "VALUE:[ratings].[critic_likes]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "Where can I find the movie list \"Short and pretty damn sweet\"? Short and pretty damn sweet is list_title; location of the movie refers to list_url;",
        "evidence": "Short and pretty damn sweet is list_title; location of the movie refers to list_url;",
        "SQL": "SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'",
        "query": "SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'",
        "evidence_added": true,
        "question_toks": [
            "Where",
            "can",
            "I",
            "find",
            "the",
            "movie",
            "list",
            "\"Short",
            "and",
            "pretty",
            "damn",
            "sweet\"",
            "?",
            "Short",
            "and",
            "pretty",
            "damn",
            "sweet",
            "is",
            "list_title",
            ";",
            "location",
            "of",
            "the",
            "movie",
            "refers",
            "to",
            "list_url",
            ";"
        ],
        "tc_original": [
            "movies.movie_title",
            "movies.movie_url",
            "movies.movie_id",
            "movies.movie_title_language",
            "movies.movie_popularity",
            "movies.*",
            "lists.list_title",
            "lists.list_id",
            "lists.list_url",
            "lists.user_id",
            "lists.list_movie_number",
            "lists.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "movie list": "TABLE:[lists]",
            "Short and pretty damn sweet": "VALUE:[lists].[list_title]",
            "list_title": "COLUMN:[lists].[list_title]",
            "location": "COLUMN:[lists].[list_url]",
            "list_url": "COLUMN:[lists].[list_url]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "Please list all the critics made by the user rating the movie \"A Way of Life\". A Way of Life refers to movie_title;",
        "evidence": "A Way of Life refers to movie_title;",
        "SQL": "SELECT T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'",
        "query": "SELECT T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "all",
            "the",
            "critics",
            "made",
            "by",
            "the",
            "user",
            "rating",
            "the",
            "movie",
            "\"A",
            "Way",
            "of",
            "Life\"",
            ".",
            "A",
            "Way",
            "of",
            "Life",
            "refers",
            "to",
            "movie_title",
            ";"
        ],
        "tc_original": [
            "ratings.critic",
            "ratings.movie_id",
            "ratings.user_id",
            "ratings.rating_id",
            "ratings.rating_url",
            "ratings.*",
            "movies.movie_title",
            "movies.movie_id",
            "movies.movie_release_year",
            "movies.movie_url",
            "movies.movie_title_language",
            "movies.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists.user_id",
            "lists.list_id",
            "lists.list_title",
            "lists.list_movie_number",
            "lists.list_update_timestamp_utc",
            "lists.*"
        ],
        "gold_links": {
            "critics": "COLUMN:[ratings].[critic]",
            "user": "COLUMN:[ratings].[user_id]",
            "rating": "COLUMN:[ratings].[user_id]",
            "movie": "TABLE:[movies]",
            "A Way of Life": "VALUE:[movies].[movie_title]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "Was user 39115684 a trialist when he or she rated the movie \"A Way of Life\"? A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 the user was a trialist when he rated the movie refers to user_trialist = 1;",
        "evidence": "A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 the user was a trialist when he rated the movie refers to user_trialist = 1;",
        "SQL": "SELECT T1.user_trialist FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684",
        "query": "SELECT T1.user_trialist FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684",
        "evidence_added": true,
        "question_toks": [
            "Was",
            "user",
            "39115684",
            "a",
            "trialist",
            "when",
            "he",
            "or",
            "she",
            "rated",
            "the",
            "movie",
            "\"A",
            "Way",
            "of",
            "Life\"",
            "?",
            "A",
            "Way",
            "of",
            "Life'",
            "refers",
            "to",
            "movie_title",
            ";",
            "user",
            "39115684",
            "refers",
            "to",
            "userid",
            "=",
            "39115684;\u00a0",
            "the",
            "user",
            "was",
            "a",
            "trialist",
            "when",
            "he",
            "rated",
            "the",
            "movie",
            "refers",
            "to",
            "user_trialist",
            "=",
            "1",
            ";"
        ],
        "tc_original": [
            "movies.movie_title",
            "movies.movie_id",
            "movies.movie_release_year",
            "movies.movie_url",
            "movies.movie_title_language",
            "movies.*",
            "ratings_users.user_trialist",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "ratings.movie_id",
            "ratings.user_id",
            "ratings.user_trialist",
            "ratings.critic",
            "ratings.rating_id",
            "ratings.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "user": "COLUMN:[ratings].[user_id]",
            "39115684": "VALUE:[ratings].[user_id]",
            "trialist": "COLUMN:[ratings].[user_trialist]",
            "rated": "TABLE:[ratings]",
            "movie": "TABLE:[movies]",
            "A Way of Life": "VALUE:[movies].[movie_title]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "Who was the director of the movie \"Tokyo Eyes\"\uff1f Tokyo Eyes' is movie_title, director refers to director_name;",
        "evidence": "Tokyo Eyes' is movie_title, director refers to director_name;",
        "SQL": "SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes'",
        "query": "SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes'",
        "evidence_added": true,
        "question_toks": [
            "Who",
            "was",
            "the",
            "director",
            "of",
            "the",
            "movie",
            "\"Tokyo",
            "Eyes\"\uff1f",
            "Tokyo",
            "Eyes'",
            "is",
            "movie_title",
            ",",
            "director",
            "refers",
            "to",
            "director_name",
            ";"
        ],
        "tc_original": [
            "movies.director_name",
            "movies.movie_title",
            "movies.director_id",
            "movies.movie_id",
            "movies.movie_release_year",
            "movies.*",
            "lists.user_id",
            "lists.list_id",
            "lists.list_title",
            "lists.list_movie_number",
            "lists.list_update_timestamp_utc",
            "lists.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "director": "COLUMN:[movies].[director_name]",
            "movie": "TABLE:[movies]",
            "Tokyo Eyes": "VALUE:[movies].[movie_title]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "Please provide the ID of the user with the most followers on the list. most followers refers to Max(list_followers);",
        "evidence": "most followers refers to Max(list_followers);",
        "SQL": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1",
        "query": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "provide",
            "the",
            "ID",
            "of",
            "the",
            "user",
            "with",
            "the",
            "most",
            "followers",
            "on",
            "the",
            "list",
            ".",
            "most",
            "followers",
            "refers",
            "to",
            "Max(list_followers)",
            ";"
        ],
        "tc_original": [
            "lists.list_followers",
            "lists.user_id",
            "lists.list_id",
            "lists.list_title",
            "lists.list_movie_number",
            "lists.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*",
            "movies.movie_id",
            "movies.movie_title",
            "movies.movie_release_year",
            "movies.movie_url",
            "movies.movie_title_language",
            "movies.*",
            "ratings.critic",
            "ratings.movie_id",
            "ratings.rating_id",
            "ratings.rating_url",
            "ratings.rating_score",
            "ratings.*"
        ],
        "gold_links": {
            "user id": "COLUMN:[lists].[user_id]",
            "user": "COLUMN:[lists].[user_id]",
            "id": "COLUMN:[lists].[user_id]",
            "most followers": "COLUMN:[lists].[list_followers]",
            "followers": "COLUMN:[lists].[list_followers]",
            "list": "TABLE:[lists]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "Please list the names of the movies that user 94978 scored as 5. user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5;",
        "evidence": "user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5;",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T1.user_id = 94978",
        "query": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T1.user_id = 94978",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "names",
            "of",
            "the",
            "movies",
            "that",
            "user",
            "94978",
            "scored",
            "as",
            "5",
            ".",
            "user",
            "94978",
            "refers",
            "to",
            "user_id",
            "=",
            "94978",
            ";",
            "scored",
            "as",
            "5",
            "refers",
            "to",
            "rating_score",
            "=",
            "5",
            ";"
        ],
        "tc_original": [
            "movies.movie_title",
            "movies.movie_id",
            "movies.movie_url",
            "movies.movie_release_year",
            "movies.movie_title_language",
            "movies.*",
            "ratings.rating_score",
            "ratings.movie_id",
            "ratings.user_id",
            "ratings.rating_id",
            "ratings.critic",
            "ratings.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "names": "COLUMN:[movies].[movie_title]",
            "movies": "TABLE:[movies]",
            "user 94978": "VALUE:[ratings].[user_id]",
            "scored": "COLUMN:[ratings].[rating_score]",
            "5": "VALUE:[ratings].[rating_score]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "Please list the names of the films released in 2003 among the films scored by user 2941 . released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie;",
        "evidence": "released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie;",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2003 AND T1.user_id = 2941",
        "query": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2003 AND T1.user_id = 2941",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "names",
            "of",
            "the",
            "films",
            "released",
            "in",
            "2003",
            "among",
            "the",
            "films",
            "scored",
            "by",
            "user",
            "2941",
            ".",
            "released",
            "in",
            "2003",
            "refers",
            "to",
            "movie_release_year",
            "=",
            "2003",
            ";",
            "user",
            "2941",
            "refers",
            "to",
            "user_id",
            "=",
            "2941",
            ";",
            "film",
            "refers",
            "to",
            "movie",
            ";"
        ],
        "tc_original": [
            "movies.movie_release_year",
            "movies.movie_id",
            "movies.movie_title",
            "movies.movie_url",
            "movies.movie_title_language",
            "movies.*",
            "ratings.movie_id",
            "ratings.user_id",
            "ratings.rating_score",
            "ratings.critic",
            "ratings.rating_id",
            "ratings.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "names": "COLUMN:[movies].[movie_title]",
            "films": "TABLE:[movies]",
            "film": "TABLE:[movies]",
            "released 2003": "COLUMN:[movies].[movie_release_year]",
            "2003": "VALUE:[movies].[movie_release_year]",
            "user 2941": "VALUE:[ratings].[user_id]",
            "2941": "VALUE:[ratings].[user_id]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url. user 85981819 refers to user_id = 85981819;\u00a0 first list created refers to Min (list_creation_date_utc);",
        "evidence": "user 85981819 refers to user_id = 85981819;\u00a0 first list created refers to Min (list_creation_date_utc);",
        "SQL": "SELECT T2.list_title, T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_id = 85981819 ORDER BY T2.list_creation_timestamp_utc LIMIT 1",
        "query": "SELECT T2.list_title, T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_id = 85981819 ORDER BY T2.list_creation_timestamp_utc LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "What",
            "was",
            "the",
            "title",
            "of",
            "the",
            "first",
            "list",
            "created",
            "by",
            "a",
            "user",
            "85981819",
            "?",
            "And",
            "please",
            "provide",
            "the",
            "user_avatar_image_url",
            ".",
            "user",
            "85981819",
            "refers",
            "to",
            "user_id",
            "=",
            "85981819;\u00a0",
            "first",
            "list",
            "created",
            "refers",
            "to",
            "Min",
            "(list_creation_date_utc)",
            ";"
        ],
        "tc_original": [
            "lists.list_title",
            "lists.list_creation_timestamp_utc",
            "lists.user_id",
            "lists.list_id",
            "lists.list_update_timestamp_utc",
            "lists.*",
            "lists_users.list_creation_date_utc",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.user_avatar_image_url",
            "lists_users.*",
            "movies.movie_id",
            "movies.movie_title",
            "movies.movie_release_year",
            "movies.movie_url",
            "movies.movie_title_language",
            "movies.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*"
        ],
        "gold_links": {
            "title": "COLUMN:[lists].[list_title]",
            "first list": "COLUMN:[lists].[list_creation_timestamp_utc]",
            "created": "COLUMN:[lists].[list_creation_timestamp_utc]",
            "user 85981819": "VALUE:[lists_users].[user_id]",
            "user_avatar_image_url": "COLUMN:[lists_users].[user_avatar_image_url]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "List all movies rated by user 39115684. State the title, rating date and rating score. user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc",
        "evidence": "user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc\n",
        "SQL": "SELECT T2.movie_title, T1.rating_timestamp_utc, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 39115684",
        "query": "SELECT T2.movie_title, T1.rating_timestamp_utc, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 39115684",
        "evidence_added": true,
        "question_toks": [
            "List",
            "all",
            "movies",
            "rated",
            "by",
            "user",
            "39115684",
            ".",
            "State",
            "the",
            "title",
            ",",
            "rating",
            "date",
            "and",
            "rating",
            "score",
            ".",
            "user",
            "39115684",
            "refers",
            "to",
            "user_id",
            "=",
            "39115684",
            ";",
            "title",
            "refers",
            "to",
            "movie_title",
            ";",
            "rating",
            "date",
            "refers",
            "to",
            "rating_timestamp_utc"
        ],
        "tc_original": [
            "movies.movie_title",
            "movies.movie_id",
            "movies.movie_release_year",
            "movies.movie_url",
            "movies.movie_title_language",
            "movies.*",
            "ratings.rating_score",
            "ratings.movie_id",
            "ratings.user_id",
            "ratings.rating_timestamp_utc",
            "ratings.rating_id",
            "ratings.*",
            "ratings_users.rating_date_utc",
            "ratings_users.user_id",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "movies": "TABLE:[movies]",
            "rated": "TABLE:[ratings]",
            "user 39115684": "VALUE:[ratings].[user_id]",
            "title": "COLUMN:[movies].[movie_title]",
            "rating date": "COLUMN:[ratings].[rating_timestamp_utc]",
            "rating score": "COLUMN:[ratings].[rating_score]"
        }
    },
    {
        "db_id": "movie_platform",
        "question": "What is the name of the movie that was rated recently by user 57756708? user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc)",
        "evidence": "user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc)",
        "SQL": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1",
        "query": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "movie",
            "that",
            "was",
            "rated",
            "recently",
            "by",
            "user",
            "57756708",
            "?",
            "user",
            "57756708",
            "refers",
            "to",
            "user_id",
            "=",
            "57756708",
            ";",
            "rated",
            "recently",
            "refers",
            "to",
            "MAX(rating_timestamp_utc)"
        ],
        "tc_original": [
            "movies.movie_title",
            "movies.movie_id",
            "movies.movie_url",
            "movies.movie_release_year",
            "movies.movie_title_language",
            "movies.*",
            "ratings.movie_id",
            "ratings.rating_timestamp_utc",
            "ratings.user_id",
            "ratings.critic",
            "ratings.rating_id",
            "ratings.*",
            "ratings_users.user_id",
            "ratings_users.rating_date_utc",
            "ratings_users.user_trialist",
            "ratings_users.user_subscriber",
            "ratings_users.user_avatar_image_url",
            "ratings_users.*",
            "lists_users.user_id",
            "lists_users.list_id",
            "lists_users.list_update_date_utc",
            "lists_users.list_creation_date_utc",
            "lists_users.user_trialist",
            "lists_users.*"
        ],
        "gold_links": {
            "name": "COLUMN:[movies].[movie_title]",
            "movie": "TABLE:[movies]",
            "rated": "COLUMN:[ratings].[rating_timestamp_utc]",
            "recently": "COLUMN:[ratings].[rating_timestamp_utc]",
            "user": "COLUMN:[ratings].[user_id]",
            "57756708": "VALUE:[ratings].[user_id]"
        }
    },
    {
        "db_id": "book_publishing_company",
        "question": "Name all employees who were hired before year 1990. hired before year 1990 refers to YEAR(hire_date)<1990",
        "evidence": "hired before year 1990 refers to YEAR(hire_date)<1990",
        "SQL": "SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'",
        "query": "SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'",
        "evidence_added": true,
        "question_toks": [
            "Name",
            "all",
            "employees",
            "who",
            "were",
            "hired",
            "before",
            "year",
            "1990",
            ".",
            "hired",
            "before",
            "year",
            "1990",
            "refers",
            "to",
            "YEAR(hire_date)<1990"
        ],
        "tc_original": [
            "employee.hire_date",
            "employee.emp_id",
            "employee.pub_id",
            "employee.fname",
            "employee.minit",
            "employee.*",
            "authors.phone",
            "authors.address",
            "authors.city",
            "authors.state",
            "authors.zip",
            "authors.*",
            "publishers.city",
            "publishers.state",
            "publishers.country",
            "publishers.pub_id",
            "publishers.pub_name",
            "publishers.*",
            "pub_info.logo",
            "pub_info.pub_id",
            "pub_info.pr_info",
            "pub_info.*"
        ],
        "gold_links": {
            "employees": "TABLE:[employee]",
            "hired": "COLUMN:[employee].[hire_date]",
            "1990": "VALUE:[employee].[hire_date]"
        }
    },
    {
        "db_id": "book_publishing_company",
        "question": "Among all employees, who have job level greater than 200. State the employee name and job description. job level greater than 200 refers to job_lvl>200; job description refers to job_desc",
        "evidence": "job level greater than 200 refers to job_lvl>200; job description refers to job_desc",
        "SQL": "SELECT T1.fname, T1.lname, T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl > 200",
        "query": "SELECT T1.fname, T1.lname, T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl > 200",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "all",
            "employees",
            ",",
            "who",
            "have",
            "job",
            "level",
            "greater",
            "than",
            "200",
            ".",
            "State",
            "the",
            "employee",
            "name",
            "and",
            "job",
            "description",
            ".",
            "job",
            "level",
            "greater",
            "than",
            "200",
            "refers",
            "to",
            "job_lvl>200",
            ";",
            "job",
            "description",
            "refers",
            "to",
            "job_desc"
        ],
        "tc_original": [
            "employee.job_lvl",
            "employee.fname",
            "employee.job_id",
            "employee.lname",
            "employee.emp_id",
            "employee.*",
            "jobs.job_desc",
            "jobs.job_id",
            "jobs.min_lvl",
            "jobs.max_lvl",
            "jobs.*",
            "authors.phone",
            "authors.address",
            "authors.city",
            "authors.state",
            "authors.zip",
            "authors.*",
            "titles.title",
            "titles.type",
            "titles.price",
            "titles.advance",
            "titles.royalty",
            "titles.*"
        ],
        "gold_links": {
            "employees": "TABLE:[employee]",
            "employee name": "COLUMN:[employee].[fname]",
            "name": "COLUMN:[employee].[fname]",
            "job description": "COLUMN:[jobs].[job_desc]",
            "job level": "COLUMN:[employee].[job_lvl]",
            "200": "VALUE:[employee].[job_lvl]"
        }
    },
    {
        "db_id": "book_publishing_company",
        "question": "How many books on business have the bookstores in Massachusetts ordered? Massachusetts is a state; business books refers to type = 'business'",
        "evidence": "Massachusetts is a state; business books refers to type = 'business'",
        "SQL": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'",
        "query": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "books",
            "on",
            "business",
            "have",
            "the",
            "bookstores",
            "in",
            "Massachusetts",
            "ordered",
            "?",
            "Massachusetts",
            "is",
            "a",
            "state",
            ";",
            "business",
            "books",
            "refers",
            "to",
            "type",
            "=",
            "'business'"
        ],
        "tc_original": [
            "stores.stor_id",
            "stores.state",
            "stores.city",
            "stores.zip",
            "stores.stor_name",
            "stores.*",
            "titles.type",
            "titles.title_id",
            "titles.title",
            "titles.pub_id",
            "titles.price",
            "titles.*",
            "sales.stor_id",
            "sales.title_id",
            "sales.ord_num",
            "sales.ord_date",
            "sales.qty",
            "sales.*",
            "roysched.royalty",
            "roysched.title_id",
            "roysched.lorange",
            "roysched.hirange",
            "roysched.*"
        ],
        "gold_links": {
            "books": "TABLE:[titles]",
            "business": "VALUE:[titles].[type]",
            "bookstores": "TABLE:[stores]",
            "Massachusetts": "VALUE:[stores].[state]",
            "ordered": "COLUMN:[sales].[qty]"
        }
    },
    {
        "db_id": "book_publishing_company",
        "question": "How many levels are there left for Diego W Roel to reach if he/she could go to the max level for his/her position? max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl)",
        "evidence": "max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl)",
        "SQL": "SELECT T2.max_lvl - T1.job_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Diego' AND T1.minit = 'W' AND T1.lname = 'Roel'",
        "query": "SELECT T2.max_lvl - T1.job_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Diego' AND T1.minit = 'W' AND T1.lname = 'Roel'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "levels",
            "are",
            "there",
            "left",
            "for",
            "Diego",
            "W",
            "Roel",
            "to",
            "reach",
            "if",
            "he/she",
            "could",
            "go",
            "to",
            "the",
            "max",
            "level",
            "for",
            "his/her",
            "position",
            "?",
            "max",
            "level",
            "for",
            "his",
            "position",
            "refers",
            "to",
            "max_lvl",
            ";",
            "job",
            "level",
            "refers",
            "to",
            "job_lvl",
            ";",
            "level",
            "left",
            "to",
            "reach",
            "the",
            "max",
            "=",
            "SUBTRACT(max_lvl",
            ",",
            "job_lvl)"
        ],
        "tc_original": [
            "employee.lname",
            "employee.fname",
            "employee.job_lvl",
            "employee.job_id",
            "employee.emp_id",
            "employee.*",
            "jobs.job_id",
            "jobs.max_lvl",
            "jobs.min_lvl",
            "jobs.job_desc",
            "jobs.*",
            "authors.phone",
            "authors.address",
            "authors.city",
            "authors.state",
            "authors.zip",
            "authors.*",
            "titles.title",
            "titles.type",
            "titles.price",
            "titles.advance",
            "titles.royalty",
            "titles.*"
        ],
        "gold_links": {
            "levels": "COLUMN:[employee].[job_lvl]",
            "max level": "COLUMN:[jobs].[max_lvl]",
            "job level": "COLUMN:[employee].[job_lvl]",
            "Diego": "COLUMN:[employee].[fname]",
            "Roel": "COLUMN:[employee].[lname]",
            "position": "COLUMN:[jobs].[job_id]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL? full names = first, middle, last; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; MICHAL refers to server = 'MICHAL';",
        "evidence": "full names = first, middle, last; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; MICHAL refers to server = 'MICHAL';",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.`Date received` = '2017-03-27' AND T2.server = 'MICHAL'",
        "query": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.`Date received` = '2017-03-27' AND T2.server = 'MICHAL'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "full",
            "name",
            "of",
            "the",
            "client",
            "whose",
            "complaint",
            "on",
            "2017/3/27",
            "was",
            "received",
            "by",
            "MICHAL",
            "?",
            "full",
            "names",
            "=",
            "first",
            ",",
            "middle",
            ",",
            "last",
            ";",
            "on",
            "2017/3/27",
            "refers",
            "to",
            "\"Date",
            "received\"",
            "=",
            "'2017-03-27'",
            ";",
            "MICHAL",
            "refers",
            "to",
            "server",
            "=",
            "'MICHAL'",
            ";"
        ],
        "tc_original": [
            "client.client_id",
            "client.first",
            "client.last",
            "client.middle",
            "client.sex",
            "client.*",
            "callcenterlogs.date received",
            "callcenterlogs.server",
            "callcenterlogs.rand client",
            "callcenterlogs.complaint id",
            "callcenterlogs.priority",
            "callcenterlogs.*",
            "events.product",
            "events.issue",
            "events.tags",
            "events.complaint id",
            "events.client_id",
            "events.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "full name": "TABLE:[client]",
            "first": "COLUMN:[client].[first]",
            "middle": "COLUMN:[client].[middle]",
            "last": "COLUMN:[client].[last]",
            "client": "TABLE:[client]",
            "complaint": "TABLE:[callcenterlogs]",
            "2017/3/27": "VALUE:[callcenterlogs].[date received]",
            "Date received": "COLUMN:[callcenterlogs].[date received]",
            "MICHAL": "VALUE:[callcenterlogs].[server]",
            "server": "COLUMN:[callcenterlogs].[server]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "For how long did the complaint filed on 2017/3/27 by Rachel Hicks last? how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to \"Date received\" = '2017-03-27';",
        "evidence": "how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to \"Date received\" = '2017-03-27';",
        "SQL": "SELECT T2.ser_time FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first = 'Rachel' AND T1.last = 'Hicks' AND T2.`Date received` = '2017-03-27'",
        "query": "SELECT T2.ser_time FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first = 'Rachel' AND T1.last = 'Hicks' AND T2.`Date received` = '2017-03-27'",
        "evidence_added": true,
        "question_toks": [
            "For",
            "how",
            "long",
            "did",
            "the",
            "complaint",
            "filed",
            "on",
            "2017/3/27",
            "by",
            "Rachel",
            "Hicks",
            "last",
            "?",
            "how",
            "long",
            "did",
            "the",
            "complaint",
            "filed",
            "last",
            "refers",
            "to",
            "ser_time",
            ";",
            "on",
            "2017/3/27",
            "refers",
            "to",
            "\"Date",
            "received\"",
            "=",
            "'2017-03-27'",
            ";"
        ],
        "tc_original": [
            "client.client_id",
            "client.first",
            "client.last",
            "client.middle",
            "client.phone",
            "client.*",
            "callcenterlogs.ser_time",
            "callcenterlogs.date received",
            "callcenterlogs.complaint id",
            "callcenterlogs.rand client",
            "callcenterlogs.call_id",
            "callcenterlogs.*",
            "events.client_id",
            "events.complaint id",
            "events.product",
            "events.issue",
            "events.tags",
            "events.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "how long": "COLUMN:[callcenterlogs].[ser_time]",
            "complaint": "TABLE:[callcenterlogs]",
            "Rachel": "COLUMN:[client].[first]",
            "Hicks": "COLUMN:[client].[last]",
            "2017/3/27": "VALUE:[callcenterlogs].[date received]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What was the serve time for the complaint call from client \"C00007127\" on 2017/2/22? serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to \"Date received\" = '2017-02-22';",
        "evidence": "serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to \"Date received\" = '2017-02-22';",
        "SQL": "SELECT T1.ser_time FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.Client_ID = 'C00007127' AND T1.`Date received` = '2017-02-22'",
        "query": "SELECT T1.ser_time FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T2.Client_ID = 'C00007127' AND T1.`Date received` = '2017-02-22'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "was",
            "the",
            "serve",
            "time",
            "for",
            "the",
            "complaint",
            "call",
            "from",
            "client",
            "\"C00007127\"",
            "on",
            "2017/2/22",
            "?",
            "serve",
            "time",
            "refers",
            "to",
            "ser_time",
            ";",
            "longer",
            "ser_time",
            "means",
            "more",
            "verbose",
            "or",
            "longer",
            "complaint",
            ";",
            "on",
            "2017/2/22",
            "refers",
            "to",
            "\"Date",
            "received\"",
            "=",
            "'2017-02-22'",
            ";"
        ],
        "tc_original": [
            "callcenterlogs.ser_time",
            "callcenterlogs.date received",
            "callcenterlogs.rand client",
            "callcenterlogs.complaint id",
            "callcenterlogs.call_id",
            "callcenterlogs.*",
            "client.sex",
            "client.day",
            "client.month",
            "client.year",
            "client.age",
            "client.*",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.date",
            "reviews.district_id",
            "reviews.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*"
        ],
        "gold_links": {
            "serve time": "COLUMN:[callcenterlogs].[ser_time]",
            "complaint call": "TABLE:[callcenterlogs]",
            "client": "TABLE:[client]",
            "C00007127": "VALUE:[client].[client_id]",
            "2017/2/22": "VALUE:[callcenterlogs].[date received]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What was the detailed issue did Mr Gunner Omer Fuller complain about? detailed issue refers to Sub-issue; Mr refers to sex = 'Male';",
        "evidence": "detailed issue refers to Sub-issue; Mr refers to sex = 'Male';",
        "SQL": "SELECT T2.`Sub-issue` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'",
        "query": "SELECT T2.`Sub-issue` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "was",
            "the",
            "detailed",
            "issue",
            "did",
            "Mr",
            "Gunner",
            "Omer",
            "Fuller",
            "complain",
            "about",
            "?",
            "detailed",
            "issue",
            "refers",
            "to",
            "Sub-issue",
            ";",
            "Mr",
            "refers",
            "to",
            "sex",
            "=",
            "'Male'",
            ";"
        ],
        "tc_original": [
            "client.sex",
            "client.first",
            "client.client_id",
            "client.last",
            "client.middle",
            "client.*",
            "events.client_id",
            "events.sub-issue",
            "events.complaint id",
            "events.issue",
            "events.product",
            "events.*",
            "callcenterlogs.complaint id",
            "callcenterlogs.rand client",
            "callcenterlogs.call_id",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "detailed issue": "COLUMN:[events].[sub-issue]",
            "Sub-issue": "COLUMN:[events].[sub-issue]",
            "Gunner": "COLUMN:[client].[first]",
            "Omer": "COLUMN:[client].[middle]",
            "Fuller": "COLUMN:[client].[last]",
            "Mr": "COLUMN:[client].[sex]",
            "Male": "VALUE:[client].[sex]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "Which product received a review from Indianapolis on 2016/10/7? Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04';",
        "evidence": "Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04';",
        "SQL": "SELECT T1.Product FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' AND T1.Date = '2016-10-07'",
        "query": "SELECT T1.Product FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' AND T1.Date = '2016-10-07'",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "product",
            "received",
            "a",
            "review",
            "from",
            "Indianapolis",
            "on",
            "2016/10/7",
            "?",
            "Indianapolis",
            "refers",
            "to",
            "state",
            "=",
            "'Indianapolis'",
            ";",
            "on",
            "2016/10/7",
            "refers",
            "to",
            "Date",
            "=",
            "'2013-04-04'",
            ";"
        ],
        "tc_original": [
            "reviews.district_id",
            "reviews.date",
            "reviews.product",
            "reviews.reviews",
            "reviews.stars",
            "reviews.*",
            "district.city",
            "district.district_id",
            "district.state_abbrev",
            "district.division",
            "district.*",
            "state.state",
            "state.statecode",
            "state.region",
            "state.*",
            "client.district_id",
            "client.sex",
            "client.day",
            "client.month",
            "client.year",
            "client.*"
        ],
        "gold_links": {
            "product": "COLUMN:[reviews].[product]",
            "review": "TABLE:[reviews]",
            "Indianapolis": "COLUMN:[district].[city]",
            "2016/10/7": "VALUE:[reviews].[date]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What is the email id of clients whose calls were hung? email id refers to email; calls were hung refers to outcome = 'Hang';",
        "evidence": "email id refers to email; calls were hung refers to outcome = 'Hang';",
        "SQL": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.outcome = 'HANG'",
        "query": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.outcome = 'HANG'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "email",
            "id",
            "of",
            "clients",
            "whose",
            "calls",
            "were",
            "hung",
            "?",
            "email",
            "id",
            "refers",
            "to",
            "email",
            ";",
            "calls",
            "were",
            "hung",
            "refers",
            "to",
            "outcome",
            "=",
            "'Hang'",
            ";"
        ],
        "tc_original": [
            "client.client_id",
            "client.email",
            "client.sex",
            "client.day",
            "client.month",
            "client.*",
            "callcenterlogs.outcome",
            "callcenterlogs.rand client",
            "callcenterlogs.call_id",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*"
        ],
        "gold_links": {
            "email": "COLUMN:[client].[email]",
            "clients": "TABLE:[client]",
            "calls": "TABLE:[callcenterlogs]",
            "hung": "VALUE:[callcenterlogs].[outcome]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "How many male clients are from the state of Massachusetts? male refers to sex = 'Male';",
        "evidence": "male refers to sex = 'Male';",
        "SQL": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'",
        "query": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "male",
            "clients",
            "are",
            "from",
            "the",
            "state",
            "of",
            "Massachusetts",
            "?",
            "male",
            "refers",
            "to",
            "sex",
            "=",
            "'Male'",
            ";"
        ],
        "tc_original": [
            "state.state",
            "state.statecode",
            "state.region",
            "state.*",
            "client.sex",
            "client.state",
            "client.client_id",
            "client.middle",
            "client.day",
            "client.*",
            "district.city",
            "district.division",
            "district.district_id",
            "district.state_abbrev",
            "district.*",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.*"
        ],
        "gold_links": {
            "male": "VALUE:[client].[sex]",
            "clients": "TABLE:[client]",
            "state": "COLUMN:[state].[state]",
            "Massachusetts": "VALUE:[state].[state]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What is the average age of Norwalk clients? average age = AVG(age); Norwalk refers to city = 'Norwalk';",
        "evidence": "average age = AVG(age); Norwalk refers to city = 'Norwalk';",
        "SQL": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'",
        "query": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "of",
            "Norwalk",
            "clients",
            "?",
            "average",
            "age",
            "=",
            "AVG(age)",
            ";",
            "Norwalk",
            "refers",
            "to",
            "city",
            "=",
            "'Norwalk'",
            ";"
        ],
        "tc_original": [
            "client.city",
            "client.age",
            "client.district_id",
            "client.client_id",
            "client.sex",
            "client.*",
            "district.city",
            "district.district_id",
            "district.state_abbrev",
            "district.division",
            "district.*",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "average age": "COLUMN:[client].[age]",
            "age": "COLUMN:[client].[age]",
            "Norwalk": "VALUE:[district].[city]",
            "clients": "TABLE:[client]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What are the products that people who were born after 2005 complain about? year > 2005;",
        "evidence": "year > 2005;",
        "SQL": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year > 2005",
        "query": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year > 2005",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "products",
            "that",
            "people",
            "who",
            "were",
            "born",
            "after",
            "2005",
            "complain",
            "about",
            "?",
            "year",
            ">",
            "2005",
            ";"
        ],
        "tc_original": [
            "client.year",
            "client.client_id",
            "client.age",
            "client.phone",
            "client.sex",
            "client.*",
            "events.product",
            "events.client_id",
            "events.sub-product",
            "events.complaint id",
            "events.issue",
            "events.*",
            "reviews.product",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.district_id",
            "reviews.*",
            "callcenterlogs.complaint id",
            "callcenterlogs.rand client",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.*"
        ],
        "gold_links": {
            "products": "COLUMN:[events].[product]",
            "people": "TABLE:[client]",
            "born": "COLUMN:[client].[year]",
            "after 2005": "COLUMN:[client].[year]",
            "complain": "TABLE:[events]",
            "2005": "VALUE:[client].[year]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What was the issue that the client with the longest server time faced? longest server time refers to MAX(ser_time);",
        "evidence": "longest server time refers to MAX(ser_time);",
        "SQL": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )",
        "query": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )",
        "evidence_added": true,
        "question_toks": [
            "What",
            "was",
            "the",
            "issue",
            "that",
            "the",
            "client",
            "with",
            "the",
            "longest",
            "server",
            "time",
            "faced",
            "?",
            "longest",
            "server",
            "time",
            "refers",
            "to",
            "MAX(ser_time)",
            ";"
        ],
        "tc_original": [
            "callcenterlogs.ser_time",
            "callcenterlogs.rand client",
            "callcenterlogs.complaint id",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.*",
            "client.client_id",
            "client.first",
            "client.sex",
            "client.day",
            "client.month",
            "client.*",
            "events.client_id",
            "events.complaint id",
            "events.issue",
            "events.product",
            "events.sub-issue",
            "events.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "issue": "COLUMN:[events].[issue]",
            "client": "TABLE:[client]",
            "server time": "COLUMN:[callcenterlogs].[ser_time]",
            "longest server time": "COLUMN:[callcenterlogs].[ser_time]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "Please list any two clients with their full names who have been tagged as \"Older American\" by the company without seeking their permission. full names = first, middle, last; without seeking their permission refers to \"Consumer consent provided?\" in (null, 'N/A' or 'empty');",
        "evidence": "full names = first, middle, last; without seeking their permission refers to \"Consumer consent provided?\" in (null, 'N/A' or 'empty');",
        "SQL": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.`Consumer consent provided?` IN (NULL, 'N/A', '') LIMIT 2",
        "query": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.`Consumer consent provided?` IN (NULL, 'N/A', '') LIMIT 2",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "any",
            "two",
            "clients",
            "with",
            "their",
            "full",
            "names",
            "who",
            "have",
            "been",
            "tagged",
            "as",
            "\"Older",
            "American\"",
            "by",
            "the",
            "company",
            "without",
            "seeking",
            "their",
            "permission",
            ".",
            "full",
            "names",
            "=",
            "first",
            ",",
            "middle",
            ",",
            "last",
            ";",
            "without",
            "seeking",
            "their",
            "permission",
            "refers",
            "to",
            "\"Consumer",
            "consent",
            "provided?\"",
            "in",
            "(null",
            ",",
            "'N/A'",
            "or",
            "'empty')",
            ";"
        ],
        "tc_original": [
            "client.client_id",
            "client.age",
            "client.first",
            "client.middle",
            "client.last",
            "client.*",
            "events.tags",
            "events.client_id",
            "events.consumer consent provided?",
            "events.product",
            "events.sub-product",
            "events.*",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "clients": "TABLE:[client]",
            "full names": "COLUMN:[client].[first]",
            "first": "COLUMN:[client].[first]",
            "middle": "COLUMN:[client].[middle]",
            "last": "COLUMN:[client].[last]",
            "older american": "VALUE:[events].[tags]",
            "tagged": "COLUMN:[events].[tags]",
            "consumer consent provided": "COLUMN:[events].[consumer consent provided?]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "List down the email of client whose complaint is type \"PS\".",
        "evidence": "",
        "SQL": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'PS'",
        "query": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'PS'",
        "question_toks": [
            "List",
            "down",
            "the",
            "email",
            "of",
            "client",
            "whose",
            "complaint",
            "is",
            "type",
            "\"PS\"",
            "."
        ],
        "tc_original": [
            "client.client_id",
            "client.email",
            "client.middle",
            "client.sex",
            "client.day",
            "client.*",
            "callcenterlogs.type",
            "callcenterlogs.rand client",
            "callcenterlogs.complaint id",
            "callcenterlogs.priority",
            "callcenterlogs.outcome",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*"
        ],
        "gold_links": {
            "email": "COLUMN:[client].[email]",
            "client": "TABLE:[client]",
            "complaint": "TABLE:[callcenterlogs]",
            "type": "COLUMN:[callcenterlogs].[type]",
            "PS": "VALUE:[callcenterlogs].[type]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What are the complaint id of client who were born in 1931? in 1931 refers to year = 1931",
        "evidence": "in 1931 refers to year = 1931",
        "SQL": "SELECT T2.`Complaint ID` FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.year = 1931",
        "query": "SELECT T2.`Complaint ID` FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.year = 1931",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "complaint",
            "id",
            "of",
            "client",
            "who",
            "were",
            "born",
            "in",
            "1931",
            "?",
            "in",
            "1931",
            "refers",
            "to",
            "year",
            "=",
            "1931"
        ],
        "tc_original": [
            "client.year",
            "client.client_id",
            "client.age",
            "client.sex",
            "client.day",
            "client.*",
            "events.client_id",
            "events.complaint id",
            "events.product",
            "events.issue",
            "events.tags",
            "events.*",
            "callcenterlogs.complaint id",
            "callcenterlogs.rand client",
            "callcenterlogs.call_id",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "complaint id": "COLUMN:[callcenterlogs].[complaint id]",
            "client": "TABLE:[client]",
            "1931": "VALUE:[client].[year]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "Write down the call id of clients whose first name start with alphabet \"B\". first name start with alphabet \"B\" refers to first like 'B%'",
        "evidence": "first name start with alphabet \"B\" refers to first like 'B%'",
        "SQL": "SELECT T2.call_id FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first LIKE 'B%'",
        "query": "SELECT T2.call_id FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T1.first LIKE 'B%'",
        "evidence_added": true,
        "question_toks": [
            "Write",
            "down",
            "the",
            "call",
            "id",
            "of",
            "clients",
            "whose",
            "first",
            "name",
            "start",
            "with",
            "alphabet",
            "\"B\"",
            ".",
            "first",
            "name",
            "start",
            "with",
            "alphabet",
            "\"B\"",
            "refers",
            "to",
            "first",
            "like",
            "'B%'"
        ],
        "tc_original": [
            "client.client_id",
            "client.first",
            "client.sex",
            "client.day",
            "client.month",
            "client.*",
            "callcenterlogs.call_id",
            "callcenterlogs.rand client",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "call id": "COLUMN:[callcenterlogs].[call_id]",
            "clients": "TABLE:[client]",
            "first name": "COLUMN:[client].[first]",
            "alphabet": "COLUMN:[client].[first]",
            "B": "VALUE:[client].[first]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What is the average age of clients whose complaint type is \"TT\"? average age = avg(age where type = 'TT')",
        "evidence": "average age = avg(age where type = 'TT')",
        "SQL": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'TT'",
        "query": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.`rand client` WHERE T2.type = 'TT'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "of",
            "clients",
            "whose",
            "complaint",
            "type",
            "is",
            "\"TT\"",
            "?",
            "average",
            "age",
            "=",
            "avg(age",
            "where",
            "type",
            "=",
            "'TT')"
        ],
        "tc_original": [
            "callcenterlogs.type",
            "callcenterlogs.rand client",
            "callcenterlogs.complaint id",
            "callcenterlogs.priority",
            "callcenterlogs.outcome",
            "callcenterlogs.*",
            "client.client_id",
            "client.age",
            "client.middle",
            "client.sex",
            "client.day",
            "client.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*"
        ],
        "gold_links": {
            "average age": "COLUMN:[client].[age]",
            "clients": "TABLE:[client]",
            "complaint type": "COLUMN:[callcenterlogs].[type]",
            "TT": "VALUE:[callcenterlogs].[type]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "Write the complaint ID, call ID, and final phone number of complaints through AVIDAN server from 1/1/2014 to 12/30/2014. final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30'",
        "evidence": "final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30'",
        "SQL": "SELECT `Complaint ID`, call_id, phonefinal FROM callcenterlogs WHERE strftime('%Y', `Date received`) = '2014' AND server = 'AVIDAN'",
        "query": "SELECT `Complaint ID`, call_id, phonefinal FROM callcenterlogs WHERE strftime('%Y', `Date received`) = '2014' AND server = 'AVIDAN'",
        "evidence_added": true,
        "question_toks": [
            "Write",
            "the",
            "complaint",
            "ID",
            ",",
            "call",
            "ID",
            ",",
            "and",
            "final",
            "phone",
            "number",
            "of",
            "complaints",
            "through",
            "AVIDAN",
            "server",
            "from",
            "1/1/2014",
            "to",
            "12/30/2014",
            ".",
            "final",
            "phone",
            "number",
            "refers",
            "to",
            "phonefinal",
            ";",
            "from",
            "1/1/2014",
            "to",
            "12/30/2014",
            "refers",
            "to",
            "Date",
            "received",
            "between",
            "'2014-01-01'",
            "and",
            "'2014-12-30'"
        ],
        "tc_original": [
            "callcenterlogs.phonefinal",
            "callcenterlogs.complaint id",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.call_id",
            "callcenterlogs.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*",
            "client.sex",
            "client.day",
            "client.month",
            "client.year",
            "client.age",
            "client.*",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.date",
            "reviews.district_id",
            "reviews.*"
        ],
        "gold_links": {
            "complaint id": "COLUMN:[callcenterlogs].[complaint id]",
            "call id": "COLUMN:[callcenterlogs].[call_id]",
            "final phone number": "COLUMN:[callcenterlogs].[phonefinal]",
            "AVIDAN": "VALUE:[callcenterlogs].[server]",
            "server": "COLUMN:[callcenterlogs].[server]",
            "1/1/2014": "VALUE:[callcenterlogs].[date received]",
            "12/30/2014": "VALUE:[callcenterlogs].[date received]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "Give me the full birthdate, email and phone number of the youngest client in Indianapolis . full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis'",
        "evidence": "full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis'",
        "SQL": "SELECT T1.year, T1.month, T1.day, T1.email, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' ORDER BY T1.year DESC, T1.month DESC, T1.day DESC LIMIT 1",
        "query": "SELECT T1.year, T1.month, T1.day, T1.email, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' ORDER BY T1.year DESC, T1.month DESC, T1.day DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Give",
            "me",
            "the",
            "full",
            "birthdate",
            ",",
            "email",
            "and",
            "phone",
            "number",
            "of",
            "the",
            "youngest",
            "client",
            "in",
            "Indianapolis",
            ".",
            "full",
            "birthdate",
            "=",
            "year",
            ",",
            "month",
            ",",
            "day",
            ";",
            "youngest",
            "refers",
            "to",
            "max(year",
            ",",
            "month",
            ",",
            "day)",
            ";",
            "in",
            "Indianapolis",
            "refers",
            "to",
            "city",
            "=",
            "'Indianapolis'"
        ],
        "tc_original": [
            "client.age",
            "client.city",
            "client.email",
            "client.year",
            "client.phone",
            "client.*",
            "district.city",
            "district.district_id",
            "district.state_abbrev",
            "district.division",
            "district.*",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*"
        ],
        "gold_links": {
            "full birthdate": "COLUMN:[client].[year]",
            "birthdate": "COLUMN:[client].[year]",
            "year": "COLUMN:[client].[year]",
            "email": "COLUMN:[client].[email]",
            "phone number": "COLUMN:[client].[phone]",
            "phone": "COLUMN:[client].[phone]",
            "youngest": "COLUMN:[client].[year]",
            "client": "TABLE:[client]",
            "Indianapolis": "VALUE:[district].[city]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What is the oldest age of male clients? oldest age refers to max(age); male refers to sex = 'Male'",
        "evidence": "oldest age refers to max(age); male refers to sex = 'Male'",
        "SQL": "SELECT MAX(age) FROM client WHERE sex = 'Male'",
        "query": "SELECT MAX(age) FROM client WHERE sex = 'Male'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "oldest",
            "age",
            "of",
            "male",
            "clients",
            "?",
            "oldest",
            "age",
            "refers",
            "to",
            "max(age)",
            ";",
            "male",
            "refers",
            "to",
            "sex",
            "=",
            "'Male'"
        ],
        "tc_original": [
            "client.sex",
            "client.age",
            "client.middle",
            "client.day",
            "client.month",
            "client.*",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*"
        ],
        "gold_links": {
            "oldest age": "COLUMN:[client].[age]",
            "male": "VALUE:[client].[sex]",
            "clients": "TABLE:[client]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "What is the average age of clients in South Atlantic? in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age)",
        "evidence": "in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age)",
        "SQL": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'",
        "query": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "of",
            "clients",
            "in",
            "South",
            "Atlantic",
            "?",
            "in",
            "South",
            "Atlantic",
            "refers",
            "to",
            "division",
            "=",
            "'South",
            "Atlantic'",
            ";",
            "average",
            "age",
            "refers",
            "to",
            "avg(age)"
        ],
        "tc_original": [
            "district.division",
            "district.district_id",
            "district.state_abbrev",
            "district.city",
            "district.*",
            "client.district_id",
            "client.age",
            "client.state",
            "client.client_id",
            "client.sex",
            "client.*",
            "state.state",
            "state.region",
            "state.statecode",
            "state.*",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.*"
        ],
        "gold_links": {
            "average age": "COLUMN:[client].[age]",
            "clients": "TABLE:[client]",
            "South Atlantic": "VALUE:[district].[division]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "Which state has the most cities? state refers to state_abbrev; most cities refers to max(count(city))",
        "evidence": "state refers to state_abbrev; most cities refers to max(count(city))",
        "SQL": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1",
        "query": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "state",
            "has",
            "the",
            "most",
            "cities",
            "?",
            "state",
            "refers",
            "to",
            "state_abbrev",
            ";",
            "most",
            "cities",
            "refers",
            "to",
            "max(count(city))"
        ],
        "tc_original": [
            "state.state",
            "state.statecode",
            "state.region",
            "state.*",
            "district.state_abbrev",
            "district.city",
            "district.district_id",
            "district.division",
            "district.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.outcome",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.*"
        ],
        "gold_links": {
            "state": "COLUMN:[district].[state_abbrev]",
            "cities": "COLUMN:[district].[city]"
        }
    },
    {
        "db_id": "retail_complains",
        "question": "List the products involved in the complaints received on March 2017 via TOVA server. on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%'",
        "evidence": "on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%'",
        "SQL": "SELECT DISTINCT T2.Product FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.server = 'TOVA' AND T2.`Date received` LIKE '2017-03%'",
        "query": "SELECT DISTINCT T2.Product FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.`Complaint ID` = T2.`Complaint ID` WHERE T1.server = 'TOVA' AND T2.`Date received` LIKE '2017-03%'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "the",
            "products",
            "involved",
            "in",
            "the",
            "complaints",
            "received",
            "on",
            "March",
            "2017",
            "via",
            "TOVA",
            "server",
            ".",
            "on",
            "March",
            "2017",
            "refers",
            "to",
            "Date",
            "received",
            "LIKE",
            "'%03%'",
            "AND",
            "Date",
            "received",
            "LIKE",
            "'2017%'"
        ],
        "tc_original": [
            "events.date received",
            "events.product",
            "events.complaint id",
            "events.sub-product",
            "events.consumer complaint narrative",
            "events.*",
            "callcenterlogs.server",
            "callcenterlogs.date received",
            "callcenterlogs.complaint id",
            "callcenterlogs.priority",
            "callcenterlogs.type",
            "callcenterlogs.*",
            "reviews.date",
            "reviews.stars",
            "reviews.reviews",
            "reviews.product",
            "reviews.district_id",
            "reviews.*",
            "client.sex",
            "client.day",
            "client.month",
            "client.year",
            "client.age",
            "client.*"
        ],
        "gold_links": {
            "products": "COLUMN:[events].[product]",
            "complaints": "TABLE:[callcenterlogs]",
            "received": "COLUMN:[callcenterlogs].[date received]",
            "March 2017": "VALUE:[events].[date received]",
            "TOVA": "VALUE:[callcenterlogs].[server]",
            "server": "COLUMN:[callcenterlogs].[server]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Please list the names of the production company of the movie \"Four Rooms\". names of the production company refers to movie_company; movie \"Four Rooms\" refers to title = 'Four Rooms'",
        "evidence": "names of the production company refers to movie_company; movie \"Four Rooms\" refers to title = 'Four Rooms'",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'",
        "query": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "names",
            "of",
            "the",
            "production",
            "company",
            "of",
            "the",
            "movie",
            "\"Four",
            "Rooms\"",
            ".",
            "names",
            "of",
            "the",
            "production",
            "company",
            "refers",
            "to",
            "movie_company",
            ";",
            "movie",
            "\"Four",
            "Rooms\"",
            "refers",
            "to",
            "title",
            "=",
            "'Four",
            "Rooms'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "production_company.company_name",
            "production_company.company_id",
            "production_company.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "names": "COLUMN:[production_company].[company_name]",
            "production company": "TABLE:[production_company]",
            "movie": "TABLE:[movie]",
            "Four Rooms": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\". names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence": "names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'",
        "query": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "names",
            "of",
            "all",
            "the",
            "crew",
            "members",
            "of",
            "the",
            "movie",
            "\"Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World's",
            "End\"",
            ".",
            "names",
            "refers",
            "to",
            "person_name",
            ";",
            "\"Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World's",
            "End\"",
            "refers",
            "to",
            "title",
            "=",
            "'Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World''s",
            "End'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.job",
            "movie_crew.*",
            "person.person_name",
            "person.person_id",
            "person.*",
            "department.department_name",
            "department.department_id",
            "department.*"
        ],
        "gold_links": {
            "names": "COLUMN:[person].[person_name]",
            "crew members": "TABLE:[movie_crew]",
            "movie": "TABLE:[movie]",
            "Pirates of the Caribbean: At World's End": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0? director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage",
        "evidence": "director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "query": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "the",
            "movie",
            "in",
            "which",
            "Dariusz",
            "Wolski",
            "works",
            "as",
            "the",
            "director",
            "of",
            "photography",
            ",",
            "what",
            "is",
            "the",
            "percentage",
            "of",
            "those",
            "movie",
            "whose",
            "vote",
            "average",
            "is",
            "over",
            "5.0",
            "?",
            "director",
            "of",
            "photography",
            "refers",
            "to",
            "job",
            "=",
            "'Director",
            "of",
            "Photography'",
            ";",
            "vote",
            "average",
            "is",
            "over",
            "8.0",
            "refers",
            "to",
            "vote_average",
            ">",
            "5",
            ";",
            "percentage",
            "=",
            "divide(sum(movie_id)",
            "when",
            "vote_average",
            ">",
            "5",
            ",",
            "count(movie_id))",
            "as",
            "percentage"
        ],
        "tc_original": [
            "movie.vote_average",
            "movie.movie_id",
            "movie.vote_count",
            "movie.title",
            "movie.budget",
            "movie.*",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.job",
            "movie_crew.department_id",
            "movie_crew.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "language_role.role_id",
            "language_role.language_role",
            "language_role.*"
        ],
        "gold_links": {
            "movie": "TABLE:[movie]",
            "Dariusz Wolski": "COLUMN:[person].[person_name]",
            "director of photography": "COLUMN:[movie_crew].[job]",
            "vote average": "COLUMN:[movie].[vote_average]",
            "5.0": "VALUE:[movie].[vote_average]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "For the movie \"Land of the Dead\", who is its director? \"Land of the Dead\" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director'",
        "evidence": "\"Land of the Dead\" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director'",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'",
        "query": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'",
        "evidence_added": true,
        "question_toks": [
            "For",
            "the",
            "movie",
            "\"Land",
            "of",
            "the",
            "Dead\"",
            ",",
            "who",
            "is",
            "its",
            "director",
            "?",
            "\"Land",
            "of",
            "the",
            "Dead\"",
            "refers",
            "to",
            "title",
            "=",
            "'Land",
            "of",
            "the",
            "Dead'",
            ";",
            "director",
            "refers",
            "to",
            "person_name",
            "where",
            "job",
            "=",
            "'Director'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_crew.movie_id",
            "movie_crew.job",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*",
            "person.person_name",
            "person.person_id",
            "person.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "movie": "TABLE:[movie]",
            "Land of the Dead": "VALUE:[movie].[title]",
            "director": "COLUMN:[person].[person_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Provide the most used keyword in the movies. most used keyword refers to keyword_name where max(count(keyword_name))",
        "evidence": "most used keyword refers to keyword_name where max(count(keyword_name))",
        "SQL": "SELECT T1.keyword_name FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T1.keyword_name ORDER BY COUNT(T1.keyword_name) DESC LIMIT 1",
        "query": "SELECT T1.keyword_name FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T1.keyword_name ORDER BY COUNT(T1.keyword_name) DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Provide",
            "the",
            "most",
            "used",
            "keyword",
            "in",
            "the",
            "movies",
            ".",
            "most",
            "used",
            "keyword",
            "refers",
            "to",
            "keyword_name",
            "where",
            "max(count(keyword_name))"
        ],
        "tc_original": [
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*",
            "movie_keywords.keyword_id",
            "movie_keywords.movie_id",
            "movie_keywords.*",
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "most used keyword": "COLUMN:[keyword].[keyword_name]",
            "keyword": "COLUMN:[keyword].[keyword_name]",
            "movies": "TABLE:[movie]",
            "keyword_name": "COLUMN:[keyword].[keyword_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the production company of the movie \"Crazy Heart\"? movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name",
        "evidence": "movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'",
        "query": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "production",
            "company",
            "of",
            "the",
            "movie",
            "\"Crazy",
            "Heart\"",
            "?",
            "movie",
            "\"Crazy",
            "Heart\"",
            "refers",
            "to",
            "title",
            "=",
            "'Crazy",
            "Heart'",
            ";",
            "production",
            "company",
            "refers",
            "to",
            "company_name"
        ],
        "tc_original": [
            "production_company.company_name",
            "production_company.company_id",
            "production_company.*",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "production company": "COLUMN:[production_company].[company_name]",
            "company": "COLUMN:[production_company].[company_name]",
            "movie": "TABLE:[movie]",
            "Crazy Heart": "VALUE:[movie].[title]",
            "title": "COLUMN:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the title of the first crime movie ever released? first crime movie ever released refers to min(release_date) and genre_name = 'Crime'",
        "evidence": "first crime movie ever released refers to min(release_date) and genre_name = 'Crime'",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1",
        "query": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "title",
            "of",
            "the",
            "first",
            "crime",
            "movie",
            "ever",
            "released",
            "?",
            "first",
            "crime",
            "movie",
            "ever",
            "released",
            "refers",
            "to",
            "min(release_date)",
            "and",
            "genre_name",
            "=",
            "'Crime'"
        ],
        "tc_original": [
            "genre.genre_name",
            "genre.genre_id",
            "genre.*",
            "movie.release_date",
            "movie.title",
            "movie.movie_id",
            "movie.movie_status",
            "movie.budget",
            "movie.*",
            "movie_genres.genre_id",
            "movie_genres.movie_id",
            "movie_genres.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "title": "COLUMN:[movie].[title]",
            "crime": "VALUE:[genre].[genre_name]",
            "movie": "TABLE:[movie]",
            "release": "COLUMN:[movie].[release_date]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "List the person IDs of the second film editors in Movie No. 12. second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12",
        "evidence": "second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12",
        "SQL": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'",
        "query": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "the",
            "person",
            "IDs",
            "of",
            "the",
            "second",
            "film",
            "editors",
            "in",
            "Movie",
            "No",
            ".",
            "12",
            ".",
            "second",
            "film",
            "editors",
            "refers",
            "to",
            "job",
            "=",
            "'Second",
            "Film",
            "Editor'",
            ";",
            "Movie",
            "No",
            ".",
            "12",
            "refers",
            "to",
            "movie_id",
            "=",
            "12"
        ],
        "tc_original": [
            "movie_crew.person_id",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.department_id",
            "movie_crew.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.popularity",
            "movie.*"
        ],
        "gold_links": {
            "person IDs": "COLUMN:[movie_crew].[person_id]",
            "second film editors": "VALUE:[movie_crew].[job]",
            "Movie No. 12": "VALUE:[movie_crew].[movie_id]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Tally the movie ID and character name in the movie starring Jim Carrey.",
        "evidence": "",
        "SQL": "SELECT T2.movie_id, T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Jim Carrey'",
        "query": "SELECT T2.movie_id, T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Jim Carrey'",
        "question_toks": [
            "Tally",
            "the",
            "movie",
            "ID",
            "and",
            "character",
            "name",
            "in",
            "the",
            "movie",
            "starring",
            "Jim",
            "Carrey",
            "."
        ],
        "tc_original": [
            "movie_cast.character_name",
            "movie_cast.movie_id",
            "movie_cast.person_id",
            "movie_cast.gender_id",
            "movie_cast.cast_order",
            "movie_cast.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.job",
            "movie_crew.*"
        ],
        "gold_links": {
            "movie ID": "COLUMN:[movie_cast].[movie_id]",
            "character name": "COLUMN:[movie_cast].[character_name]",
            "Jim Carrey": "VALUE:[person].[person_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Write me the titles of the movies starring Jim Carrey. Jim Carrey is the person_name;",
        "evidence": "Jim Carrey is the person_name;",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'",
        "query": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'",
        "evidence_added": true,
        "question_toks": [
            "Write",
            "me",
            "the",
            "titles",
            "of",
            "the",
            "movies",
            "starring",
            "Jim",
            "Carrey",
            ".",
            "Jim",
            "Carrey",
            "is",
            "the",
            "person_name",
            ";"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "person.person_name",
            "person.person_id",
            "person.*",
            "movie_cast.person_id",
            "movie_cast.movie_id",
            "movie_cast.gender_id",
            "movie_cast.character_name",
            "movie_cast.cast_order",
            "movie_cast.*",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.job",
            "movie_crew.*"
        ],
        "gold_links": {
            "titles": "COLUMN:[movie].[title]",
            "movies": "TABLE:[movie]",
            "starring": "TABLE:[movie_cast]",
            "Jim Carrey": "VALUE:[person].[person_name]",
            "person_name": "COLUMN:[person].[person_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Write the titles of horror films with a vote average of more than 7. horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7",
        "evidence": "horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7",
        "query": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7",
        "evidence_added": true,
        "question_toks": [
            "Write",
            "the",
            "titles",
            "of",
            "horror",
            "films",
            "with",
            "a",
            "vote",
            "average",
            "of",
            "more",
            "than",
            "7",
            ".",
            "horror",
            "films",
            "refers",
            "to",
            "genre_name",
            "=",
            "'Horror'",
            ";",
            "vote",
            "average",
            "of",
            "more",
            "than",
            "7",
            "refers",
            "to",
            "vote_average",
            ">",
            "7"
        ],
        "tc_original": [
            "movie.vote_average",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "genre.genre_name",
            "genre.genre_id",
            "genre.*",
            "movie_genres.genre_id",
            "movie_genres.movie_id",
            "movie_genres.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "titles": "COLUMN:[movie].[title]",
            "horror films": "VALUE:[genre].[genre_name]",
            "genre": "COLUMN:[genre].[genre_name]",
            "vote average": "COLUMN:[movie].[vote_average]",
            "7": "VALUE:[movie].[vote_average]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "List the title of movies in Latin released between 1/01/1990 and 12/31/1995. movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "evidence": "movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "query": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "the",
            "title",
            "of",
            "movies",
            "in",
            "Latin",
            "released",
            "between",
            "1/01/1990",
            "and",
            "12/31/1995",
            ".",
            "movies",
            "in",
            "Latin",
            "refers",
            "to",
            "language_name",
            "=",
            "'Latin'",
            ";",
            "released",
            "between",
            "1/01/1990",
            "and",
            "12/31/1995",
            "refers",
            "to",
            "release_date",
            "BETWEEN",
            "'1990-01-01'",
            "AND",
            "'1995-12-31'"
        ],
        "tc_original": [
            "movie.movie_id",
            "movie.title",
            "movie.release_date",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "movie_languages.movie_id",
            "movie_languages.language_id",
            "movie_languages.language_role_id",
            "movie_languages.*",
            "language.language_id",
            "language.language_name",
            "language.language_code",
            "language.*",
            "movie_keywords.movie_id",
            "movie_keywords.keyword_id",
            "movie_keywords.*"
        ],
        "gold_links": {
            "title": "COLUMN:[movie].[title]",
            "movies": "TABLE:[movie]",
            "Latin": "VALUE:[language].[language_name]",
            "language_name": "COLUMN:[language].[language_name]",
            "released": "COLUMN:[movie].[release_date]",
            "release_date": "COLUMN:[movie].[release_date]",
            "1990": "VALUE:[movie].[release_date]",
            "1995": "VALUE:[movie].[release_date]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the average revenue of American movies in 2006? American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)",
        "evidence": "American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)",
        "SQL": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006",
        "query": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "revenue",
            "of",
            "American",
            "movies",
            "in",
            "2006",
            "?",
            "American",
            "movies",
            "refers",
            "to",
            "country_name",
            "=",
            "'United",
            "States",
            "of",
            "America'",
            ";",
            "in",
            "2006",
            "refers",
            "to",
            "release_date",
            "LIKE",
            "'2006%'",
            ";",
            "average",
            "revenue",
            "=",
            "AVG(revenue)"
        ],
        "tc_original": [
            "movie.revenue",
            "movie.release_date",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "country.country_name",
            "country.country_id",
            "country.country_iso_code",
            "country.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "average revenue": "COLUMN:[movie].[revenue]",
            "revenue": "COLUMN:[movie].[revenue]",
            "American movies": "COLUMN:[country].[country_name]",
            "United States of America": "VALUE:[country].[country_name]",
            "2006": "VALUE:[movie].[release_date]",
            "release date": "COLUMN:[movie].[release_date]",
            "movie": "TABLE:[movie]",
            "country": "TABLE:[country]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the percentage of romance films among films produced in India in 2015? romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage",
        "evidence": "romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Romance' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'India' AND T1.release_date BETWEEN '2015-01-01' AND '2015-12-31'",
        "query": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Romance' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'India' AND T1.release_date BETWEEN '2015-01-01' AND '2015-12-31'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "percentage",
            "of",
            "romance",
            "films",
            "among",
            "films",
            "produced",
            "in",
            "India",
            "in",
            "2015",
            "?",
            "romance",
            "films",
            "refers",
            "to",
            "genre_name",
            "=",
            "'Romance'",
            ";",
            "in",
            "India",
            "refers",
            "to",
            "country_name",
            "=",
            "'India'",
            ";",
            "2015",
            "refers",
            "to",
            "release_date",
            "BETWEEN",
            "'2015-01-01'",
            "AND",
            "'2015-01-31'",
            ";",
            "percentage",
            "=",
            "divide(sum(movie_id)",
            "when",
            "genre_name",
            "=",
            "'Romance'",
            ",",
            "count(movie_id))",
            "as",
            "percentage"
        ],
        "tc_original": [
            "country.country_id",
            "country.country_name",
            "country.country_iso_code",
            "country.*",
            "production_country.country_id",
            "production_country.movie_id",
            "production_country.*",
            "genre.genre_name",
            "genre.genre_id",
            "genre.*",
            "movie_genres.genre_id",
            "movie_genres.movie_id",
            "movie_genres.*"
        ],
        "gold_links": {
            "percentage": "COLUMN:[movie].[movie_id]",
            "romance films": "VALUE:[genre].[genre_name]",
            "romance": "VALUE:[genre].[genre_name]",
            "films": "TABLE:[movie]",
            "produced": "TABLE:[production_country]",
            "india": "VALUE:[country].[country_name]",
            "2015": "COLUMN:[movie].[release_date]",
            "genre": "TABLE:[genre]",
            "country": "TABLE:[country]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "List all companies who worked in the movie 'Ultramarines: A Warhammer 40,000 Movie.' all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie'",
        "evidence": "all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie'",
        "SQL": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Ultramarines: A Warhammer 40,000 Movie'",
        "query": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Ultramarines: A Warhammer 40,000 Movie'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "all",
            "companies",
            "who",
            "worked",
            "in",
            "the",
            "movie",
            "'Ultramarines",
            ":",
            "A",
            "Warhammer",
            "40,000",
            "Movie.'",
            "all",
            "companies",
            "refers",
            "to",
            "company_name",
            ";",
            "movie",
            "'Ultramarines",
            ":",
            "A",
            "Warhammer",
            "40,000",
            "Movie'",
            "refers",
            "to",
            "title",
            "=",
            "'Ultramarines",
            ":",
            "A",
            "Warhammer",
            "40,000",
            "Movie'"
        ],
        "tc_original": [
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.job",
            "movie_crew.department_id",
            "movie_crew.*",
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "production_company.company_name",
            "production_company.company_id",
            "production_company.*"
        ],
        "gold_links": {
            "companies": "COLUMN:[production_company].[company_name]",
            "company_name": "COLUMN:[production_company].[company_name]",
            "movie": "TABLE:[movie]",
            "Ultramarines: A Warhammer 40,000 Movie": "VALUE:[movie].[title]",
            "title": "COLUMN:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "List 10 movie titles that were produced in France. France refers to country_name = 'France'",
        "evidence": "France refers to country_name = 'France'",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France' LIMIT 10",
        "query": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France' LIMIT 10",
        "evidence_added": true,
        "question_toks": [
            "List",
            "10",
            "movie",
            "titles",
            "that",
            "were",
            "produced",
            "in",
            "France",
            ".",
            "France",
            "refers",
            "to",
            "country_name",
            "=",
            "'France'"
        ],
        "tc_original": [
            "country.country_id",
            "country.country_name",
            "country.country_iso_code",
            "country.*",
            "production_country.country_id",
            "production_country.movie_id",
            "production_country.*",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*"
        ],
        "gold_links": {
            "movie titles": "COLUMN:[movie].[title]",
            "title": "COLUMN:[movie].[title]",
            "France": "VALUE:[country].[country_name]",
            "produced": "TABLE:[production_country]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Who is the director for the movie 'Transformers?' the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers'",
        "evidence": "the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers'",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Transformers' AND T2.job = 'Director'",
        "query": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Transformers' AND T2.job = 'Director'",
        "evidence_added": true,
        "question_toks": [
            "Who",
            "is",
            "the",
            "director",
            "for",
            "the",
            "movie",
            "'Transformers?'",
            "the",
            "director",
            "refers",
            "to",
            "person_name",
            "where",
            "job",
            "=",
            "'Director'",
            ";",
            "movie",
            "'Transformers'",
            "refers",
            "to",
            "title",
            "=",
            "'Transformers'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_crew.movie_id",
            "movie_crew.job",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "director": "COLUMN:[movie_crew].[job]",
            "person_name": "COLUMN:[person].[person_name]",
            "movie": "TABLE:[movie]",
            "Transformers": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "State the genre of the movie title with a runtime of only 14 minutes. genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14",
        "evidence": "genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.runtime = 14",
        "query": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.runtime = 14",
        "evidence_added": true,
        "question_toks": [
            "State",
            "the",
            "genre",
            "of",
            "the",
            "movie",
            "title",
            "with",
            "a",
            "runtime",
            "of",
            "only",
            "14",
            "minutes",
            ".",
            "genre",
            "refers",
            "to",
            "genre_name",
            ";",
            "runtime",
            "of",
            "only",
            "14",
            "minutes",
            "refers",
            "to",
            "runtime",
            "=",
            "14"
        ],
        "tc_original": [
            "movie_genres.movie_id",
            "movie_genres.genre_id",
            "movie_genres.*",
            "movie.runtime",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "genre.genre_name",
            "genre.genre_id",
            "genre.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "genre": "COLUMN:[genre].[genre_name]",
            "movie title": "COLUMN:[movie].[title]",
            "runtime": "COLUMN:[movie].[runtime]",
            "14": "VALUE:[movie].[runtime]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "List down the movie titles that were produced in Canada. produced in Canada refers to country_name = 'Canada'",
        "evidence": "produced in Canada refers to country_name = 'Canada'",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'Canada'",
        "query": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'Canada'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "down",
            "the",
            "movie",
            "titles",
            "that",
            "were",
            "produced",
            "in",
            "Canada",
            ".",
            "produced",
            "in",
            "Canada",
            "refers",
            "to",
            "country_name",
            "=",
            "'Canada'"
        ],
        "tc_original": [
            "country.country_name",
            "country.country_id",
            "country.country_iso_code",
            "country.*",
            "production_country.country_id",
            "production_country.movie_id",
            "production_country.*",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "production_company.company_id",
            "production_company.company_name",
            "production_company.*"
        ],
        "gold_links": {
            "movie titles": "COLUMN:[movie].[title]",
            "produced": "TABLE:[production_country]",
            "Canada": "VALUE:[country].[country_name]",
            "country_name": "COLUMN:[country].[country_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Accumulate the budget of the movie titles with the keyword of \"video game\". keyword of \"video game\" refers to keyword_name = 'video game'",
        "evidence": "keyword of \"video game\" refers to keyword_name = 'video game'",
        "SQL": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'",
        "query": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'",
        "evidence_added": true,
        "question_toks": [
            "Accumulate",
            "the",
            "budget",
            "of",
            "the",
            "movie",
            "titles",
            "with",
            "the",
            "keyword",
            "of",
            "\"video",
            "game\"",
            ".",
            "keyword",
            "of",
            "\"video",
            "game\"",
            "refers",
            "to",
            "keyword_name",
            "=",
            "'video",
            "game'"
        ],
        "tc_original": [
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*",
            "movie.budget",
            "movie.title",
            "movie.movie_id",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_keywords.movie_id",
            "movie_keywords.keyword_id",
            "movie_keywords.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "budget": "COLUMN:[movie].[budget]",
            "movie": "TABLE:[movie]",
            "titles": "COLUMN:[movie].[title]",
            "keyword": "TABLE:[keyword]",
            "video game": "VALUE:[keyword].[keyword_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the ID of the production company which produced the movie \"Gladiator\"? ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator'",
        "evidence": "ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator'",
        "SQL": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'",
        "query": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "ID",
            "of",
            "the",
            "production",
            "company",
            "which",
            "produced",
            "the",
            "movie",
            "\"Gladiator\"",
            "?",
            "ID",
            "of",
            "the",
            "production",
            "company",
            "refers",
            "to",
            "company_id",
            ";",
            "movie",
            "\"Gladiator\"",
            "refers",
            "to",
            "title",
            "=",
            "'Gladiator'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "production_company.company_id",
            "production_company.company_name",
            "production_company.*",
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*"
        ],
        "gold_links": {
            "ID": "COLUMN:[production_company].[company_id]",
            "production company": "TABLE:[production_company]",
            "company id": "COLUMN:[production_company].[company_id]",
            "movie": "TABLE:[movie]",
            "Gladiator": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "List down the movies produced by Lucasfilm. movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm'",
        "evidence": "movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm'",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Lucasfilm'",
        "query": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Lucasfilm'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "down",
            "the",
            "movies",
            "produced",
            "by",
            "Lucasfilm",
            ".",
            "movies",
            "refers",
            "to",
            "title",
            ";",
            "produced",
            "by",
            "Lucasfil",
            "refers",
            "to",
            "company_name",
            "=",
            "'Lucasfilm'"
        ],
        "tc_original": [
            "production_company.company_name",
            "production_company.company_id",
            "production_company.*",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.job",
            "movie_crew.*"
        ],
        "gold_links": {
            "movies": "TABLE:[movie]",
            "title": "COLUMN:[movie].[title]",
            "produced": "TABLE:[production_company]",
            "Lucasfilm": "VALUE:[production_company].[company_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Among Warner Bros. Pictures' movies, which title made the highest revenue? Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue)",
        "evidence": "Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue)",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1",
        "query": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "Warner",
            "Bros",
            ".",
            "Pictures'",
            "movies",
            ",",
            "which",
            "title",
            "made",
            "the",
            "highest",
            "revenue",
            "?",
            "Warner",
            "Bros",
            ".",
            "Pictures'",
            "movies",
            "refers",
            "to",
            "company_name",
            "=",
            "'Warner",
            "Bros",
            ".",
            "Pictures'",
            ";",
            "highest",
            "revenue",
            "refers",
            "to",
            "max(revenue)"
        ],
        "tc_original": [
            "movie.title",
            "movie.revenue",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "production_company.company_name",
            "production_company.company_id",
            "production_company.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "Warner Bros. Pictures": "VALUE:[production_company].[company_name]",
            "movies": "TABLE:[movie]",
            "title": "COLUMN:[movie].[title]",
            "revenue": "COLUMN:[movie].[revenue]",
            "company_name": "COLUMN:[production_company].[company_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Tell the language of the movie \"C'era una volta il West\". language refers to language_name; movie \"C'era una volta il West\" refers to title = 'C''era una volta il West'",
        "evidence": "language refers to language_name; movie \"C'era una volta il West\" refers to title = 'C''era una volta il West'",
        "SQL": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.title LIKE 'C%era una volta il West'",
        "query": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.title LIKE 'C%era una volta il West'",
        "evidence_added": true,
        "question_toks": [
            "Tell",
            "the",
            "language",
            "of",
            "the",
            "movie",
            "\"C'era",
            "una",
            "volta",
            "il",
            "West\"",
            ".",
            "language",
            "refers",
            "to",
            "language_name",
            ";",
            "movie",
            "\"C'era",
            "una",
            "volta",
            "il",
            "West\"",
            "refers",
            "to",
            "title",
            "=",
            "'C''era",
            "una",
            "volta",
            "il",
            "West'"
        ],
        "tc_original": [
            "movie_languages.language_id",
            "movie_languages.movie_id",
            "movie_languages.language_role_id",
            "movie_languages.*",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "language.language_name",
            "language.language_id",
            "language.language_code",
            "language.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "language": "COLUMN:[language].[language_name]",
            "movie": "TABLE:[movie]",
            "C'era una volta il West": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Work out the difference in revenues made between the English and Latin movies. English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin')",
        "evidence": "English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin')",
        "SQL": "SELECT SUM(CASE WHEN T3.language_name = 'English' THEN T1.revenue ELSE 0 END) - SUM(CASE WHEN T3.language_name = 'Latin' THEN T1.revenue ELSE 0 END) AS DIFFERENCE FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id",
        "query": "SELECT SUM(CASE WHEN T3.language_name = 'English' THEN T1.revenue ELSE 0 END) - SUM(CASE WHEN T3.language_name = 'Latin' THEN T1.revenue ELSE 0 END) AS DIFFERENCE FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id",
        "evidence_added": true,
        "question_toks": [
            "Work",
            "out",
            "the",
            "difference",
            "in",
            "revenues",
            "made",
            "between",
            "the",
            "English",
            "and",
            "Latin",
            "movies",
            ".",
            "English",
            "refers",
            "to",
            "language_name",
            "=",
            "'English'",
            ";",
            "Latin",
            "refers",
            "to",
            "language_name",
            "=",
            "'Latin'",
            ";",
            "difference",
            "in",
            "revenues",
            "=",
            "subtract(sum(movie_id)",
            "when",
            "language_name",
            "=",
            "'English'",
            ",",
            "sum(movie_id)",
            "when",
            "language_name",
            "=",
            "'Latin')"
        ],
        "tc_original": [
            "movie.revenue",
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "language.language_name",
            "language.language_id",
            "language.language_code",
            "language.*",
            "movie_languages.language_id",
            "movie_languages.movie_id",
            "movie_languages.language_role_id",
            "movie_languages.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "difference in revenues": "COLUMN:[movie].[revenue]",
            "revenues": "COLUMN:[movie].[revenue]",
            "English": "VALUE:[language].[language_name]",
            "Latin": "VALUE:[language].[language_name]",
            "movies": "TABLE:[movie]",
            "language_name": "COLUMN:[language].[language_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the average revenue made by Latin movies? Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)",
        "evidence": "Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)",
        "SQL": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'",
        "query": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "revenue",
            "made",
            "by",
            "Latin",
            "movies",
            "?",
            "Latin",
            "movies",
            "refers",
            "to",
            "language_name",
            "=",
            "'Latin'",
            ";",
            "average",
            "revenue",
            "=",
            "AVG(revenue)"
        ],
        "tc_original": [
            "language.language_name",
            "language.language_id",
            "language.language_code",
            "language.*",
            "movie.revenue",
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "movie_languages.language_id",
            "movie_languages.movie_id",
            "movie_languages.language_role_id",
            "movie_languages.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "average revenue": "COLUMN:[movie].[revenue]",
            "revenue": "COLUMN:[movie].[revenue]",
            "Latin movies": "TABLE:[movie]",
            "Latin": "VALUE:[language].[language_name]",
            "language_name": "COLUMN:[language].[language_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "How many movies were produced by \"Eddie Murphy Productions\"? produced by \"Eddie Murphy Productions\" refers to company_name = 'Eddie Murphy Productions'",
        "evidence": "produced by \"Eddie Murphy Productions\" refers to company_name = 'Eddie Murphy Productions'",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie_company AS T1 INNER JOIN production_company AS T2 ON T1.company_id = T2.company_id WHERE T2.company_name = 'Eddie Murphy Productions'",
        "query": "SELECT COUNT(T1.movie_id) FROM movie_company AS T1 INNER JOIN production_company AS T2 ON T1.company_id = T2.company_id WHERE T2.company_name = 'Eddie Murphy Productions'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "movies",
            "were",
            "produced",
            "by",
            "\"Eddie",
            "Murphy",
            "Productions\"",
            "?",
            "produced",
            "by",
            "\"Eddie",
            "Murphy",
            "Productions\"",
            "refers",
            "to",
            "company_name",
            "=",
            "'Eddie",
            "Murphy",
            "Productions'"
        ],
        "tc_original": [
            "production_company.company_name",
            "production_company.company_id",
            "production_company.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "person.person_name",
            "person.person_id",
            "person.*",
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*"
        ],
        "gold_links": {
            "movies": "TABLE:[movie]",
            "produced": "TABLE:[production_company]",
            "Eddie Murphy Productions": "VALUE:[production_company].[company_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "List all the actors who have played characters with \"captain\" in their names. List all the actors refers to person_name; characters with \"captain\" in their names refers to character_name LIKE '%captain%';",
        "evidence": "List all the actors refers to person_name; characters with \"captain\" in their names refers to character_name LIKE '%captain%';",
        "SQL": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'",
        "query": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "all",
            "the",
            "actors",
            "who",
            "have",
            "played",
            "characters",
            "with",
            "\"captain\"",
            "in",
            "their",
            "names",
            ".",
            "List",
            "all",
            "the",
            "actors",
            "refers",
            "to",
            "person_name",
            ";",
            "characters",
            "with",
            "\"captain\"",
            "in",
            "their",
            "names",
            "refers",
            "to",
            "character_name",
            "LIKE",
            "'%captain%'",
            ";"
        ],
        "tc_original": [
            "movie_cast.person_id",
            "movie_cast.character_name",
            "movie_cast.movie_id",
            "movie_cast.gender_id",
            "movie_cast.cast_order",
            "movie_cast.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "actors": "TABLE:[person]",
            "person_name": "COLUMN:[person].[person_name]",
            "characters": "COLUMN:[movie_cast].[character_name]",
            "captain": "VALUE:[movie_cast].[character_name]",
            "character_name": "COLUMN:[movie_cast].[character_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the most common keyword among all the movies released in 2006? most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%'",
        "evidence": "most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%'",
        "SQL": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1",
        "query": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "most",
            "common",
            "keyword",
            "among",
            "all",
            "the",
            "movies",
            "released",
            "in",
            "2006",
            "?",
            "most",
            "common",
            "keyword",
            "refers",
            "to",
            "max(count(keyword_name))",
            ";",
            "movies",
            "released",
            "in",
            "2006",
            "refers",
            "to",
            "release_date",
            "LIKE",
            "'%2006%'"
        ],
        "tc_original": [
            "movie.release_date",
            "movie.movie_id",
            "movie.movie_status",
            "movie.title",
            "movie.budget",
            "movie.*",
            "movie_keywords.keyword_id",
            "movie_keywords.movie_id",
            "movie_keywords.*",
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*",
            "movie_company.movie_id",
            "movie_company.company_id",
            "movie_company.*"
        ],
        "gold_links": {
            "keyword": "COLUMN:[keyword].[keyword_name]",
            "most common": "COLUMN:[keyword].[keyword_name]",
            "movies": "TABLE:[movie]",
            "2006": "VALUE:[movie].[release_date]",
            "release date": "COLUMN:[movie].[release_date]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the third least common genre? least common genre refers to min(count(genre_name))",
        "evidence": "least common genre refers to min(count(genre_name))",
        "SQL": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1",
        "query": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "third",
            "least",
            "common",
            "genre",
            "?",
            "least",
            "common",
            "genre",
            "refers",
            "to",
            "min(count(genre_name))"
        ],
        "tc_original": [
            "genre.genre_name",
            "genre.genre_id",
            "genre.*",
            "movie_genres.genre_id",
            "movie_genres.movie_id",
            "movie_genres.*",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.popularity",
            "movie.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "genre": "TABLE:[genre]",
            "genre_name": "COLUMN:[genre].[genre_name]",
            "common": "COLUMN:[genre].[genre_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Provide the average revenue of all the French movies. French movies refers to country_name = 'France'; average revenue = AVG(revenue)",
        "evidence": "French movies refers to country_name = 'France'; average revenue = AVG(revenue)",
        "SQL": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'",
        "query": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'",
        "evidence_added": true,
        "question_toks": [
            "Provide",
            "the",
            "average",
            "revenue",
            "of",
            "all",
            "the",
            "French",
            "movies",
            ".",
            "French",
            "movies",
            "refers",
            "to",
            "country_name",
            "=",
            "'France'",
            ";",
            "average",
            "revenue",
            "=",
            "AVG(revenue)"
        ],
        "tc_original": [
            "movie.revenue",
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.*",
            "country.country_name",
            "country.country_id",
            "country.country_iso_code",
            "country.*",
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*",
            "language.language_id",
            "language.language_code",
            "language.language_name",
            "language.*"
        ],
        "gold_links": {
            "average revenue": "COLUMN:[movie].[revenue]",
            "revenue": "COLUMN:[movie].[revenue]",
            "French movies": "VALUE:[country].[country_name]",
            "France": "VALUE:[country].[country_name]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Which department has the most people? department refers to department_name; most people refers to max(count(department_id))",
        "evidence": "department refers to department_name; most people refers to max(count(department_id))",
        "SQL": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1",
        "query": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "department",
            "has",
            "the",
            "most",
            "people",
            "?",
            "department",
            "refers",
            "to",
            "department_name",
            ";",
            "most",
            "people",
            "refers",
            "to",
            "max(count(department_id))"
        ],
        "tc_original": [
            "department.department_name",
            "department.department_id",
            "department.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.popularity",
            "movie.*"
        ],
        "gold_links": {
            "department": "TABLE:[department]",
            "department_name": "COLUMN:[department].[department_name]",
            "most people": "COLUMN:[movie_crew].[department_id]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What is the original language of the \"Four Rooms\" movie? language refers to language_name; original language refers to language_role = 'Original'; \"Four Rooms\" refers to title = 'Four Rooms'",
        "evidence": "language refers to language_name; original language refers to language_role = 'Original'; \"Four Rooms\" refers to title = 'Four Rooms'",
        "SQL": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.title = 'Four Rooms'",
        "query": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.title = 'Four Rooms'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "original",
            "language",
            "of",
            "the",
            "\"Four",
            "Rooms\"",
            "movie",
            "?",
            "language",
            "refers",
            "to",
            "language_name",
            ";",
            "original",
            "language",
            "refers",
            "to",
            "language_role",
            "=",
            "'Original'",
            ";",
            "\"Four",
            "Rooms\"",
            "refers",
            "to",
            "title",
            "=",
            "'Four",
            "Rooms'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_languages.language_id",
            "movie_languages.movie_id",
            "movie_languages.language_role_id",
            "movie_languages.*",
            "language.language_name",
            "language.language_id",
            "language.language_code",
            "language.*",
            "language_role.language_role",
            "language_role.role_id",
            "language_role.*"
        ],
        "gold_links": {
            "original language": "COLUMN:[language_role].[language_role]",
            "language": "COLUMN:[language].[language_name]",
            "Four Rooms": "VALUE:[movie].[title]",
            "movie": "TABLE:[movie]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Who is the main actor in the \"Pirates of the Caribbean: At World's End\" movie? main actor refers to person_name where Min(cast_order); \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence": "main actor refers to person_name where Min(cast_order); \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQL": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1",
        "query": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Who",
            "is",
            "the",
            "main",
            "actor",
            "in",
            "the",
            "\"Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World's",
            "End\"",
            "movie",
            "?",
            "main",
            "actor",
            "refers",
            "to",
            "person_name",
            "where",
            "Min(cast_order)",
            ";",
            "\"Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World's",
            "End\"",
            "refers",
            "to",
            "title",
            "=",
            "'Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World''s",
            "End'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_cast.movie_id",
            "movie_cast.cast_order",
            "movie_cast.person_id",
            "movie_cast.gender_id",
            "movie_cast.character_name",
            "movie_cast.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "gender.gender",
            "gender.gender_id",
            "gender.*"
        ],
        "gold_links": {
            "main actor": "COLUMN:[person].[person_name]",
            "actor": "COLUMN:[person].[person_name]",
            "person_name": "COLUMN:[person].[person_name]",
            "Pirates of the Caribbean: At World's End": "VALUE:[movie].[title]",
            "movie": "TABLE:[movie]",
            "title": "COLUMN:[movie].[title]",
            "cast_order": "COLUMN:[movie_cast].[cast_order]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Provide the names and departments of the person who worked as a music editor in the \"Pirates of the Caribbean: At World's End\" movie. names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "evidence": "names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'",
        "SQL": "SELECT T3.person_name, T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Music Editor'",
        "query": "SELECT T3.person_name, T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Music Editor'",
        "evidence_added": true,
        "question_toks": [
            "Provide",
            "the",
            "names",
            "and",
            "departments",
            "of",
            "the",
            "person",
            "who",
            "worked",
            "as",
            "a",
            "music",
            "editor",
            "in",
            "the",
            "\"Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World's",
            "End\"",
            "movie",
            ".",
            "names",
            "refers",
            "to",
            "person_name",
            ";",
            "departments",
            "refers",
            "to",
            "department_name",
            ";",
            "worked",
            "as",
            "a",
            "music",
            "editor",
            "refers",
            "to",
            "job",
            "=",
            "'Music",
            "Editor'",
            ";",
            "\"Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World's",
            "End\"",
            "refers",
            "to",
            "title",
            "=",
            "'Pirates",
            "of",
            "the",
            "Caribbean",
            ":",
            "At",
            "World''s",
            "End'"
        ],
        "tc_original": [
            "movie.movie_id",
            "movie.title",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.job",
            "movie_crew.*",
            "person.person_id",
            "person.person_name",
            "person.*",
            "department.department_name",
            "department.department_id",
            "department.*"
        ],
        "gold_links": {
            "names": "COLUMN:[person].[person_name]",
            "departments": "COLUMN:[department].[department_name]",
            "person": "TABLE:[person]",
            "music editor": "VALUE:[movie_crew].[job]",
            "Pirates of the Caribbean: At World's End": "VALUE:[movie].[title]",
            "movie": "TABLE:[movie]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Provide the production companies of the movie that has over 35% average running time per movie in 2016. production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35",
        "evidence": "production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35",
        "SQL": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100",
        "query": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100",
        "evidence_added": true,
        "question_toks": [
            "Provide",
            "the",
            "production",
            "companies",
            "of",
            "the",
            "movie",
            "that",
            "has",
            "over",
            "35%",
            "average",
            "running",
            "time",
            "per",
            "movie",
            "in",
            "2016",
            ".",
            "production",
            "companies",
            "refers",
            "to",
            "company_name",
            ";",
            "in",
            "2016",
            "refers",
            "to",
            "release_date",
            "LIKE",
            "'2016%'",
            ";",
            "over",
            "35%",
            "average",
            "running",
            "time",
            "per",
            "movie",
            "refers",
            "to",
            "divide(subtract(runtime",
            ",",
            "AVG(runtime))",
            ",",
            "AVG(runtime))",
            "*",
            "100",
            "as",
            "percentage",
            ">",
            "35"
        ],
        "tc_original": [
            "movie.movie_id",
            "movie.runtime",
            "movie.release_date",
            "movie.title",
            "movie.budget",
            "movie.*",
            "movie_company.company_id",
            "movie_company.movie_id",
            "movie_company.*",
            "production_company.company_name",
            "production_company.company_id",
            "production_company.*",
            "keyword.keyword_id",
            "keyword.keyword_name",
            "keyword.*"
        ],
        "gold_links": {
            "production companies": "TABLE:[production_company]",
            "company_name": "COLUMN:[production_company].[company_name]",
            "movie": "TABLE:[movie]",
            "average running time": "COLUMN:[movie].[runtime]",
            "runtime": "COLUMN:[movie].[runtime]",
            "2016": "VALUE:[movie].[release_date]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "Which genre does the movie Dancer in the Dark belong to? genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark'",
        "evidence": "genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark'",
        "SQL": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Dancer in the Dark'",
        "query": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Dancer in the Dark'",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "genre",
            "does",
            "the",
            "movie",
            "Dancer",
            "in",
            "the",
            "Dark",
            "belong",
            "to",
            "?",
            "genre",
            "refers",
            "to",
            "genre_name",
            ";",
            "movie",
            "Dancer",
            "in",
            "the",
            "Dark",
            "refers",
            "to",
            "title",
            "=",
            "'Dancer",
            "in",
            "the",
            "Dark'"
        ],
        "tc_original": [
            "movie_genres.genre_id",
            "movie_genres.movie_id",
            "movie_genres.*",
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "genre.genre_name",
            "genre.genre_id",
            "genre.*",
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*"
        ],
        "gold_links": {
            "genre": "COLUMN:[genre].[genre_name]",
            "movie": "TABLE:[movie]",
            "Dancer in the Dark": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "How many adventure movies are there that were released in 2000? adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%'",
        "evidence": "adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%'",
        "SQL": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000",
        "query": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "adventure",
            "movies",
            "are",
            "there",
            "that",
            "were",
            "released",
            "in",
            "2000",
            "?",
            "adventure",
            "movies",
            "refers",
            "to",
            "genre_name",
            "=",
            "'Adventure'",
            ";",
            "released",
            "in",
            "2000",
            "refers",
            "to",
            "release_date",
            "LIKE",
            "'2000%'"
        ],
        "tc_original": [
            "movie.release_date",
            "movie.movie_id",
            "movie.movie_status",
            "movie.title",
            "movie.budget",
            "movie.*",
            "genre.genre_name",
            "genre.genre_id",
            "genre.*",
            "movie_genres.genre_id",
            "movie_genres.movie_id",
            "movie_genres.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "adventure": "VALUE:[genre].[genre_name]",
            "movies": "TABLE:[movie]",
            "released": "COLUMN:[movie].[release_date]",
            "2000": "VALUE:[movie].[release_date]",
            "genre_name": "COLUMN:[genre].[genre_name]",
            "release_date": "COLUMN:[movie].[release_date]"
        }
    },
    {
        "db_id": "movies_4",
        "question": "What keyword can the user use to search for the movie Finding Nemo? What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'",
        "evidence": "What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'",
        "SQL": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'",
        "query": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "keyword",
            "can",
            "the",
            "user",
            "use",
            "to",
            "search",
            "for",
            "the",
            "movie",
            "Finding",
            "Nemo",
            "?",
            "What",
            "keyword",
            "refers",
            "to",
            "keyword_name",
            ";",
            "Finding",
            "Nemo",
            "refers",
            "to",
            "title",
            "=",
            "'Finding",
            "Nemo'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movie_id",
            "movie.budget",
            "movie.homepage",
            "movie.overview",
            "movie.*",
            "keyword.keyword_name",
            "keyword.keyword_id",
            "keyword.*",
            "movie_keywords.movie_id",
            "movie_keywords.keyword_id",
            "movie_keywords.*",
            "movie_crew.job",
            "movie_crew.movie_id",
            "movie_crew.person_id",
            "movie_crew.department_id",
            "movie_crew.*"
        ],
        "gold_links": {
            "keyword": "TABLE:[keyword]",
            "keyword_name": "COLUMN:[keyword].[keyword_name]",
            "movie": "TABLE:[movie]",
            "Finding Nemo": "VALUE:[movie].[title]",
            "title": "COLUMN:[movie].[title]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "How many solution paths are there inside the 2nd most popular repository? more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);",
        "evidence": "more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);",
        "SQL": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )",
        "query": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "solution",
            "paths",
            "are",
            "there",
            "inside",
            "the",
            "2nd",
            "most",
            "popular",
            "repository",
            "?",
            "more",
            "watchers",
            "mean",
            "that",
            "this",
            "repository",
            "is",
            "more",
            "popular",
            ";",
            "most",
            "popular",
            "repository",
            "refers",
            "to",
            "max(Watchers)",
            ";"
        ],
        "tc_original": [
            "repo.watchers",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.forks",
            "repo.*",
            "solution.repoid",
            "solution.path",
            "solution.id",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "solution paths": "COLUMN:[solution].[path]",
            "paths": "COLUMN:[solution].[path]",
            "repository": "TABLE:[repo]",
            "popular": "COLUMN:[repo].[watchers]",
            "watchers": "COLUMN:[repo].[watchers]",
            "2nd": "COLUMN:[repo].[watchers]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"? average processed time = avg(Solution.ProcessedTime);",
        "evidence": "average processed time = avg(Solution.ProcessedTime);",
        "SQL": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'",
        "query": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "processed",
            "time",
            "of",
            "the",
            "solution",
            "paths",
            "inside",
            "the",
            "\"https://github.com/zphingphong/DiscardCustomerApp.git\"",
            "?",
            "average",
            "processed",
            "time",
            "=",
            "avg(Solution.ProcessedTime)",
            ";"
        ],
        "tc_original": [
            "solution.processedtime",
            "solution.path",
            "solution.repoid",
            "solution.id",
            "solution.wascompiled",
            "solution.*",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.forks",
            "repo.processedtime",
            "repo.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "average processed time": "COLUMN:[solution].[processedtime]",
            "solution paths": "COLUMN:[solution].[path]",
            "https://github.com/zphingphong/DiscardCustomerApp.git": "VALUE:[repo].[url]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"? needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository",
        "evidence": "needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository",
        "SQL": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0",
        "query": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "solution",
            "paths",
            "that",
            "needs",
            "to",
            "be",
            "compiled",
            "if",
            "user",
            "wants",
            "to",
            "implement",
            "it",
            "in",
            "\"https://github.com/jeffdik/tachy.git\"",
            "?",
            "needs",
            "to",
            "be",
            "compiled",
            "if",
            "user",
            "wants",
            "to",
            "implement",
            "refers",
            "to",
            "WasCompiled",
            "=",
            "0",
            ";",
            "https://github.com/jeffdik/tachy.git",
            "is",
            "url",
            "of",
            "repository"
        ],
        "tc_original": [
            "solution.repoid",
            "solution.path",
            "solution.wascompiled",
            "solution.id",
            "solution.processedtime",
            "solution.*",
            "repo.url",
            "repo.id",
            "repo.stars",
            "repo.forks",
            "repo.watchers",
            "repo.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "solution paths": "COLUMN:[solution].[path]",
            "paths": "COLUMN:[solution].[path]",
            "compiled": "COLUMN:[solution].[wascompiled]",
            "needs to be compiled": "COLUMN:[solution].[wascompiled]",
            "WasCompiled = 0": "COLUMN:[solution].[wascompiled]",
            "repository": "TABLE:[repo]",
            "https://github.com/jeffdik/tachy.git": "VALUE:[repo].[url]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "What is the github address of the repository that contains files used by solution ID12? github address refers to Url;",
        "evidence": "github address refers to Url;",
        "SQL": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12",
        "query": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "github",
            "address",
            "of",
            "the",
            "repository",
            "that",
            "contains",
            "files",
            "used",
            "by",
            "solution",
            "ID12",
            "?",
            "github",
            "address",
            "refers",
            "to",
            "Url",
            ";"
        ],
        "tc_original": [
            "repo.url",
            "repo.id",
            "repo.stars",
            "repo.forks",
            "repo.watchers",
            "repo.*",
            "solution.repoid",
            "solution.id",
            "solution.path",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.solutionid",
            "method.lang",
            "method.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*"
        ],
        "gold_links": {
            "github address": "COLUMN:[repo].[url]",
            "repository": "TABLE:[repo]",
            "solution": "TABLE:[solution]",
            "ID12": "VALUE:[solution].[id]",
            "files": "COLUMN:[solution].[path]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd? average time = avg(ProcessedTime)\uff1b",
        "evidence": "average time = avg(ProcessedTime)\uff1b",
        "SQL": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'",
        "query": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "time",
            "needed",
            "for",
            "the",
            "solutions",
            "containing",
            "files",
            "within",
            "the",
            "repository",
            "whose",
            "url",
            "is",
            "\"https://github.com/jeffdik/tachy.git\"",
            "to",
            "be",
            "processd",
            "?",
            "average",
            "time",
            "=",
            "avg(ProcessedTime)\uff1b"
        ],
        "tc_original": [
            "solution.processedtime",
            "solution.repoid",
            "solution.id",
            "solution.path",
            "solution.wascompiled",
            "solution.*",
            "repo.url",
            "repo.processedtime",
            "repo.id",
            "repo.stars",
            "repo.forks",
            "repo.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "average time": "COLUMN:[repo].[processedtime]",
            "solutions": "TABLE:[solution]",
            "files": "COLUMN:[solution].[path]",
            "repository": "TABLE:[repo]",
            "url": "COLUMN:[repo].[url]",
            "https://github.com/jeffdik/tachy.git": "VALUE:[repo].[url]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19? followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%",
        "evidence": "followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%",
        "SQL": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "query": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "more",
            "followers",
            "in",
            "percentage",
            "are",
            "there",
            "for",
            "the",
            "repository",
            "used",
            "by",
            "solution",
            "ID",
            "18",
            "than",
            "solution",
            "ID19",
            "?",
            "followers",
            "refers",
            "to",
            "Forks",
            ";",
            "percentage",
            "=",
            "divide(SUBTRACT(Forks(Solution.ID",
            "=",
            "18)",
            ",",
            "Forks(Solution.ID",
            "=",
            "19))",
            ",",
            "Forks(Solution.ID",
            "=",
            "19))*100%"
        ],
        "tc_original": [
            "solution.repoid",
            "solution.id",
            "solution.path",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "repo.id",
            "repo.forks",
            "repo.url",
            "repo.stars",
            "repo.watchers",
            "repo.*",
            "methodparameter.id",
            "methodparameter.methodid",
            "methodparameter.type",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "followers": "COLUMN:[repo].[forks]",
            "repository": "TABLE:[repo]",
            "solution ID 18": "VALUE:[solution].[id]",
            "solution ID 19": "VALUE:[solution].[id]",
            "percentage": "COLUMN:[repo].[forks]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "Give the number of watchers that the repository of the solution No. 338082 have. number of watchers refers to Watchers; solution number refers to Solution.Id;",
        "evidence": "number of watchers refers to Watchers; solution number refers to Solution.Id;",
        "SQL": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082",
        "query": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082",
        "evidence_added": true,
        "question_toks": [
            "Give",
            "the",
            "number",
            "of",
            "watchers",
            "that",
            "the",
            "repository",
            "of",
            "the",
            "solution",
            "No",
            ".",
            "338082",
            "have",
            ".",
            "number",
            "of",
            "watchers",
            "refers",
            "to",
            "Watchers",
            ";",
            "solution",
            "number",
            "refers",
            "to",
            "Solution.Id",
            ";"
        ],
        "tc_original": [
            "repo.watchers",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.forks",
            "repo.*",
            "solution.repoid",
            "solution.id",
            "solution.path",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.fullcomment",
            "method.apicalls",
            "method.*"
        ],
        "gold_links": {
            "number of watchers": "COLUMN:[repo].[watchers]",
            "watchers": "COLUMN:[repo].[watchers]",
            "repository": "TABLE:[repo]",
            "solution number": "COLUMN:[solution].[id]",
            "338082": "VALUE:[solution].[id]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain? repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;",
        "evidence": "repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0",
        "query": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0",
        "evidence_added": true,
        "question_toks": [
            "For",
            "the",
            "repository",
            "which",
            "got",
            "'189'",
            "Stars",
            ",",
            "how",
            "many",
            "solutions",
            "which",
            "needs",
            "to",
            "be",
            "compiled",
            "does",
            "it",
            "contain",
            "?",
            "repository",
            "refers",
            "to",
            "Repository.Id",
            ";",
            "solution",
            "needs",
            "to",
            "be",
            "compiled",
            "refers",
            "to",
            "WasCompiled",
            "=",
            "0",
            ";"
        ],
        "tc_original": [
            "repo.stars",
            "repo.id",
            "repo.url",
            "repo.forks",
            "repo.watchers",
            "repo.*",
            "solution.repoid",
            "solution.wascompiled",
            "solution.id",
            "solution.path",
            "solution.processedtime",
            "solution.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.name",
            "methodparameter.methodid",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "repository": "COLUMN:[repo].[id]",
            "stars": "COLUMN:[repo].[stars]",
            "189": "VALUE:[repo].[stars]",
            "solutions": "TABLE:[solution]",
            "compiled": "COLUMN:[solution].[wascompiled]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"? solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';",
        "evidence": "solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';",
        "SQL": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'",
        "query": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "solutions",
            "are",
            "in",
            "\"https://github.com/derickbailey/presentations-and-training.git\"",
            "?",
            "solutions",
            "refers",
            "to",
            "Solution.Id",
            ";",
            "https://github.com/derickbailey/presentations-and-training.git",
            "refers",
            "to",
            "Url",
            ";",
            "Url",
            ";",
            "=",
            "'https://github.com/derickbailey/presentations-and-training.git'",
            ";"
        ],
        "tc_original": [
            "solution.id",
            "solution.repoid",
            "solution.path",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.forks",
            "repo.watchers",
            "repo.*",
            "method.solutionid",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.name",
            "methodparameter.methodid",
            "methodparameter.*"
        ],
        "gold_links": {
            "solutions": "TABLE:[solution]",
            "Solution.Id": "COLUMN:[solution].[id]",
            "Url": "COLUMN:[repo].[url]",
            "https://github.com/derickbailey/presentations-and-training.git": "VALUE:[repo].[url]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "What is the total processed time of all solutions from the repository with the most forks? total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));",
        "evidence": "total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));",
        "SQL": "SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )",
        "query": "SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "processed",
            "time",
            "of",
            "all",
            "solutions",
            "from",
            "the",
            "repository",
            "with",
            "the",
            "most",
            "forks",
            "?",
            "total",
            "processed",
            "time",
            "=",
            "AVG(ProcessedTime",
            "where",
            "MAX(COUNT(Forks)))",
            ";",
            "repository",
            "with",
            "the",
            "most",
            "forks",
            "refers",
            "to",
            "MAX(COUNT(Forks))",
            ";"
        ],
        "tc_original": [
            "solution.processedtime",
            "solution.repoid",
            "solution.id",
            "solution.path",
            "solution.wascompiled",
            "solution.*",
            "repo.forks",
            "repo.processedtime",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "total processed time": "COLUMN:[solution].[processedtime]",
            "solutions": "TABLE:[solution]",
            "repository": "TABLE:[repo]",
            "forks": "COLUMN:[repo].[forks]",
            "most forks": "COLUMN:[repo].[forks]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "What is the percentage of Forks to Stars of repository for solution \"104086\"? solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);",
        "evidence": "solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);",
        "SQL": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086",
        "query": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "percentage",
            "of",
            "Forks",
            "to",
            "Stars",
            "of",
            "repository",
            "for",
            "solution",
            "\"104086\"",
            "?",
            "solution",
            "refers",
            "to",
            "Solution.Id",
            ";",
            "Solution.Id",
            "=",
            "104086",
            ";",
            "percentage",
            "=",
            "MULTIPLY(DIVIDE(Forkk",
            ",",
            "Stars)",
            ",",
            "100)",
            ";"
        ],
        "tc_original": [
            "repo.forks",
            "repo.stars",
            "repo.id",
            "repo.url",
            "repo.watchers",
            "repo.*",
            "solution.repoid",
            "solution.id",
            "solution.path",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "percentage": "COLUMN:[repo].[forks]",
            "Forks": "COLUMN:[repo].[forks]",
            "Stars": "COLUMN:[repo].[stars]",
            "repository": "TABLE:[repo]",
            "solution": "TABLE:[solution]",
            "104086": "VALUE:[solution].[id]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "Please provide the solution id of the respository among the respository that receive 238 forks. solution id of the repository refers to solution.Id;",
        "evidence": "solution id of the repository refers to solution.Id;",
        "SQL": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238",
        "query": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "provide",
            "the",
            "solution",
            "id",
            "of",
            "the",
            "respository",
            "among",
            "the",
            "respository",
            "that",
            "receive",
            "238",
            "forks",
            ".",
            "solution",
            "id",
            "of",
            "the",
            "repository",
            "refers",
            "to",
            "solution.Id",
            ";"
        ],
        "tc_original": [
            "repo.forks",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.watchers",
            "repo.*",
            "solution.repoid",
            "solution.id",
            "solution.path",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.name",
            "methodparameter.methodid",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "solution id": "COLUMN:[solution].[id]",
            "repository": "TABLE:[repo]",
            "238": "VALUE:[repo].[forks]",
            "forks": "COLUMN:[repo].[forks]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "Please state the API calls for method number 10 and its intended course of action. method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;",
        "evidence": "method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;",
        "SQL": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10",
        "query": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "state",
            "the",
            "API",
            "calls",
            "for",
            "method",
            "number",
            "10",
            "and",
            "its",
            "intended",
            "course",
            "of",
            "action",
            ".",
            "method",
            "number",
            "refers",
            "to",
            "Method_100k.Id",
            ";",
            "Method_100k.Id",
            "=",
            "10",
            ";",
            "intended",
            "course",
            "of",
            "action",
            "refers",
            "to",
            "Path",
            ";"
        ],
        "tc_original": [
            "method.apicalls",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.*",
            "methodparameter.name",
            "methodparameter.id",
            "methodparameter.methodid",
            "methodparameter.type",
            "methodparameter.*",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.forks",
            "repo.watchers",
            "repo.*",
            "solution.id",
            "solution.path",
            "solution.repoid",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*"
        ],
        "gold_links": {
            "API calls": "COLUMN:[method].[apicalls]",
            "method number": "COLUMN:[method].[id]",
            "10": "VALUE:[method].[id]",
            "course of action": "COLUMN:[solution].[path]"
        }
    },
    {
        "db_id": "codebase_comments",
        "question": "How many watchers does the path \"maff_se3ue7\\US7.sln\" have?",
        "evidence": "",
        "SQL": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'",
        "query": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'",
        "question_toks": [
            "How",
            "many",
            "watchers",
            "does",
            "the",
            "path",
            "\"maff_se3ue7\\US7.sln\"",
            "have",
            "?"
        ],
        "tc_original": [
            "repo.watchers",
            "repo.id",
            "repo.url",
            "repo.stars",
            "repo.forks",
            "repo.*",
            "solution.path",
            "solution.repoid",
            "solution.id",
            "solution.processedtime",
            "solution.wascompiled",
            "solution.*",
            "methodparameter.id",
            "methodparameter.type",
            "methodparameter.methodid",
            "methodparameter.name",
            "methodparameter.*",
            "method.id",
            "method.name",
            "method.summary",
            "method.lang",
            "method.fullcomment",
            "method.*"
        ],
        "gold_links": {
            "watchers": "COLUMN:[repo].[watchers]",
            "path": "COLUMN:[solution].[path]",
            "maff_se3ue7\\US7.sln": "VALUE:[solution].[path]"
        }
    },
    {
        "db_id": "trains",
        "question": "Please list the IDs of all the trains that run in the east direction and have less than 4 cars. less than 4 cars refers to carsNum < 4",
        "evidence": "less than 4 cars refers to carsNum < 4",
        "SQL": "SELECT T1.id FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'east' AND T2.carsNum < 4",
        "query": "SELECT T1.id FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'east' AND T2.carsNum < 4",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "IDs",
            "of",
            "all",
            "the",
            "trains",
            "that",
            "run",
            "in",
            "the",
            "east",
            "direction",
            "and",
            "have",
            "less",
            "than",
            "4",
            "cars",
            ".",
            "less",
            "than",
            "4",
            "cars",
            "refers",
            "to",
            "carsNum",
            "<",
            "4"
        ],
        "tc_original": [
            "trains.direction",
            "trains.id",
            "trains.*",
            "cars.train_id",
            "cars.id",
            "cars.position",
            "cars.shape",
            "cars.len",
            "cars.*"
        ],
        "gold_links": {
            "IDs": "COLUMN:[trains].[id]",
            "trains": "TABLE:[trains]",
            "east": "VALUE:[trains].[direction]",
            "direction": "COLUMN:[trains].[direction]",
            "cars": "TABLE:[cars]"
        }
    },
    {
        "db_id": "trains",
        "question": "What is the average number of cars on trains that run in the east direction? calculation = DIVIDE(count(id), count(train_id))",
        "evidence": "calculation = DIVIDE(count(id), count(train_id))",
        "SQL": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
        "query": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "number",
            "of",
            "cars",
            "on",
            "trains",
            "that",
            "run",
            "in",
            "the",
            "east",
            "direction",
            "?",
            "calculation",
            "=",
            "DIVIDE(count(id)",
            ",",
            "count(train_id))"
        ],
        "tc_original": [
            "trains.direction",
            "trains.id",
            "trains.*",
            "cars.train_id",
            "cars.id",
            "cars.position",
            "cars.shape",
            "cars.len",
            "cars.*"
        ],
        "gold_links": {
            "average number": "COLUMN:[cars].[id]",
            "cars": "TABLE:[cars]",
            "trains": "TABLE:[trains]",
            "east": "VALUE:[trains].[direction]",
            "direction": "COLUMN:[trains].[direction]"
        }
    },
    {
        "db_id": "trains",
        "question": "What are the ids of the train running east? east is a direction",
        "evidence": "east is a direction",
        "SQL": "SELECT id FROM trains WHERE direction = 'east'",
        "query": "SELECT id FROM trains WHERE direction = 'east'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "train",
            "running",
            "east",
            "?",
            "east",
            "is",
            "a",
            "direction"
        ],
        "tc_original": [
            "trains.direction",
            "trains.id",
            "trains.*",
            "cars.id",
            "cars.position",
            "cars.shape",
            "cars.len",
            "cars.sides",
            "cars.*"
        ],
        "gold_links": {
            "ids": "COLUMN:[trains].[id]",
            "train": "TABLE:[trains]",
            "east": "VALUE:[trains].[direction]",
            "direction": "COLUMN:[trains].[direction]"
        }
    },
    {
        "db_id": "trains",
        "question": "Provide the directions for all the trains that have 2 or less cars. 2 or less cars refers to trailPosi < = 2",
        "evidence": "2 or less cars refers to trailPosi < = 2",
        "SQL": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2",
        "query": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2",
        "evidence_added": true,
        "question_toks": [
            "Provide",
            "the",
            "directions",
            "for",
            "all",
            "the",
            "trains",
            "that",
            "have",
            "2",
            "or",
            "less",
            "cars",
            ".",
            "2",
            "or",
            "less",
            "cars",
            "refers",
            "to",
            "trailPosi",
            "<",
            "=",
            "2"
        ],
        "tc_original": [
            "trains.id",
            "trains.direction",
            "trains.*",
            "cars.train_id",
            "cars.position",
            "cars.id",
            "cars.shape",
            "cars.len",
            "cars.*"
        ],
        "gold_links": {
            "directions": "COLUMN:[trains].[direction]",
            "trains": "TABLE:[trains]",
            "cars": "TABLE:[cars]",
            "position": "COLUMN:[cars].[position]",
            "2": "VALUE:[cars].[position]"
        }
    },
    {
        "db_id": "movie",
        "question": "Which actor played the role of Joker in the movie Batman? role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman'",
        "evidence": "role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman'",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.`Character Name` = 'Joker'",
        "query": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.`Character Name` = 'Joker'",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "actor",
            "played",
            "the",
            "role",
            "of",
            "Joker",
            "in",
            "the",
            "movie",
            "Batman",
            "?",
            "role",
            "of",
            "Joker",
            "refers",
            "to",
            "character_name",
            "=",
            "'Joker'",
            ";",
            "movie",
            "Batman",
            "refers",
            "to",
            "title",
            "=",
            "'Batman'"
        ],
        "tc_original": [
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "characters.movieid",
            "characters.actorid",
            "characters.character name",
            "characters.pay",
            "characters.creditorder",
            "characters.*",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*"
        ],
        "gold_links": {
            "actor": "TABLE:[actor]",
            "played": "COLUMN:[characters].[actorid]",
            "role": "COLUMN:[characters].[character name]",
            "Joker": "VALUE:[characters].[character name]",
            "movie": "TABLE:[movie]",
            "Batman": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movie",
        "question": "Which movie is the character Dr. Archibald 'Moonlight' Graham from? movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham'",
        "evidence": "movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham'",
        "SQL": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Dr. Archibald ''Moonlight'' Graham'",
        "query": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Dr. Archibald ''Moonlight'' Graham'",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "movie",
            "is",
            "the",
            "character",
            "Dr",
            ".",
            "Archibald",
            "'Moonlight'",
            "Graham",
            "from",
            "?",
            "movie",
            "name",
            "refers",
            "to",
            "title",
            ";",
            "character",
            "Dr",
            ".",
            "Archibald",
            "'Moonlight'",
            "Graham",
            "refers",
            "to",
            "character_name",
            "=",
            "'Dr",
            ".",
            "Archibald",
            "'Moonlight'",
            "Graham'"
        ],
        "tc_original": [
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "characters.movieid",
            "characters.character name",
            "characters.actorid",
            "characters.pay",
            "characters.creditorder",
            "characters.*",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.actorid",
            "actor.*"
        ],
        "gold_links": {
            "movie": "TABLE:[movie]",
            "movie name": "COLUMN:[movie].[title]",
            "Dr. Archibald 'Moonlight' Graham": "VALUE:[characters].[character name]",
            "character": "COLUMN:[characters].[character name]"
        }
    },
    {
        "db_id": "movie",
        "question": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July? played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July'",
        "evidence": "played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July'",
        "SQL": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'",
        "query": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "of",
            "the",
            "character",
            "played",
            "by",
            "Tom",
            "Cruise",
            "in",
            "the",
            "movie",
            "Born",
            "on",
            "the",
            "Fourth",
            "of",
            "July",
            "?",
            "played",
            "by",
            "Tom",
            "Cruise",
            "refers",
            "to",
            "name",
            "=",
            "'Tom",
            "Cruise'",
            ";",
            "movie",
            "Born",
            "on",
            "the",
            "Fourth",
            "of",
            "July",
            "refers",
            "to",
            "title",
            "=",
            "'Born",
            "on",
            "the",
            "Fourth",
            "of",
            "July'"
        ],
        "tc_original": [
            "characters.character name",
            "characters.movieid",
            "characters.actorid",
            "characters.pay",
            "characters.creditorder",
            "characters.*",
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*"
        ],
        "gold_links": {
            "name": "COLUMN:[actor].[name]",
            "character": "COLUMN:[characters].[character name]",
            "Tom Cruise": "VALUE:[actor].[name]",
            "movie": "TABLE:[movie]",
            "Born on the Fourth of July": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movie",
        "question": "Please list the names of all the characters played by Tom Cruise. played by Tom Cruise refers to name = 'Tom Cruise'",
        "evidence": "played by Tom Cruise refers to name = 'Tom Cruise'",
        "SQL": "SELECT T1.`Character Name` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'",
        "query": "SELECT T1.`Character Name` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "names",
            "of",
            "all",
            "the",
            "characters",
            "played",
            "by",
            "Tom",
            "Cruise",
            ".",
            "played",
            "by",
            "Tom",
            "Cruise",
            "refers",
            "to",
            "name",
            "=",
            "'Tom",
            "Cruise'"
        ],
        "tc_original": [
            "characters.character name",
            "characters.actorid",
            "characters.pay",
            "characters.movieid",
            "characters.creditorder",
            "characters.*",
            "actor.name",
            "actor.actorid",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.runtime",
            "movie.*"
        ],
        "gold_links": {
            "characters": "TABLE:[characters]",
            "names": "COLUMN:[characters].[character name]",
            "Tom Cruise": "VALUE:[actor].[name]"
        }
    },
    {
        "db_id": "movie",
        "question": "Among the actors who starred in the movie Batman, which one of them is the tallest? movie Batman refers to title = 'Batman'; tallest refers to max(height_inches)",
        "evidence": "movie Batman refers to title = 'Batman'; tallest refers to max(height_inches)",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' ORDER BY T3.`Height (Inches)` DESC LIMIT 1",
        "query": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' ORDER BY T3.`Height (Inches)` DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "the",
            "actors",
            "who",
            "starred",
            "in",
            "the",
            "movie",
            "Batman",
            ",",
            "which",
            "one",
            "of",
            "them",
            "is",
            "the",
            "tallest",
            "?",
            "movie",
            "Batman",
            "refers",
            "to",
            "title",
            "=",
            "'Batman'",
            ";",
            "tallest",
            "refers",
            "to",
            "max(height_inches)"
        ],
        "tc_original": [
            "movie.title",
            "movie.movieid",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "actor.actorid",
            "actor.height (inches)",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.*",
            "characters.movieid",
            "characters.actorid",
            "characters.character name",
            "characters.pay",
            "characters.creditorder",
            "characters.*"
        ],
        "gold_links": {
            "actors": "TABLE:[actor]",
            "starred": "TABLE:[characters]",
            "movie": "TABLE:[movie]",
            "Batman": "VALUE:[movie].[title]",
            "tallest": "COLUMN:[actor].[height (inches)]",
            "name": "COLUMN:[actor].[name]"
        }
    },
    {
        "db_id": "movie",
        "question": "What is the MPAA rating for the movie with the character named \"Peter Quill\" in it? MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted",
        "evidence": "MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted",
        "SQL": "SELECT T1.`MPAA Rating` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Peter Quill'",
        "query": "SELECT T1.`MPAA Rating` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.`Character Name` = 'Peter Quill'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "MPAA",
            "rating",
            "for",
            "the",
            "movie",
            "with",
            "the",
            "character",
            "named",
            "\"Peter",
            "Quill\"",
            "in",
            "it",
            "?",
            "MPAA",
            "rating",
            "=",
            "'G'",
            "means",
            "General",
            "audiences",
            ";",
            "MPAA",
            "rating",
            "=",
            "'PG'",
            "means",
            "Parental",
            "guidance",
            "suggested",
            ";",
            "MPAA",
            "rating",
            "=",
            "'R'means",
            "Restricted",
            ";",
            "MPAA",
            "rating",
            "=",
            "'X'",
            "means",
            "No",
            "one",
            "under",
            "17",
            "admitted"
        ],
        "tc_original": [
            "characters.character name",
            "characters.movieid",
            "characters.actorid",
            "characters.pay",
            "characters.creditorder",
            "characters.*",
            "movie.movieid",
            "movie.rating",
            "movie.mpaa rating",
            "movie.title",
            "movie.budget",
            "movie.*",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.actorid",
            "actor.*"
        ],
        "gold_links": {
            "MPAA rating": "COLUMN:[movie].[mpaa rating]",
            "movie": "TABLE:[movie]",
            "character": "COLUMN:[characters].[character name]",
            "Peter Quill": "VALUE:[characters].[character name]"
        }
    },
    {
        "db_id": "movie",
        "question": "Who was the actor that played in the movie \"Batman\" with the longest screentime? movie \"Batman\" refers to Title = 'Batman'; longest screentime refers to max(screentime)",
        "evidence": "movie \"Batman\" refers to Title = 'Batman'; longest screentime refers to max(screentime)",
        "SQL": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID INNER JOIN movie AS T3 ON T3.MovieID = T1.MovieID WHERE T3.Title = 'Batman' ORDER BY T1.screentime DESC LIMIT 1",
        "query": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID INNER JOIN movie AS T3 ON T3.MovieID = T1.MovieID WHERE T3.Title = 'Batman' ORDER BY T1.screentime DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Who",
            "was",
            "the",
            "actor",
            "that",
            "played",
            "in",
            "the",
            "movie",
            "\"Batman\"",
            "with",
            "the",
            "longest",
            "screentime",
            "?",
            "movie",
            "\"Batman\"",
            "refers",
            "to",
            "Title",
            "=",
            "'Batman'",
            ";",
            "longest",
            "screentime",
            "refers",
            "to",
            "max(screentime)"
        ],
        "tc_original": [
            "movie.title",
            "movie.movieid",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "characters.screentime",
            "characters.movieid",
            "characters.actorid",
            "characters.character name",
            "characters.pay",
            "characters.*",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*"
        ],
        "gold_links": {
            "actor": "TABLE:[actor]",
            "movie": "TABLE:[movie]",
            "Batman": "VALUE:[movie].[title]",
            "screentime": "COLUMN:[characters].[screentime]",
            "longest screentime": "COLUMN:[characters].[screentime]",
            "name": "COLUMN:[actor].[name]"
        }
    },
    {
        "db_id": "movie",
        "question": "Who played the character named \"Chanice Kobolowski\"?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Chanice Kobolowski'",
        "query": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Chanice Kobolowski'",
        "question_toks": [
            "Who",
            "played",
            "the",
            "character",
            "named",
            "\"Chanice",
            "Kobolowski\"",
            "?"
        ],
        "tc_original": [
            "characters.character name",
            "characters.actorid",
            "characters.pay",
            "characters.movieid",
            "characters.creditorder",
            "characters.*",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.runtime",
            "movie.*"
        ],
        "gold_links": {
            "played": "COLUMN:[characters].[actorid]",
            "character": "COLUMN:[characters].[character name]",
            "Chanice Kobolowski": "VALUE:[characters].[character name]"
        }
    },
    {
        "db_id": "movie",
        "question": "When is the birthday of the actor who played \"Sully\"? birthday refers to Date of Birth; \"Sully\" refers to Character Name = 'Sully'",
        "evidence": "birthday refers to Date of Birth; \"Sully\" refers to Character Name = 'Sully'",
        "SQL": "SELECT T2.`Date of Birth` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Sully'",
        "query": "SELECT T2.`Date of Birth` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Sully'",
        "evidence_added": true,
        "question_toks": [
            "When",
            "is",
            "the",
            "birthday",
            "of",
            "the",
            "actor",
            "who",
            "played",
            "\"Sully\"",
            "?",
            "birthday",
            "refers",
            "to",
            "Date",
            "of",
            "Birth",
            ";",
            "\"Sully\"",
            "refers",
            "to",
            "Character",
            "Name",
            "=",
            "'Sully'"
        ],
        "tc_original": [
            "actor.actorid",
            "actor.date of birth",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.*",
            "characters.character name",
            "characters.actorid",
            "characters.movieid",
            "characters.pay",
            "characters.creditorder",
            "characters.*",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.runtime",
            "movie.*"
        ],
        "gold_links": {
            "birthday": "COLUMN:[actor].[date of birth]",
            "actor": "TABLE:[actor]",
            "Sully": "VALUE:[characters].[character name]"
        }
    },
    {
        "db_id": "movie",
        "question": "Give the biography of the actor who played \"Michael Moscovitz\". \"Michael Moscovitz\" refers to Character Name = 'Michael Moscovitz'",
        "evidence": "\"Michael Moscovitz\" refers to Character Name = 'Michael Moscovitz'",
        "SQL": "SELECT T2.Biography FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Michael Moscovitz'",
        "query": "SELECT T2.Biography FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Michael Moscovitz'",
        "evidence_added": true,
        "question_toks": [
            "Give",
            "the",
            "biography",
            "of",
            "the",
            "actor",
            "who",
            "played",
            "\"Michael",
            "Moscovitz\"",
            ".",
            "\"Michael",
            "Moscovitz\"",
            "refers",
            "to",
            "Character",
            "Name",
            "=",
            "'Michael",
            "Moscovitz'"
        ],
        "tc_original": [
            "actor.actorid",
            "actor.biography",
            "actor.name",
            "actor.gender",
            "actor.ethnicity",
            "actor.*",
            "characters.character name",
            "characters.actorid",
            "characters.movieid",
            "characters.pay",
            "characters.creditorder",
            "characters.*",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.runtime",
            "movie.rating",
            "movie.*"
        ],
        "gold_links": {
            "biography": "COLUMN:[actor].[biography]",
            "actor": "TABLE:[actor]",
            "Michael Moscovitz": "VALUE:[characters].[character name]"
        }
    },
    {
        "db_id": "movie",
        "question": "How tall is the actor who played \"Lurch\"? tall refers to Height (Inches); \"Lurch\" refers to Character Name = 'Lurch'",
        "evidence": "tall refers to Height (Inches); \"Lurch\" refers to Character Name = 'Lurch'",
        "SQL": "SELECT T2.`Height (Inches)` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Lurch'",
        "query": "SELECT T2.`Height (Inches)` FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.`Character Name` = 'Lurch'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "tall",
            "is",
            "the",
            "actor",
            "who",
            "played",
            "\"Lurch\"",
            "?",
            "tall",
            "refers",
            "to",
            "Height",
            "(Inches)",
            ";",
            "\"Lurch\"",
            "refers",
            "to",
            "Character",
            "Name",
            "=",
            "'Lurch'"
        ],
        "tc_original": [
            "actor.height (inches)",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.*",
            "characters.actorid",
            "characters.character name",
            "characters.pay",
            "characters.movieid",
            "characters.creditorder",
            "characters.*",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.runtime",
            "movie.*"
        ],
        "gold_links": {
            "tall": "COLUMN:[actor].[height (inches)]",
            "height": "COLUMN:[actor].[height (inches)]",
            "actor": "TABLE:[actor]",
            "Lurch": "VALUE:[characters].[character name]",
            "character name": "COLUMN:[characters].[character name]"
        }
    },
    {
        "db_id": "movie",
        "question": "Show the No.3 character name in the credit list of the movie \"G.I. Joe: The Rise of Cobra\". No.3 character refers to creditOrder = '3'; movie \"G.I. Joe: The Rise of Cobra\" refers to Title = 'G.I. Joe: The Rise of Cobra'",
        "evidence": "No.3 character refers to creditOrder = '3'; movie \"G.I. Joe: The Rise of Cobra\" refers to Title = 'G.I. Joe: The Rise of Cobra'",
        "SQL": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T2.creditOrder = '3'",
        "query": "SELECT T2.`Character Name` FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T2.creditOrder = '3'",
        "evidence_added": true,
        "question_toks": [
            "Show",
            "the",
            "No.3",
            "character",
            "name",
            "in",
            "the",
            "credit",
            "list",
            "of",
            "the",
            "movie",
            "\"G.I",
            ".",
            "Joe",
            ":",
            "The",
            "Rise",
            "of",
            "Cobra\"",
            ".",
            "No.3",
            "character",
            "refers",
            "to",
            "creditOrder",
            "=",
            "'3'",
            ";",
            "movie",
            "\"G.I",
            ".",
            "Joe",
            ":",
            "The",
            "Rise",
            "of",
            "Cobra\"",
            "refers",
            "to",
            "Title",
            "=",
            "'G.I",
            ".",
            "Joe",
            ":",
            "The",
            "Rise",
            "of",
            "Cobra'"
        ],
        "tc_original": [
            "characters.character name",
            "characters.movieid",
            "characters.creditorder",
            "characters.actorid",
            "characters.pay",
            "characters.*",
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.actorid",
            "actor.*"
        ],
        "gold_links": {
            "No.3 character": "COLUMN:[characters].[creditorder]",
            "character name": "COLUMN:[characters].[character name]",
            "credit list": "TABLE:[characters]",
            "movie": "TABLE:[movie]",
            "G.I. Joe: The Rise of Cobra": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movie",
        "question": "Who played the No.2 character in the credit list of the movie \"American Hustle\"? No.2 character refers to creditOrder = '2'; movie \"American Hustle\" refers to Title = 'American Hustle'",
        "evidence": "No.2 character refers to creditOrder = '2'; movie \"American Hustle\" refers to Title = 'American Hustle'",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'American Hustle' AND T2.creditOrder = '2'",
        "query": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'American Hustle' AND T2.creditOrder = '2'",
        "evidence_added": true,
        "question_toks": [
            "Who",
            "played",
            "the",
            "No.2",
            "character",
            "in",
            "the",
            "credit",
            "list",
            "of",
            "the",
            "movie",
            "\"American",
            "Hustle\"",
            "?",
            "No.2",
            "character",
            "refers",
            "to",
            "creditOrder",
            "=",
            "'2'",
            ";",
            "movie",
            "\"American",
            "Hustle\"",
            "refers",
            "to",
            "Title",
            "=",
            "'American",
            "Hustle'"
        ],
        "tc_original": [
            "movie.title",
            "movie.movieid",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "characters.movieid",
            "characters.creditorder",
            "characters.actorid",
            "characters.character name",
            "characters.pay",
            "characters.*",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*"
        ],
        "gold_links": {
            "played": "TABLE:[actor]",
            "No.2 character": "COLUMN:[characters].[creditorder]",
            "credit list": "TABLE:[characters]",
            "movie": "TABLE:[movie]",
            "American Hustle": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movie",
        "question": "Who played the No.1 character in the credit list of the movie which was released on \"2015/10/26\"? No.1 character refers to creditOrder = '1'; released on \"2015/10/26\" refers to Release Date = '2015-10-26'",
        "evidence": "No.1 character refers to creditOrder = '1'; released on \"2015/10/26\" refers to Release Date = '2015-10-26'",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.`Release Date` = '2015-10-26' AND T2.creditOrder = '1'",
        "query": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.`Release Date` = '2015-10-26' AND T2.creditOrder = '1'",
        "evidence_added": true,
        "question_toks": [
            "Who",
            "played",
            "the",
            "No.1",
            "character",
            "in",
            "the",
            "credit",
            "list",
            "of",
            "the",
            "movie",
            "which",
            "was",
            "released",
            "on",
            "\"2015/10/26\"",
            "?",
            "No.1",
            "character",
            "refers",
            "to",
            "creditOrder",
            "=",
            "'1'",
            ";",
            "released",
            "on",
            "\"2015/10/26\"",
            "refers",
            "to",
            "Release",
            "Date",
            "=",
            "'2015-10-26'"
        ],
        "tc_original": [
            "movie.release date",
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.*",
            "characters.movieid",
            "characters.actorid",
            "characters.creditorder",
            "characters.character name",
            "characters.pay",
            "characters.*",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*"
        ],
        "gold_links": {
            "played": "COLUMN:[characters].[actorid]",
            "No.1 character": "VALUE:[characters].[creditorder]",
            "credit list": "TABLE:[characters]",
            "movie": "TABLE:[movie]",
            "released": "COLUMN:[movie].[release date]",
            "2015/10/26": "VALUE:[movie].[release date]",
            "Release Date": "COLUMN:[movie].[release date]",
            "creditOrder": "COLUMN:[characters].[creditorder]",
            "name": "COLUMN:[actor].[name]"
        }
    },
    {
        "db_id": "movie",
        "question": "What is the percentage of the USA actors that showed up in the credit list of movie \"Mrs. Doubtfire\"? USA actors refers to Birth Country = 'USA'; movie \"Mrs. Doubtfire\" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100%",
        "evidence": "USA actors refers to Birth Country = 'USA'; movie \"Mrs. Doubtfire\" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.`Birth Country` = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Birth Country`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'",
        "query": "SELECT CAST(SUM(CASE WHEN T3.`Birth Country` = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.`Birth Country`) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "percentage",
            "of",
            "the",
            "USA",
            "actors",
            "that",
            "showed",
            "up",
            "in",
            "the",
            "credit",
            "list",
            "of",
            "movie",
            "\"Mrs",
            ".",
            "Doubtfire\"",
            "?",
            "USA",
            "actors",
            "refers",
            "to",
            "Birth",
            "Country",
            "=",
            "'USA'",
            ";",
            "movie",
            "\"Mrs",
            ".",
            "Doubtfire\"",
            "refers",
            "to",
            "Title",
            "=",
            "'Mrs",
            ".",
            "Doubtfire'",
            ";",
            "percentage",
            "=",
            "divide(count(ActorID",
            "where",
            "Birth",
            "Country",
            "=",
            "'USA')",
            ",",
            "count(ActorID))",
            "*",
            "100%"
        ],
        "tc_original": [
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "characters.movieid",
            "characters.actorid",
            "characters.creditorder",
            "characters.pay",
            "characters.character name",
            "characters.*",
            "actor.birth country",
            "actor.actorid",
            "actor.birth city",
            "actor.name",
            "actor.biography",
            "actor.*"
        ],
        "gold_links": {
            "percentage": "COLUMN:[actor].[actorid]",
            "USA actors": "VALUE:[actor].[birth country]",
            "Birth Country": "COLUMN:[actor].[birth country]",
            "credit list": "TABLE:[characters]",
            "movie": "TABLE:[movie]",
            "Mrs. Doubtfire": "VALUE:[movie].[title]",
            "Title": "COLUMN:[movie].[title]"
        }
    },
    {
        "db_id": "movie",
        "question": "In rated PG movies, how many of them released in June 1990? rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30'",
        "evidence": "rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30'",
        "SQL": "SELECT COUNT(*) FROM movie WHERE `MPAA Rating` = 'PG' AND `Release Date` LIKE '1990-06%'",
        "query": "SELECT COUNT(*) FROM movie WHERE `MPAA Rating` = 'PG' AND `Release Date` LIKE '1990-06%'",
        "evidence_added": true,
        "question_toks": [
            "In",
            "rated",
            "PG",
            "movies",
            ",",
            "how",
            "many",
            "of",
            "them",
            "released",
            "in",
            "June",
            "1990",
            "?",
            "rated",
            "PG",
            "refers",
            "to",
            "MPAA",
            "Rating",
            "=",
            "'PG'",
            ";",
            "released",
            "in",
            "June",
            "1990",
            "refers",
            "to",
            "Release",
            "Date",
            "BETWEEN",
            "'1990-06-01'",
            "and",
            "'1990-06-30'"
        ],
        "tc_original": [
            "movie.release date",
            "movie.mpaa rating",
            "movie.rating",
            "movie.rating count",
            "movie.title",
            "movie.*",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.actorid",
            "actor.*",
            "characters.pay",
            "characters.movieid",
            "characters.actorid",
            "characters.character name",
            "characters.creditorder",
            "characters.*"
        ],
        "gold_links": {
            "rated PG": "VALUE:[movie].[mpaa rating]",
            "PG": "VALUE:[movie].[mpaa rating]",
            "movies": "TABLE:[movie]",
            "released": "COLUMN:[movie].[release date]",
            "June 1990": "VALUE:[movie].[release date]"
        }
    },
    {
        "db_id": "movie",
        "question": "In romantic movies, how many of them starred by John Travolta? romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta'",
        "evidence": "romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta'",
        "SQL": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Romance' AND T3.Name = 'John Travolta'",
        "query": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Romance' AND T3.Name = 'John Travolta'",
        "evidence_added": true,
        "question_toks": [
            "In",
            "romantic",
            "movies",
            ",",
            "how",
            "many",
            "of",
            "them",
            "starred",
            "by",
            "John",
            "Travolta",
            "?",
            "romantic",
            "movies",
            "refers",
            "to",
            "Genre",
            "=",
            "'Romance'",
            ";",
            "starred",
            "by",
            "John",
            "Travolta",
            "refers",
            "to",
            "Name",
            "=",
            "'John",
            "Travolta'"
        ],
        "tc_original": [
            "movie.genre",
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.*",
            "actor.name",
            "actor.actorid",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*",
            "characters.movieid",
            "characters.actorid",
            "characters.character name",
            "characters.pay",
            "characters.creditorder",
            "characters.*"
        ],
        "gold_links": {
            "romantic movies": "COLUMN:[movie].[genre]",
            "romance": "VALUE:[movie].[genre]",
            "starred": "TABLE:[characters]",
            "John Travolta": "VALUE:[actor].[name]"
        }
    },
    {
        "db_id": "movie",
        "question": "Count the male actors born in USA that starred in Ghost. male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost'",
        "evidence": "male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost'",
        "SQL": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Ghost' AND T3.Gender = 'Male' AND T3.`Birth Country` = 'USA'",
        "query": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Ghost' AND T3.Gender = 'Male' AND T3.`Birth Country` = 'USA'",
        "evidence_added": true,
        "question_toks": [
            "Count",
            "the",
            "male",
            "actors",
            "born",
            "in",
            "USA",
            "that",
            "starred",
            "in",
            "Ghost",
            ".",
            "male",
            "refers",
            "to",
            "Gender",
            "=",
            "'Male'",
            ";",
            "born",
            "in",
            "USA",
            "refers",
            "to",
            "Birth",
            "Country",
            "=",
            "'USA'",
            ";",
            "Ghost",
            "refers",
            "to",
            "Title",
            "=",
            "'Ghost'"
        ],
        "tc_original": [
            "actor.birth country",
            "actor.actorid",
            "actor.gender",
            "actor.birth city",
            "actor.name",
            "actor.*",
            "movie.movieid",
            "movie.title",
            "movie.budget",
            "movie.gross",
            "movie.genre",
            "movie.*",
            "characters.movieid",
            "characters.actorid",
            "characters.pay",
            "characters.character name",
            "characters.creditorder",
            "characters.*"
        ],
        "gold_links": {
            "male": "VALUE:[actor].[gender]",
            "actors": "TABLE:[actor]",
            "born": "COLUMN:[actor].[birth country]",
            "USA": "VALUE:[actor].[birth country]",
            "starred": "TABLE:[characters]",
            "Ghost": "VALUE:[movie].[title]"
        }
    },
    {
        "db_id": "movie",
        "question": "Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062. actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama'",
        "evidence": "actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama'",
        "SQL": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Gross = 136766062 AND T2.`Character Name` = 'Don Altobello' AND T1.Genre = 'Drama'",
        "query": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Gross = 136766062 AND T2.`Character Name` = 'Don Altobello' AND T1.Genre = 'Drama'",
        "evidence_added": true,
        "question_toks": [
            "Find",
            "the",
            "actor's",
            "name",
            "that",
            "played",
            "as",
            "Don",
            "Altobello",
            "in",
            "a",
            "drama",
            "movie",
            "that",
            "has",
            "a",
            "gross",
            "of",
            "136766062",
            ".",
            "actor's",
            "name",
            "refers",
            "to",
            "Name",
            ";",
            "as",
            "Don",
            "Altobello",
            "refers",
            "to",
            "Character",
            "Name",
            "=",
            "'Don",
            "Altobello'",
            ";",
            "drama",
            "movie",
            "refers",
            "to",
            "Genre",
            "=",
            "'Drama'"
        ],
        "tc_original": [
            "movie.movieid",
            "movie.gross",
            "movie.genre",
            "movie.title",
            "movie.budget",
            "movie.*",
            "characters.movieid",
            "characters.actorid",
            "characters.character name",
            "characters.pay",
            "characters.creditorder",
            "characters.*",
            "actor.actorid",
            "actor.name",
            "actor.biography",
            "actor.gender",
            "actor.ethnicity",
            "actor.*"
        ],
        "gold_links": {
            "actor's name": "COLUMN:[actor].[name]",
            "Don Altobello": "VALUE:[characters].[character name]",
            "drama movie": "VALUE:[movie].[genre]",
            "gross": "COLUMN:[movie].[gross]",
            "136766062": "VALUE:[movie].[gross]"
        }
    },
    {
        "db_id": "social_media",
        "question": "How many tweets are seen by more than 1000 unique users? seen by more than 1000 unique users refers to Reach > 1000",
        "evidence": "seen by more than 1000 unique users refers to Reach > 1000",
        "SQL": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Reach > 1000",
        "query": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Reach > 1000",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "tweets",
            "are",
            "seen",
            "by",
            "more",
            "than",
            "1000",
            "unique",
            "users",
            "?",
            "seen",
            "by",
            "more",
            "than",
            "1000",
            "unique",
            "users",
            "refers",
            "to",
            "Reach",
            ">",
            "1000"
        ],
        "tc_original": [
            "twitter.reach",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.day",
            "twitter.*",
            "location.country",
            "location.state",
            "location.city",
            "location.locationid",
            "location.statecode",
            "location.*",
            "user.gender",
            "user.userid",
            "user.*"
        ],
        "gold_links": {
            "tweets": "TABLE:[twitter]",
            "seen": "COLUMN:[twitter].[reach]",
            "more than 1000": "VALUE:[twitter].[reach]",
            "unique users": "COLUMN:[twitter].[reach]"
        }
    },
    {
        "db_id": "social_media",
        "question": "How many tweets in total were posted by a user in Argentina? \"Argentina\" is the Country",
        "evidence": "\"Argentina\" is the Country",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1",
        "query": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "tweets",
            "in",
            "total",
            "were",
            "posted",
            "by",
            "a",
            "user",
            "in",
            "Argentina",
            "?",
            "\"Argentina\"",
            "is",
            "the",
            "Country"
        ],
        "tc_original": [
            "location.locationid",
            "location.country",
            "location.state",
            "location.city",
            "location.statecode",
            "location.*",
            "twitter.locationid",
            "twitter.userid",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.*",
            "user.userid",
            "user.gender",
            "user.*"
        ],
        "gold_links": {
            "tweets": "TABLE:[twitter]",
            "user": "TABLE:[user]",
            "Argentina": "VALUE:[location].[country]",
            "Country": "COLUMN:[location].[country]"
        }
    },
    {
        "db_id": "social_media",
        "question": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users? seen by the most number of unique users refers to Max(Reach)",
        "evidence": "seen by the most number of unique users refers to Max(Reach)",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1",
        "query": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "gender",
            "of",
            "the",
            "user",
            "who",
            "has",
            "posted",
            "the",
            "tweet",
            "that",
            "is",
            "seen",
            "by",
            "the",
            "most",
            "number",
            "of",
            "unique",
            "users",
            "?",
            "seen",
            "by",
            "the",
            "most",
            "number",
            "of",
            "unique",
            "users",
            "refers",
            "to",
            "Max(Reach)"
        ],
        "tc_original": [
            "twitter.reach",
            "twitter.userid",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.*",
            "user.userid",
            "user.gender",
            "user.*",
            "location.country",
            "location.state",
            "location.city",
            "location.locationid",
            "location.statecode",
            "location.*"
        ],
        "gold_links": {
            "gender": "COLUMN:[user].[gender]",
            "user": "TABLE:[user]",
            "tweet": "TABLE:[twitter]",
            "reach": "COLUMN:[twitter].[reach]",
            "unique users": "COLUMN:[twitter].[reach]"
        }
    },
    {
        "db_id": "social_media",
        "question": "Give the name of the city of the user who tweeted `One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`. \"One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\" is the text",
        "evidence": "\"One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\" is the text",
        "SQL": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a'",
        "query": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a'",
        "evidence_added": true,
        "question_toks": [
            "Give",
            "the",
            "name",
            "of",
            "the",
            "city",
            "of",
            "the",
            "user",
            "who",
            "tweeted",
            "`One",
            "of",
            "our",
            "favorite",
            "stories",
            "is",
            "@FINRA_News's",
            "move",
            "to",
            "the",
            "cloud",
            "with",
            "AWS",
            "Enterprise",
            "Support!",
            "https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`",
            ".",
            "\"One",
            "of",
            "our",
            "favorite",
            "stories",
            "is",
            "@FINRA_News's",
            "move",
            "to",
            "the",
            "cloud",
            "with",
            "AWS",
            "Enterprise",
            "Support!",
            "https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\"",
            "is",
            "the",
            "text"
        ],
        "tc_original": [
            "location.locationid",
            "location.city",
            "location.country",
            "location.state",
            "location.statecode",
            "location.*",
            "twitter.locationid",
            "twitter.userid",
            "twitter.tweetid",
            "twitter.text",
            "twitter.weekday",
            "twitter.*",
            "user.userid",
            "user.gender",
            "user.*"
        ],
        "gold_links": {
            "name": "COLUMN:[location].[city]",
            "city": "COLUMN:[location].[city]",
            "user": "TABLE:[user]",
            "tweeted": "TABLE:[twitter]",
            "text": "COLUMN:[twitter].[text]",
            "One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a": "VALUE:[twitter].[text]"
        }
    },
    {
        "db_id": "social_media",
        "question": "Which state was the tweet `tw-685681052912873473` from? Give the state code. tw-685681052912873473' is the TweetID",
        "evidence": "tw-685681052912873473' is the TweetID",
        "SQL": "SELECT T2.StateCode FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.TweetID = 'tw-685681052912873473'",
        "query": "SELECT T2.StateCode FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.TweetID = 'tw-685681052912873473'",
        "evidence_added": true,
        "question_toks": [
            "Which",
            "state",
            "was",
            "the",
            "tweet",
            "`tw-685681052912873473`",
            "from",
            "?",
            "Give",
            "the",
            "state",
            "code",
            ".",
            "tw-685681052912873473'",
            "is",
            "the",
            "TweetID"
        ],
        "tc_original": [
            "location.locationid",
            "location.statecode",
            "location.state",
            "location.country",
            "location.city",
            "location.*",
            "twitter.locationid",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.day",
            "twitter.*",
            "user.gender",
            "user.userid",
            "user.*"
        ],
        "gold_links": {
            "state": "COLUMN:[location].[state]",
            "state code": "COLUMN:[location].[statecode]",
            "tweet": "COLUMN:[twitter].[tweetid]",
            "tw-685681052912873473": "VALUE:[twitter].[tweetid]"
        }
    },
    {
        "db_id": "social_media",
        "question": "How many unique users have seen tweet with text `Happy New Year to all those AWS instances of ours!`? \"Happy New Year to all those AWS instances of ours!\" is the text; seen unique users refers to Reach",
        "evidence": "\"Happy New Year to all those AWS instances of ours!\" is the text; seen unique users refers to Reach",
        "SQL": "SELECT Reach FROM twitter WHERE text = 'Happy New Year to all those AWS instances of ours!'",
        "query": "SELECT Reach FROM twitter WHERE text = 'Happy New Year to all those AWS instances of ours!'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "unique",
            "users",
            "have",
            "seen",
            "tweet",
            "with",
            "text",
            "`Happy",
            "New",
            "Year",
            "to",
            "all",
            "those",
            "AWS",
            "instances",
            "of",
            "ours!`",
            "?",
            "\"Happy",
            "New",
            "Year",
            "to",
            "all",
            "those",
            "AWS",
            "instances",
            "of",
            "ours!\"",
            "is",
            "the",
            "text",
            ";",
            "seen",
            "unique",
            "users",
            "refers",
            "to",
            "Reach"
        ],
        "tc_original": [
            "twitter.text",
            "twitter.userid",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.*",
            "user.gender",
            "user.userid",
            "user.*",
            "location.country",
            "location.state",
            "location.city",
            "location.locationid",
            "location.statecode",
            "location.*"
        ],
        "gold_links": {
            "unique users": "COLUMN:[twitter].[Reach]",
            "seen": "COLUMN:[twitter].[Reach]",
            "tweet": "TABLE:[twitter]",
            "text": "COLUMN:[twitter].[text]",
            "Happy New Year to all those AWS instances of ours": "VALUE:[twitter].[text]"
        }
    },
    {
        "db_id": "social_media",
        "question": "List down the text of tweets posted by unknown gender users. unknown gender user refers to Gender = 'Unknown'",
        "evidence": "unknown gender user refers to Gender = 'Unknown'",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Unknown'",
        "query": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Unknown'",
        "evidence_added": true,
        "question_toks": [
            "List",
            "down",
            "the",
            "text",
            "of",
            "tweets",
            "posted",
            "by",
            "unknown",
            "gender",
            "users",
            ".",
            "unknown",
            "gender",
            "user",
            "refers",
            "to",
            "Gender",
            "=",
            "'Unknown'"
        ],
        "tc_original": [
            "twitter.text",
            "twitter.userid",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.*",
            "user.gender",
            "user.userid",
            "user.*",
            "location.country",
            "location.state",
            "location.city",
            "location.locationid",
            "location.statecode",
            "location.*"
        ],
        "gold_links": {
            "text": "COLUMN:[twitter].[text]",
            "tweets": "TABLE:[twitter]",
            "gender": "COLUMN:[user].[gender]",
            "unknown": "VALUE:[user].[gender]",
            "user": "TABLE:[user]"
        }
    },
    {
        "db_id": "social_media",
        "question": "Calculate the total number of male tweet IDs. \"Male\" is the Gender",
        "evidence": "\"Male\" is the Gender",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'",
        "query": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'",
        "evidence_added": true,
        "question_toks": [
            "Calculate",
            "the",
            "total",
            "number",
            "of",
            "male",
            "tweet",
            "IDs",
            ".",
            "\"Male\"",
            "is",
            "the",
            "Gender"
        ],
        "tc_original": [
            "user.userid",
            "user.gender",
            "user.*",
            "twitter.tweetid",
            "twitter.userid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.day",
            "twitter.*",
            "location.country",
            "location.state",
            "location.city",
            "location.locationid",
            "location.statecode",
            "location.*"
        ],
        "gold_links": {
            "male": "VALUE:[user].[gender]",
            "tweet IDs": "COLUMN:[twitter].[tweetid]",
            "gender": "COLUMN:[user].[gender]"
        }
    },
    {
        "db_id": "social_media",
        "question": "Tweet with ID tw-682723090279841798 was posted from which country? \"tw-682723090279841798\" is the TweetID",
        "evidence": "\"tw-682723090279841798\" is the TweetID",
        "SQL": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'",
        "query": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'",
        "evidence_added": true,
        "question_toks": [
            "Tweet",
            "with",
            "ID",
            "tw-682723090279841798",
            "was",
            "posted",
            "from",
            "which",
            "country",
            "?",
            "\"tw-682723090279841798\"",
            "is",
            "the",
            "TweetID"
        ],
        "tc_original": [
            "location.locationid",
            "location.country",
            "location.state",
            "location.city",
            "location.statecode",
            "location.*",
            "twitter.locationid",
            "twitter.tweetid",
            "twitter.userid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.*",
            "user.userid",
            "user.gender",
            "user.*"
        ],
        "gold_links": {
            "Tweet": "TABLE:[twitter]",
            "ID": "COLUMN:[twitter].[tweetid]",
            "tw-682723090279841798": "VALUE:[twitter].[tweetid]",
            "country": "COLUMN:[location].[country]"
        }
    },
    {
        "db_id": "social_media",
        "question": "Tweets that were posted from Brazil are in what languague? \"Brazil\" is the Country; language refers to Lang",
        "evidence": "\"Brazil\" is the Country; language refers to Lang",
        "SQL": "SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'",
        "query": "SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'",
        "evidence_added": true,
        "question_toks": [
            "Tweets",
            "that",
            "were",
            "posted",
            "from",
            "Brazil",
            "are",
            "in",
            "what",
            "languague",
            "?",
            "\"Brazil\"",
            "is",
            "the",
            "Country",
            ";",
            "language",
            "refers",
            "to",
            "Lang"
        ],
        "tc_original": [
            "twitter.lang",
            "twitter.locationid",
            "twitter.tweetid",
            "twitter.userid",
            "twitter.weekday",
            "twitter.*",
            "location.locationid",
            "location.country",
            "location.state",
            "location.city",
            "location.statecode",
            "location.*",
            "user.gender",
            "user.userid",
            "user.*"
        ],
        "gold_links": {
            "tweets": "TABLE:[twitter]",
            "posted": "TABLE:[twitter]",
            "Brazil": "VALUE:[location].[country]",
            "country": "COLUMN:[location].[country]",
            "language": "COLUMN:[twitter].[lang]"
        }
    },
    {
        "db_id": "social_media",
        "question": "Please list the texts of all the tweets in French posted by male users. \"French\" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male'",
        "evidence": "\"French\" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male'",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Lang = 'fr'",
        "query": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Lang = 'fr'",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "the",
            "texts",
            "of",
            "all",
            "the",
            "tweets",
            "in",
            "French",
            "posted",
            "by",
            "male",
            "users",
            ".",
            "\"French\"",
            "is",
            "the",
            "language",
            "and",
            "refers",
            "to",
            "Lang",
            "=",
            "'fr'",
            ";",
            "male",
            "user",
            "refers",
            "to",
            "Gender",
            "=",
            "'Male'"
        ],
        "tc_original": [
            "twitter.text",
            "twitter.userid",
            "twitter.lang",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.*",
            "user.gender",
            "user.userid",
            "user.*",
            "location.country",
            "location.state",
            "location.city",
            "location.locationid",
            "location.statecode",
            "location.*"
        ],
        "gold_links": {
            "texts": "COLUMN:[twitter].[text]",
            "tweets": "TABLE:[twitter]",
            "French": "VALUE:[twitter].[lang]",
            "language": "COLUMN:[twitter].[lang]",
            "male": "VALUE:[user].[gender]",
            "users": "TABLE:[user]"
        }
    },
    {
        "db_id": "social_media",
        "question": "Please list all the cities from where tweets with neutral sentiments were posted. neutral sentiment refers to Sentiment = 0",
        "evidence": "neutral sentiment refers to Sentiment = 0",
        "SQL": "SELECT DISTINCT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE Sentiment = 0",
        "query": "SELECT DISTINCT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE Sentiment = 0",
        "evidence_added": true,
        "question_toks": [
            "Please",
            "list",
            "all",
            "the",
            "cities",
            "from",
            "where",
            "tweets",
            "with",
            "neutral",
            "sentiments",
            "were",
            "posted",
            ".",
            "neutral",
            "sentiment",
            "refers",
            "to",
            "Sentiment",
            "=",
            "0"
        ],
        "tc_original": [
            "location.locationid",
            "location.city",
            "location.country",
            "location.state",
            "location.statecode",
            "location.*",
            "twitter.locationid",
            "twitter.sentiment",
            "twitter.tweetid",
            "twitter.weekday",
            "twitter.hour",
            "twitter.*",
            "user.gender",
            "user.userid",
            "user.*"
        ],
        "gold_links": {
            "cities": "COLUMN:[location].[city]",
            "tweets": "TABLE:[twitter]",
            "neutral sentiment": "VALUE:[twitter].[sentiment]",
            "sentiment": "COLUMN:[twitter].[sentiment]",
            "0": "VALUE:[twitter].[sentiment]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "What is the average gpa of Ogdon Zywicki's research assistants? research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);",
        "SQL": "SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'",
        "query": "SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "gpa",
            "of",
            "Ogdon",
            "Zywicki's",
            "research",
            "assistants",
            "?",
            "research",
            "assistant",
            "refers",
            "to",
            "the",
            "student",
            "who",
            "serves",
            "for",
            "research",
            "where",
            "the",
            "abbreviation",
            "is",
            "RA",
            ";",
            "prof_id",
            "refers",
            "to",
            "professor\u2019s",
            "ID",
            ";",
            "GPA",
            "is",
            "an",
            "abbreviated",
            "name",
            "of",
            "Grade",
            "Point",
            "Average",
            "where",
            "average",
            "=",
            "AVG(gpa)",
            ";"
        ],
        "tc_original": [
            "prof.last_name",
            "prof.first_name",
            "prof.prof_id",
            "prof.gender",
            "prof.email",
            "prof.*",
            "student.gpa",
            "student.student_id",
            "student.email",
            "student.intelligence",
            "student.type",
            "student.*",
            "ra.prof_id",
            "ra.student_id",
            "ra.capability",
            "ra.salary",
            "ra.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*"
        ],
        "gold_links": {
            "average gpa": "COLUMN:[student].[gpa]",
            "gpa": "COLUMN:[student].[gpa]",
            "Ogdon": "COLUMN:[prof].[first_name]",
            "Zywicki": "COLUMN:[prof].[last_name]",
            "research assistants": "TABLE:[ra]",
            "research assistant": "TABLE:[ra]",
            "prof_id": "COLUMN:[ra].[prof_id]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students? research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'",
        "query": "SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "is",
            "the",
            "percentage",
            "of",
            "Professor",
            "Ogdon",
            "Zywicki's",
            "research",
            "assistants",
            "are",
            "taught",
            "postgraduate",
            "students",
            "?",
            "research",
            "assistant",
            "refers",
            "to",
            "the",
            "student",
            "who",
            "serves",
            "for",
            "research",
            "where",
            "the",
            "abbreviation",
            "is",
            "RA",
            ";",
            "taught",
            "postgraduate",
            "student",
            "refers",
            "to",
            "type",
            "=",
            "'TPG'",
            ";",
            "DIVIDE(COUNT(student_id",
            "where",
            "type",
            "=",
            "'TPG'",
            "and",
            "first_name",
            "=",
            "'Ogdon'",
            ",",
            "last_name",
            "=",
            "'Zywicki')",
            ",",
            "COUNT(first_name",
            "=",
            "'Ogdon'",
            ",",
            "last_name",
            "=",
            "'Zywicki'))",
            "as",
            "percentage",
            ";"
        ],
        "tc_original": [
            "prof.prof_id",
            "prof.last_name",
            "prof.first_name",
            "prof.gender",
            "prof.email",
            "prof.*",
            "student.type",
            "student.student_id",
            "student.email",
            "student.intelligence",
            "student.f_name",
            "student.*",
            "ra.prof_id",
            "ra.student_id",
            "ra.capability",
            "ra.salary",
            "ra.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*"
        ],
        "gold_links": {
            "percentage": "COLUMN:[student].[type]",
            "Professor Ogdon Zywicki": "TABLE:[prof]",
            "Ogdon": "VALUE:[prof].[first_name]",
            "Zywicki": "VALUE:[prof].[last_name]",
            "research assistants": "TABLE:[ra]",
            "taught postgraduate": "VALUE:[student].[type]",
            "TPG": "VALUE:[student].[type]",
            "student": "TABLE:[student]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "How many students have the highest intelligence among those taking a bachelor's degree? bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);",
        "evidence": "bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )",
        "query": "SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "students",
            "have",
            "the",
            "highest",
            "intelligence",
            "among",
            "those",
            "taking",
            "a",
            "bachelor's",
            "degree",
            "?",
            "bachelor's",
            "degree",
            "is",
            "an",
            "undergraduate",
            "degree",
            "in",
            "which",
            "type",
            "=",
            "'UG'",
            ";",
            "the",
            "highest",
            "intelligence",
            "refers",
            "to",
            "MAX(intelligence)",
            ";"
        ],
        "tc_original": [
            "student.type",
            "student.intelligence",
            "student.student_id",
            "student.email",
            "student.f_name",
            "student.*",
            "registration.student_id",
            "registration.course_id",
            "registration.grade",
            "registration.sat",
            "registration.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*"
        ],
        "gold_links": {
            "students": "TABLE:[student]",
            "student": "TABLE:[student]",
            "intelligence": "COLUMN:[student].[intelligence]",
            "highest intelligence": "COLUMN:[student].[intelligence]",
            "bachelor's degree": "VALUE:[student].[type]",
            "UG": "VALUE:[student].[type]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "What are the GPAs of the unpaid Research Assistants? Unpaid Research Assistants undertake their work without payment in which salary = 'free';",
        "evidence": "Unpaid Research Assistants undertake their work without payment in which salary = 'free';",
        "SQL": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'",
        "query": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "GPAs",
            "of",
            "the",
            "unpaid",
            "Research",
            "Assistants",
            "?",
            "Unpaid",
            "Research",
            "Assistants",
            "undertake",
            "their",
            "work",
            "without",
            "payment",
            "in",
            "which",
            "salary",
            "=",
            "'free'",
            ";"
        ],
        "tc_original": [
            "student.gpa",
            "student.student_id",
            "student.email",
            "student.intelligence",
            "student.type",
            "student.*",
            "ra.salary",
            "ra.student_id",
            "ra.capability",
            "ra.prof_id",
            "ra.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*",
            "prof.gender",
            "prof.email",
            "prof.popularity",
            "prof.prof_id",
            "prof.first_name",
            "prof.*"
        ],
        "gold_links": {
            "GPA": "COLUMN:[student].[gpa]",
            "GPAs": "COLUMN:[student].[gpa]",
            "Research Assistants": "TABLE:[ra]",
            "salary": "COLUMN:[ra].[salary]",
            "free": "VALUE:[ra].[salary]",
            "unpaid": "VALUE:[ra].[salary]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "Among the easiest courses, what is the name of the course where most students got an A? diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;",
        "evidence": "diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;",
        "SQL": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1",
        "query": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "the",
            "easiest",
            "courses",
            ",",
            "what",
            "is",
            "the",
            "name",
            "of",
            "the",
            "course",
            "where",
            "most",
            "students",
            "got",
            "an",
            "A",
            "?",
            "diff",
            "refers",
            "to",
            "difficulty",
            ";",
            "the",
            "easiest",
            "courses",
            "refers",
            "to",
            "diff",
            "=",
            "1",
            ";",
            "A",
            "refers",
            "to",
            "an",
            "excellent",
            "grade",
            "in",
            "which",
            "grade",
            "=",
            "'A'",
            "for",
            "the",
            "course",
            ";"
        ],
        "tc_original": [
            "course.course_id",
            "course.name",
            "course.diff",
            "course.credit",
            "course.*",
            "registration.course_id",
            "registration.grade",
            "registration.student_id",
            "registration.sat",
            "registration.*",
            "student.email",
            "student.intelligence",
            "student.type",
            "student.student_id",
            "student.f_name",
            "student.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*"
        ],
        "gold_links": {
            "easiest courses": "COLUMN:[course].[diff]",
            "diff": "COLUMN:[course].[diff]",
            "name": "COLUMN:[course].[name]",
            "course": "TABLE:[course]",
            "grade": "COLUMN:[registration].[grade]",
            "A": "VALUE:[registration].[grade]",
            "students": "COLUMN:[registration].[student_id]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "How many courses does the student with the highest GPA this semester take? student with the highest GPA refers to student_id where MAX(gpa);",
        "evidence": "student with the highest GPA refers to student_id where MAX(gpa);",
        "SQL": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )",
        "query": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "courses",
            "does",
            "the",
            "student",
            "with",
            "the",
            "highest",
            "GPA",
            "this",
            "semester",
            "take",
            "?",
            "student",
            "with",
            "the",
            "highest",
            "GPA",
            "refers",
            "to",
            "student_id",
            "where",
            "MAX(gpa)",
            ";"
        ],
        "tc_original": [
            "student.student_id",
            "student.gpa",
            "student.email",
            "student.intelligence",
            "student.type",
            "student.*",
            "registration.student_id",
            "registration.course_id",
            "registration.grade",
            "registration.sat",
            "registration.*",
            "course.course_id",
            "course.name",
            "course.credit",
            "course.diff",
            "course.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*"
        ],
        "gold_links": {
            "courses": "TABLE:[course]",
            "student": "TABLE:[student]",
            "highest GPA": "COLUMN:[student].[gpa]",
            "GPA": "COLUMN:[student].[gpa]",
            "semester": "COLUMN:[registration].[course_id]",
            "student_id": "COLUMN:[student].[student_id]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "What are the names of the courses that the students with the lowest intelligence are least satisfied with? lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;",
        "evidence": "lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1",
        "query": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1",
        "evidence_added": true,
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "courses",
            "that",
            "the",
            "students",
            "with",
            "the",
            "lowest",
            "intelligence",
            "are",
            "least",
            "satisfied",
            "with",
            "?",
            "lower",
            "intelligence",
            "refers",
            "to",
            "intelligence",
            "=",
            "1",
            ";",
            "sat",
            "refers",
            "to",
            "student's",
            "satisfaction",
            "degree",
            "with",
            "the",
            "course",
            "where",
            "least",
            "satisfaction",
            "refers",
            "to",
            "sat",
            "=",
            "1",
            ";"
        ],
        "tc_original": [
            "course.course_id",
            "course.name",
            "course.credit",
            "course.diff",
            "course.*",
            "student.student_id",
            "student.intelligence",
            "student.email",
            "student.type",
            "student.f_name",
            "student.*",
            "registration.course_id",
            "registration.student_id",
            "registration.sat",
            "registration.grade",
            "registration.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*"
        ],
        "gold_links": {
            "names": "COLUMN:[course].[name]",
            "courses": "TABLE:[course]",
            "students": "TABLE:[student]",
            "intelligence": "COLUMN:[student].[intelligence]",
            "lowest intelligence": "VALUE:[student].[intelligence]",
            "sat": "COLUMN:[registration].[sat]",
            "satisfaction": "COLUMN:[registration].[sat]",
            "least satisfaction": "VALUE:[registration].[sat]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "Describe the names and credits of the least difficult courses. diff refers to difficulty; the least difficult courses refer to MIN(diff);",
        "evidence": "diff refers to difficulty; the least difficult courses refer to MIN(diff);",
        "SQL": "SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )",
        "query": "SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )",
        "evidence_added": true,
        "question_toks": [
            "Describe",
            "the",
            "names",
            "and",
            "credits",
            "of",
            "the",
            "least",
            "difficult",
            "courses",
            ".",
            "diff",
            "refers",
            "to",
            "difficulty",
            ";",
            "the",
            "least",
            "difficult",
            "courses",
            "refer",
            "to",
            "MIN(diff)",
            ";"
        ],
        "tc_original": [
            "course.credit",
            "course.name",
            "course.diff",
            "course.course_id",
            "course.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*",
            "prof.gender",
            "prof.email",
            "prof.popularity",
            "prof.prof_id",
            "prof.first_name",
            "prof.*",
            "student.email",
            "student.intelligence",
            "student.type",
            "student.student_id",
            "student.f_name",
            "student.*"
        ],
        "gold_links": {
            "names": "COLUMN:[course].[name]",
            "credits": "COLUMN:[course].[credit]",
            "least difficult": "COLUMN:[course].[diff]",
            "courses": "TABLE:[course]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "In students with a grade of B, how many of them have an intellegence level of 3?",
        "evidence": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.grade = 'B' AND T2.intelligence = 3",
        "query": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.grade = 'B' AND T2.intelligence = 3",
        "question_toks": [
            "In",
            "students",
            "with",
            "a",
            "grade",
            "of",
            "B",
            ",",
            "how",
            "many",
            "of",
            "them",
            "have",
            "an",
            "intellegence",
            "level",
            "of",
            "3",
            "?"
        ],
        "tc_original": [
            "student.student_id",
            "student.intelligence",
            "student.email",
            "student.type",
            "student.f_name",
            "student.*",
            "registration.student_id",
            "registration.grade",
            "registration.course_id",
            "registration.sat",
            "registration.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*"
        ],
        "gold_links": {
            "students": "TABLE:[student]",
            "grade": "COLUMN:[registration].[grade]",
            "B": "VALUE:[registration].[grade]",
            "intellegence": "COLUMN:[student].[intelligence]",
            "3": "VALUE:[student].[intelligence]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "List the course's name where students acquired a grade of D.",
        "evidence": "",
        "SQL": "SELECT T1.name FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'D'",
        "query": "SELECT T1.name FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'D'",
        "question_toks": [
            "List",
            "the",
            "course's",
            "name",
            "where",
            "students",
            "acquired",
            "a",
            "grade",
            "of",
            "D",
            "."
        ],
        "tc_original": [
            "course.course_id",
            "course.name",
            "course.credit",
            "course.diff",
            "course.*",
            "registration.course_id",
            "registration.grade",
            "registration.student_id",
            "registration.sat",
            "registration.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*",
            "student.email",
            "student.intelligence",
            "student.type",
            "student.student_id",
            "student.f_name",
            "student.*"
        ],
        "gold_links": {
            "course": "TABLE:[course]",
            "name": "COLUMN:[course].[name]",
            "grade": "COLUMN:[registration].[grade]",
            "D": "VALUE:[registration].[grade]",
            "students": "TABLE:[student]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "Among students with low salary, how many of them have a gpa of 3.5? low salary refers to salary = 'low';",
        "evidence": "low salary refers to salary = 'low';",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'",
        "query": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "students",
            "with",
            "low",
            "salary",
            ",",
            "how",
            "many",
            "of",
            "them",
            "have",
            "a",
            "gpa",
            "of",
            "3.5",
            "?",
            "low",
            "salary",
            "refers",
            "to",
            "salary",
            "=",
            "'low'",
            ";"
        ],
        "tc_original": [
            "student.student_id",
            "student.gpa",
            "student.intelligence",
            "student.email",
            "student.type",
            "student.*",
            "ra.student_id",
            "ra.salary",
            "ra.capability",
            "ra.prof_id",
            "ra.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*",
            "prof.gender",
            "prof.email",
            "prof.popularity",
            "prof.prof_id",
            "prof.first_name",
            "prof.*"
        ],
        "gold_links": {
            "students": "TABLE:[student]",
            "salary": "COLUMN:[ra].[salary]",
            "low salary": "VALUE:[ra].[salary]",
            "gpa": "COLUMN:[student].[gpa]",
            "3.5": "VALUE:[student].[gpa]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "Calculate the average satisfaction of the good students with their courses. average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';",
        "evidence": "average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';",
        "SQL": "SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'",
        "query": "SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'",
        "evidence_added": true,
        "question_toks": [
            "Calculate",
            "the",
            "average",
            "satisfaction",
            "of",
            "the",
            "good",
            "students",
            "with",
            "their",
            "courses",
            ".",
            "average",
            "satisfaction",
            "=",
            "DIVIDE(SUM(sat)",
            ",",
            "COUNT(course_id))",
            ";",
            "satisfaction",
            "refers",
            "to",
            "sat",
            ";",
            "good",
            "student",
            "refers",
            "to",
            "grade",
            "=",
            "'B'",
            ";"
        ],
        "tc_original": [
            "registration.grade",
            "registration.student_id",
            "registration.course_id",
            "registration.sat",
            "registration.*",
            "course.course_id",
            "course.name",
            "course.credit",
            "course.diff",
            "course.*",
            "student.student_id",
            "student.email",
            "student.intelligence",
            "student.type",
            "student.f_name",
            "student.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*"
        ],
        "gold_links": {
            "average satisfaction": "COLUMN:[registration].[sat]",
            "satisfaction": "COLUMN:[registration].[sat]",
            "good student": "COLUMN:[registration].[grade]",
            "grade": "COLUMN:[registration].[grade]",
            "B": "VALUE:[registration].[grade]",
            "courses": "COLUMN:[registration].[course_id]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "Give the full name and capability of students who failed in any courses. full name of students = f_name, l_name; failed refers to grade IS NULL;",
        "evidence": "full name of students = f_name, l_name; failed refers to grade IS NULL;",
        "SQL": "SELECT T2.f_name, T2.l_name, T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T2.student_id = T1.student_id INNER JOIN registration AS T3 ON T2.student_id = T3.student_id WHERE T3.grade IS NULL OR T3.grade = ''",
        "query": "SELECT T2.f_name, T2.l_name, T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T2.student_id = T1.student_id INNER JOIN registration AS T3 ON T2.student_id = T3.student_id WHERE T3.grade IS NULL OR T3.grade = ''",
        "evidence_added": true,
        "question_toks": [
            "Give",
            "the",
            "full",
            "name",
            "and",
            "capability",
            "of",
            "students",
            "who",
            "failed",
            "in",
            "any",
            "courses",
            ".",
            "full",
            "name",
            "of",
            "students",
            "=",
            "f_name",
            ",",
            "l_name",
            ";",
            "failed",
            "refers",
            "to",
            "grade",
            "IS",
            "NULL",
            ";"
        ],
        "tc_original": [
            "student.student_id",
            "student.f_name",
            "student.l_name",
            "student.email",
            "student.intelligence",
            "student.*",
            "ra.student_id",
            "ra.capability",
            "ra.salary",
            "ra.prof_id",
            "ra.*",
            "registration.student_id",
            "registration.grade",
            "registration.course_id",
            "registration.sat",
            "registration.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*"
        ],
        "gold_links": {
            "full name": "COLUMN:[student].[f_name]",
            "capability": "COLUMN:[ra].[capability]",
            "students": "TABLE:[student]",
            "f_name": "COLUMN:[student].[f_name]",
            "l_name": "COLUMN:[student].[l_name]",
            "failed": "COLUMN:[registration].[grade]",
            "courses": "TABLE:[course]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1. research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;",
        "evidence": "research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'",
        "query": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "research",
            "postgraduate",
            "students",
            ",",
            "give",
            "the",
            "name",
            "of",
            "the",
            "course",
            "with",
            "the",
            "student",
            "satisfaction",
            "value",
            "of",
            "1",
            ".",
            "research",
            "postgraduate",
            "students",
            "refers",
            "to",
            "type",
            "=",
            "'RPG'",
            ";",
            "name",
            "of",
            "the",
            "course",
            "refers",
            "to",
            "name",
            ";",
            "satisfaction",
            "refers",
            "to",
            "sat",
            ";",
            "sat",
            "=",
            "1",
            ";"
        ],
        "tc_original": [
            "course.course_id",
            "course.name",
            "course.credit",
            "course.diff",
            "course.*",
            "student.type",
            "student.student_id",
            "student.email",
            "student.intelligence",
            "student.f_name",
            "student.*",
            "registration.course_id",
            "registration.student_id",
            "registration.sat",
            "registration.grade",
            "registration.*",
            "ra.capability",
            "ra.salary",
            "ra.student_id",
            "ra.prof_id",
            "ra.*"
        ],
        "gold_links": {
            "research postgraduate students": "VALUE:[student].[type]",
            "course": "TABLE:[course]",
            "name": "COLUMN:[course].[name]",
            "satisfaction": "COLUMN:[registration].[sat]",
            "1": "VALUE:[registration].[sat]"
        }
    },
    {
        "db_id": "cs_semester",
        "question": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students? capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';",
        "evidence": "capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';",
        "SQL": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3",
        "query": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3",
        "evidence_added": true,
        "question_toks": [
            "Among",
            "the",
            "students",
            "with",
            "a",
            "capability",
            "below",
            "3",
            ",",
            "what",
            "is",
            "the",
            "difference",
            "of",
            "undergraduate",
            "students",
            "from",
            "research",
            "postgraduate",
            "students",
            "?",
            "capability",
            "<",
            "3",
            ";",
            "difference",
            "=",
            "subtract(count(type",
            "=",
            "'UG'))",
            ",",
            "(count(type",
            "=",
            "'RPG'))",
            ";",
            "undergraduate",
            "students",
            "refers",
            "to",
            "type",
            "=",
            "'UG'",
            ";",
            "research",
            "postgraduate",
            "students",
            "refers",
            "to",
            "type",
            "=",
            "'RPG'",
            ";"
        ],
        "tc_original": [
            "ra.capability",
            "ra.student_id",
            "ra.salary",
            "ra.prof_id",
            "ra.*",
            "student.type",
            "student.student_id",
            "student.email",
            "student.intelligence",
            "student.f_name",
            "student.*",
            "course.name",
            "course.credit",
            "course.diff",
            "course.course_id",
            "course.*",
            "prof.gender",
            "prof.email",
            "prof.popularity",
            "prof.prof_id",
            "prof.first_name",
            "prof.*"
        ],
        "gold_links": {
            "students": "TABLE:[student]",
            "capability": "COLUMN:[ra].[capability]",
            "undergraduate students": "VALUE:[student].[type]",
            "research postgraduate students": "VALUE:[student].[type]",
            "type": "COLUMN:[student].[type]",
            "difference": "COLUMN:[student].[type]",
            "below 3": "VALUE:[ra].[capability]"
        }
    },
    {
        "db_id": "computer_student",
        "question": "How many courses are there for basic or medium undergraduate courses? basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id",
        "evidence": "basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id",
        "SQL": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300'",
        "query": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300'",
        "evidence_added": true,
        "question_toks": [
            "How",
            "many",
            "courses",
            "are",
            "there",
            "for",
            "basic",
            "or",
            "medium",
            "undergraduate",
            "courses",
            "?",
            "basic",
            "or",
            "medium",
            "undergraduate",
            "courses",
            "refers",
            "to",
            "courseLevel",
            "=",
            "'Level_300'",
            ";",
            "courses",
            "refers",
            "to",
            "course.course_id"
        ],
        "tc_original": [
            "course.courselevel",
            "course.course_id",
            "course.*",
            "person.professor",
            "person.student",
            "person.p_id",
            "person.hasposition",
            "person.inphase",
            "person.*",
            "advisedby.p_id",
            "advisedby.p_id_dummy",
            "advisedby.*",
            "taughtby.course_id",
            "taughtby.p_id",
            "taughtby.*"
        ],
        "gold_links": {
            "how many": "COLUMN:[course].[course_id]",
            "courses": "TABLE:[course]",
            "courselevel": "COLUMN:[course].[courselevel]",
            "Level_300": "VALUE:[course].[courselevel]"
        }
    }
]